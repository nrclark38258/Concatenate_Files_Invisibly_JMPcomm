//Author:
//Nathan Clark
//IDEXX Laborabories, Inc.
//Westbrook, ME
//nathan-clark@idexx.com

//------------------Revision History for both script and Help File--
//
//	1.0.0 NClark 033021
//		-> First official version
//		-> Integrated into infrastructure and official addin
//	beta2 NClark 031320
//		-> correct stop if beta time limit reached
//		-> fixed error if cancel on open files dialog
//	beta1 NClark 013020
//		-> 1st Beta handed over
//
//------------------------------------------------------------------

Names Default to Here(1);

//-----------Variable Declarations (above Main for easy access)--
	
	inBeta = 0; //1 if beta dates in use
	creation = DateMDY(3,13,2020);
	betaGoodFor = 30;
	
	//gathers user information
	If(HostIs("MAC"),
		u = Get Environment Variable("USER");
		,
		u = Get Environment Variable("USERNAME");
	);

	updateIDs = {"com.idexx.nclark.Dairy_Reader_Data"};
	minJMPver = "14";

//-----------/Variable Declarations-----------------------
 
defaultPath = Get Default Directory();
include(defaultPath||"\Utilities\utilities.jsl");
 
 checkVersion = Function( {minVer},
	{default local},
	version = Num( Substitute( minVer, ".", "" ) );
	If( Num( Word( 1, JMP Version(), "." ) ) < version,
		a = 0,
		a = 1
	);
	Return( a );
);

betaExpired = Function({},{},
	New Window( "Beta has expired",
		<<Modal,
		Text Box(
			"This Beta has expired. Please contact Nathan Clark a new version",
			<<setfontstyle( "bold" ),
			<<setfontsize( 12 )
		),
		Text Box( "" ),
		Button Box( "OK" ),

	)
);

checkBeta = Function({inBeta,creationDate,betaGoodFor},{default local},
	
	Match(inBeta,
		1,
		If(
			Today() > creationDate + InDays(betaGoodFor),
			Return(0)
			,
			Return(1)
		)
	);
	
);

openAndConcat = Function({},{default local},
	Files = Pick File(
		,
		,
		{"All Files|*", "HTML Files|html;htm"},
		1,
		0,
		,
		Multiple
	);

	For( i=1, i<=nitems(Files), i++,
		Open(Files[i],HTML Table(1), invisible)
	);

	dtnames={};
	dtlist={};
	if(nitems(Files) == 0, stop(),
		For( k = 1, k <=nitems(Files), k++,
			Insert Into( dtnames, Data Table(k) )
		);
	);
	//show(dtnames);
	dtlist=remove(dtnames,1);
	//show(dtlist);

	If(nitems(dtnames) == 1,
		dt = datatable(dtnames[1]);
		fileName = dt << getname;
		dt << show window;
		dt << New Column("Source Table", character(),<< set each value(fileName));
		dt << Move Selected Columns({"Source Table"}, To First);
		,
		dt = datatable(dtnames[1])<<concatenate(dtlist,create source column)
	);
	
	If(nitems(dtnames) == 1, Empty(),
		For( j = 1, j <= N Items( dtnames ), j++,
			Close( dtnames[j], nosave )
		)
	);
	
	Return(dt);
);

dairyReader = Function({dtName},{default local},

	For each row(dtName,
		If(
			:Ratio 1 == "---" & :Ratio 2 == "---" & :Ratio 2 == "---",
			:Control = .; :Bkgnd Avg = .; :Exposure = .; :Backgnd 1[Row()] = .; :Backgnd 2[Row()] = .; :Backgnd 3[Row()] = .
		);
		If(
			Contains(:Ratio 1, ">") > 0, :Ratio 1 = Word(2,:Ratio 1)
		);
		If(
			Contains(:Ratio 2, ">") > 0, :Ratio 2 = Word(2,:Ratio 2)
		);
		If(
			Contains(:Ratio 3, ">") > 0, :Ratio 2 = Word(2,:Ratio 3)
		);
		
	);

	dtName:Ratio 1 << set data type("numeric");
	dtName:Ratio 2 << set data type("numeric");
	dtName:Ratio 3 << set data type("numeric");

	dtName:Ratio 1 << set modeling type("continuous");
	dtName:Ratio 2 << set modeling type("continuous");
	dtName:Ratio 3 << set modeling type("continuous");

	dtName:Density1 << set data type("numeric");
	dtName:Density2 << set data type("numeric");
	dtName:Density3 << set data type("numeric");

	dtName:Density1 << set modeling type("continuous");
	dtName:Density2 << set modeling type("continuous");
	dtName:Density3 << set modeling type("continuous");
);




////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////


If(Length(Include File List()) == 1,
	
	If(checkBeta(inBeta,creation,betaGoodFor) == 0,
		betaExpired()
	);
	
	//batchUpdateChk(updateIDs);
	//trackUsage(u,updateIDs[1]);
	
	If(checkVersion(minJMPver) == 1,

		dt_start = openAndConcat();
		dairyReader(dt_start);
		,
		wrongVer(minJMPver);
	)
	,
	print("Script was included from another source");

);