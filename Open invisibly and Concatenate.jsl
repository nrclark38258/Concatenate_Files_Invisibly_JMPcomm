//Author:
//Nathan Clark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092
//nathan-clark@idexx.com
//27 April, 2012

//This script allows user to open several files and concatenate them together.
//The original files selected are closed once concatenation is complete.

//------------------Revision History--------------------------------
//
//	Change log maintained in Change Log file and commit history
//
//------------------------------------------------------------------
Names Default To Here( 1 );

If( !Namespace Exists( "concatVar" ), New Namespace( "concatVar" ) );
cvar = Namespace("concatVar");

//-----------Variable Declarations (above Main for easy access)--
	
	If(HostIs("Mac"),
		u = Get Environment Variable("USER");
		defaultsLocale = Convert File Path("/Users/"||u||"/Library/Application Support/JMP/NRCaddinVars/",unix);
		,
		u = Get Environment Variable("username");
		defaultsLocale = Convert File Path(Get Environment Variable("APPDATA")||"/SAS/NRCaddinVars/",windows);
	);
	
	addinID = "com.idexx.nclark.concatenate_files_invisibly";
	updateIDs = {"com.idexx.nclark.concatenate_files_invisibly"};
	
	minJMPver = "14";
		
	defaultsFile = "concatInvisPickVar.jsl";

	Try(
		Delete Directory(Convert File Path(Get Environment Variable("APPDATA")||"/Roaming/",windows))
	);

//-----------/Variable Declarations-----------------------

//Try() added to keep code consistent but not fail for the jmp community version
Try(
	include("$ADDIN_HOME(com.idexx.nclark.concatenate_files_invisibly)\Utilities\utilities.jsl");
);

checkVersion = Function({minVer},{default local},
	version = Num(substitute(minVer,".",""));
	If(Num(Word(1,jmpversion(),".")) < version, a = 0, a = 1);
	Return(a)
);

wrongVer = Function({maxVer},{Default Local},
	New Window( "Requires JMP "||char(maxVer), <<Modal, Text Box( "This addin requires the used of JMP "||char(maxVer)||"+" ), Button Box( "OK" ));
);

fileGet = Function({pickFileDir,recursive},{default local},
	//Gets list of files or the directory the files are stored in
	//Returns the Path AND the list of file names separately
	//Based on preference the user is prompted to pick the desired files or navigate to the desired folder
	Try(
		Match(pickFileDir,
			1, fullFiles = Pick File(
					,
					,
					{"All Files|*", "JMP Files|jmp;jsl;jrn"},
					1,
					0,
					,
					Multiple
				);
				files = {};
				fileBreak = Words(fullFiles[1],"/");
				removeFrom(fileBreak,nitems(fileBreak));
				If(Substr(fullFiles[1],1,2) == "//",
					path = "//"||ConcatItems(fileBreak,"/") ||"/";
					,
					path = "/"||ConcatItems(fileBreak,"/") ||"/";
				);
				For(i=1,i<=nitems(fullFiles),i++,
					insertinto(files,substitute(fullFiles[i],path,""))
				);
			,
			2, path = pickdirectory();
				Match(recursive,
					0, files = Files In Directory(path);
						For(i=nitems(files),i>=1,i--,
							If(!FileExists(path||files[i]), RemoveFrom(files,i))
						)
					,
					1, files = Files In Directory(path,"recursive");
						For(i=nitems(files),i>=1,i--,
							If(!FileExists(path||files[i]), RemoveFrom(files,i))
						)
				)
		);
		Return(path,files)
		,
		Return(0)
	)
);

fileImport = Function({path,fileList,method,recursive,compression},{default local},
	
	Try(
		Match(recursive,
			0,
				//// stuff for MFI
				filter = ConcatItems(fileList,";");
				filesImported1 = Multiple File Import(
					<<Set Folder( path ),
					<<Set Name Filter( filter ),
					<<Set Name Enable( 1 ),
					<<Set Add File Name Column(1),
					<<Set Import Mode("CSV Data"),
					<<Set Stack Mode("Stack Similar")
				)<<Import Data();
				filesImported1 << show window(0);
			,
			1,
				//// stuff for MFI
				filter = ConcatItems(fileList,";");
				filesImported1 = Multiple File Import(
					<<Set Folder( path ),
					<<Set Subfolders( 1 ),
					<<Set Name Filter( filter ),
					<<Set Name Enable( 1 ),
					<<Set Add File Name Column(1),
					<<Set Import Mode("CSV Data"),
					<<Set Stack Mode("Stack Similar")
				)<<Import Data();
				filesImported1 << show window(0);
		);
		Match(method,
			2, filesImported = filesImported1;
			,
			1,
				filesImported = {};
				If(nitems(filesImported1 ) == 1,
					filesImported = filesImported1;
					,
					dtList = remove(filesImported1,1);
					insertInto(filesImported,datatable(filesImported1[1])<<concatenate(dtlist));
					For(i=1,i<=nitems(filesImported1),i++,
						filesImported1[i] << close window
					);
				)
				
		);
		For(i=1,i<=nitems(filesImported),i++,
			//moves "File Name" to front of table where it's commonly looked for
			filesImported[i] << Move Selected Columns({"File Name"}, To First);
			
			//looks for null column at end of table which was added by the import
			//the values will be all null ("" or .) and the name will follow JMP standards "Column "|| ncol()+1
			colname = "Column "||char(ncol(filesImported[i]) - 1);
			Try(
				Summarize(filesImported[i],a=by(filesImported[i]:colname));
				If(
					(Column(filesImported[i],ncol(filesImported[i])) << get name) == colname & (a == {""} | a == {"."}),
					filesImported[i] << delete columns(colname);
					,
					Print("Last Column not correct name or null")
				);
				,
				Print("Unable to delete null column")
			);
			
			//renames tables to consistent format
			//improvement on JMP 16s current methods, IMO
			filesImported[i] << SetName("ImportedFile"||Char(i)||"_"||char(today()));
		);
		Match(compression,
			0, Empty()
			,
			1, For(k=1,k<=nitems(filesImported),k++,
				colList={};
				For(i=1,i<=ncol(filesImported[k]),i++,
					If(
						!IsEmpty(Column(filesImported[k],i) << Get Formula), Empty()
					,
						InsertInto(colList,Column(filesImported[k],i) << Get Name)
					)
				);
				filesImported[k] << compress selected columns(colList);
			)
		);
		filesImported << show window(1);
		filesImported[1] << bring window to front;
		wait(0.001);
//MAKE DUPLICATE SELECTION A SEPARATE FUNCTION
		/////duplicate selection(need to make dynamic, all cols but File Name)
		dupesTripped = 0;
		For(j=1,j<=nitems(filesImported),j++,
			colList = filesImported[j] << Get Column Names(string);
			Try(Remove From(colList,Contains(colList,"File Name")));
			//Show(colList);
			If(filesImported[j] << select duplicate rows(Match(Eval(colList))) > 0,
				dupesTripped = dupesTripped + 1;
			);
		);
		If(dupesTripped > 0,
			NewWindow("Duplicates Found",<<modal,
				TextBox("Duplicate Rows were found and selected in "||Char(dupesTripped)||" tables."),
				Hlistbox(ButtonBox("OK"))
			)
		);
		Return(filesImported);
		,
		Return(0)
	)
);

saveSettings = Function({savePath,fileName,pickFileDir,pickDefault,method,recursive,compression},{default local},
	//savePath = defaultsLocale;
	//pickFileDir = choices[1];
	//pickDefault = choices[2];
	
	//remove Host IF() here... path will be passed in as either the MAC or the WIN version
	Try(
		//If(Host is("Windows"),
			If(IsDirectory(savePath),
				Save Text File(savePath||fileName,
					"cvar:pickValue="||Char(pickFileDir)||"; cvar:pickDefault="||Char(pickDefault)||"; cvar:pickMethod="||Char(method)||"; cvar:pickRecurs="||Char(recursive)||"; cvar:pickCompress="||Char(compression)
				);
				,
				//LOCAL version of file
				Create Directory(savePath);
				Save Text File(savePath||fileName,
					"cvar:pickValue="||Char(pickFileDir)||"; cvar:pickDefault="||Char(pickDefault)||"; cvar:pickMethod="||Char(method)||"; cvar:pickRecurs="||Char(recursive)||"; cvar:pickCompress="||Char(compression)
				);
			)
			//,
			//Print("Host is not Windows");
			//Return(0)
		//);
		,
		Print("Something went wrong with variable save");
		Return(0)
	);
	
);

dialogWindow = Function({pickValue, pickMethod, pickRecurs, pickCompress, pickDefault},{default Local},
	If(pickValue == 2,
		If(pickMethod == 1 | Num(Word(1,Jmpversion(),".")) >= 15,enableRecur = 1
			,
			enableRecur = 0
		)
		,
		enableRecur = 0
	);
	nw = New Window( "File Opening",<<modal,
		//Show Menu(0),
		//Show Toolbars(0),
		V List Box(
			H List Box(
				Panel Box("File selection",
					V List Box(
						rb = Radio Box( {"PickFile", "PickDirectory"},
							<<Set(pickValue),
							<<setfunction(
								Function({this},{},
									If( Num(Word(1,Jmpversion(),".")) >= 15,
										If(this << get() == 1,
											cb2 << set(1,0);
											cb2 << enable item(1,0);
											,
											cb2 << enable item(1,1)
										)
										,
										If(this << get() == 1 | rb2 << get() == 2,
											cb2 << set(1,0);
											cb2 << enable item(1,0);
											,
											cb2 << enable item(1,1)
										)
									)
								)
							)
						),
						cb2 = check Box("Directory Recursive?",<<Set(pickRecurs),
							<< enableitem(1,enableRecur)
						)
					)
				),
				Panel Box("Import Method",
					rb2 = Radio Box( {"Concat All", "Concat Similar"},
						<<Set(pickMethod),
						<<setfunction(
							Function({this},{},
								If( Num(Word(1,Jmpversion(),".")) >= 15, Empty()
									,
									If(this << get() == 2 | rb << get() == 1,
										cb2 << set(1,0);
										cb2 << enable item(1,0);
										,
										cb2 << enable item(1,1)
									)
								)
							)
						)
					)
				)
			),
			H List Box( 
				Button Box( "OK",
					pV=rb<<get();
					pD=cb<<get(1);
					pM=rb2<<get();
					recurs=cb2<<get(1);
					pC=cc<<get(1);
				),
				Button Box( "Cancel" ) 
			),
			H List Box(
				cb = check Box({"Set as Defaults"},<<set(1,pickDefault)),
				cc = check box({"Compress Cols"},<<set(1,pickCompress))
			)
		)
    );
    //cb2 << enable
    If(nw["Button"] == -1,
		Return(0);
		,
		Return(pV,pD,pM,recurs,pC)
	);
);


////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////

If(Length(Include File List()) == 1,
	If(checkVersion(minJMPver) == 1,
		Try(
			include( defaultsLocale||defaultsFile);
			cvar:testVar = cvar:pickValue + cvar:pickMethod + cvar:pickRecurs + cvar:pickCompress + cvar:pickDefault;//quick test which will fail if not all variables present
			If(IsMissing(cvar:testVar),
				cvar:pickValue = 1;
				cvar:pickMethod = 1;
				cvar:pickRecurs = 0;
				cvar:pickCompress = 0;
				cvar:pickDefault = 0;
			)
			,
			cvar:pickValue = 1;
			cvar:pickMethod = 1;
			cvar:pickRecurs = 0;
			cvar:pickCompress = 0;
			cvar:pickDefault = 0;
		);
		
		//Try() added to keep code consistent but not fail for the jmp community version
		Try(
			batchUpdateChk(updateIDs);
			trackUsage(u,addinID);
		);

		If(cvar:pickDefault == 0,
			choices = dialogWindow(cvar:pickValue, cvar:pickMethod, cvar:pickRecurs, cvar:pickCompress, cvar:pickDefault);
			//run file save
			If(choices == 0, Stop()
				,
				saveSettings(defaultsLocale,defaultsFile,choices[1],choices[2],choices[3],choices[4],choices[5]);
			);
			//run impoprt
			fileInfo = fileGet(choices[1],choices[4]);
			If(fileInfo == 0 | fileInfo == {"", {}},
				Stop()
				,
				fileImport(fileInfo[1],fileInfo[2],choices[3],choices[4],choices[5]);
			);	
			,
			//no need for file save
			//run import
			fileInfo = fileGet(cvar:pickValue,cvar:pickRecurs);
			If(fileInfo !=0,
				fileImport(fileInfo[1],fileInfo[2],cvar:pickMethod,cvar:pickRecurs,cvar:pickCompress);
				,
				Stop()
			);
		);
		cvar << delete namespace;
		,
		wrongVer(minJMPver);
		cvar << delete namespace;
	)
	,
	print("script was included from another source");
	
);

