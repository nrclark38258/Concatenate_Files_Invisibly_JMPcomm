//////OPS PHBR Calibration jslHamcrest Unit Tests//////
phbrCalUT = New Namespace("PHBRcalUnitTest");
phbrCalUT:saveFile = 0;
phbrCalUT:savePath = "C:\Users\nclark\Box\NRC_Experiments\NRC-00273b_050421_PHBR Cal Tool_swt-T6-0016233-00_v1.0\NRC00273b_PHBR Cal Tool_swt-T6-0016233-00_v1.0x Validation\E-Validation Files/";
phbrCalUT:reportName = "00_swt-T6-0016233-00_v1.0x_UnitTestReport.txt";

phbrCalUT:toolPath = "D:\JSL Development\Official JMP Addin Working\IDEXX SlideCal Tools\CalibCalc_PHBR_swt-T6-0016233-00\PHBRcalibCalculation.jsl";

Match(phbrCalUT:saveFile,
	1, ut global reporter = New Object("ut collecting reporter")
);
//use in setup / teardown or UT Tests

phbrCalUT:saveTable = Function({tableName,savePath,filePrefix,fileSuffix,testingBOOL = 0,journalSave = 0},{default Local},
	If( testingBOOL == 1,
		If(journalSave == 0,
			baseName = tableName << get name;
			fileName = filePrefix || "_" || baseName || "_" || fileSuffix;
			tableName << SaveAs(savePath||fileName);
			tableName << Set Name(baseName);
			,
			baseName = tableName << get window title;
			Substituteinto(baseName,":","");
			fileName = filePrefix || "_" || baseName || "_" || fileSuffix;
			show(savePath,fileName);
			tableName << Save Journal(savePath||fileName||".jrn")
		)
		,
		Return(0)
	);
	Return(1);
);

//High level note that how we test table compare varies between JMP 15 and 16
//Unit tests could be updated to test differently based on version being tested...
phbrCalUT:tableCompare = Function({actual, expected},{default local},
	result = actual << Compare Data Tables(
		Compare with( expected ),
		Compare Table Properties,
		Compare Column Attributes and Properties,
		Compare Data,
		Show Difference Summary,
		Show Difference Plot
	);
	
	r = result << report;
	Return(r)
);

wait(3);		
/////////////////////////////////////////////////////////////
//                                                         //
//          TEST CASES                                     //
//                                                         //
/////////////////////////////////////////////////////////////

varCheckTC = ut test case("A_Variable Checks")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
	));

quickFunctionsTC = ut test case("B_Easy Function Tests")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
	));

startDialogTests = ut test case("C_Starting Dialog")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
	));
	
pointInterpolations = ut test case("D_Point Interpolations")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\PointInterpBase.jmp",invisible);
		table2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\PointInterpBase_1lot.jmp",invisible);
	));

savingCCfile = ut test case("E_Saves Table as CC file")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\TestCoeffsForCC.jmp",invisible)
	));
	
calFilePrep = ut test case("F_Raw data preparation")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
		table1Path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\RealPHBRFile.xlsx"
	));
	
graphics = ut test case("G_Calibration Graphics")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\GraphJournalBase.jmp",invisible);
	));
	
fullMonty = ut test case("H_Whole Script Run through")
	<<Setup(Expr(
		Include(phbrCalUT:toolPath);
		table1Path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\RealPHBRFile.xlsx";
		table2Path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\RealPHBRFile_1lot.xlsx"
	));


/////////////////////////////////////////////////////////////
//                                                         //
//          UNIT TESTS                                     //
//                                                         //
/////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////
		//          Vars and supporting Functions                  //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "A";
phbrCalUT:utGroupTest = 0;

ut test(varCheckTC, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Starting Variables", 
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		uName = Get Environment Variable("username");

		ut assert that(Expr(u), ut equal to(uName));
		ut assert that(Expr(addinID), ut equal to("com.idexx.IDEXXSlideCalTools_PHBR"));
		ut assert that(Expr(updateIDs), ut equal to({"com.idexx.IDEXXSlideCalTools_PHBR"}));
		ut assert that(Expr(minJMPver), ut equal to("15.2"));
		ut assert that(Expr(assayName), ut equal to("PHBR"));

	));

phbrCalUT:utGroup = "B";
phbrCalUT:utGroupTest = 0;

ut test(quickFunctionsTC, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_JMP Version Check", 
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		//function pulls the version being executed on
		ver = JMP Version();
		currWords = words(ver,".");
		backHalf = concatitems(currWords[2::nitems(currWords)],"");
		newNumVer = Num(currWords[1]||"."||backHalf);

		ut assert that(Expr(checkVersion(Char(newNumVer - 0.1))), ut equal to(1));
		ut assert that(Expr(checkVersion(Char(newNumVer - 1))), ut equal to(1));
		ut assert that(Expr(checkVersion(Char(newNumVer))), ut equal to(1));
		ut assert that(Expr(checkVersion(Char(newNumVer + 0.1))), ut equal to(0));
		ut assert that(Expr(checkVersion(Char(newNumVer + 1))), ut equal to(0));
	));

ut test(quickFunctionsTC, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_JMP Version Fail Window",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
				
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				If(current window() << get window title == "Requires JMP 15.2",
					text = (current window() << xpath("//TextBox"));
					If( text[1] << get text == "This addin requires the used of JMP 15.2+",
						(current window() << xpath("//ButtonBox[text()='OK']")) << click;
						Print("Error Dialog Executed Correctly")
						,
						(current window() << xpath("//ButtonBox[text()='OK']")) << click;
						Print("Wrong text version, Error Dialog Executed")
					)
					,
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Wrong title version, Error Dialog Executed")
				)
			)
		);
		//Failures for the above should be controled at the function level as these checks ensure function has the parameter used in both the title and the text box
		closemodal(2);
		wrongVer(15.2);
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Error Dialog Executed Correctly\!""));
		
		closemodal(2);
		wrongVer(17);
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Wrong title version, Error Dialog Executed\!""));
	));

		/////////////////////////////////////////////////////////////
		//          Starting Dialog Box                            //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "C";
phbrCalUT:utGroupTest = 0;

ut test(startDialogTests, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Start Dialog Text Boxes",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			textStrings = {};
			s = Schedule(
				timeout,
				text = (current window() << xpath("//TextBox"));
				For(i=1,i<=nitems(text),i++,
					insertinto(textStrings, text[i]<<get text)
				);
				Insertinto(textStrings,current window() << get window title);
				(current window() << xpath("//ButtonBox[text()='Cancel']")) << click;
			);
		);
		
		closemodal(2);
		phbrCalDialog();
		
		ut assert that(Expr(textStrings[1]), ut equal to(""));
		ut assert that(Expr(textStrings[2]), ut equal to("Enter or navigate to each file and click 'Ok' to continue"));
		ut assert that(Expr(textStrings[3]), ut equal to(""));
		ut assert that(Expr(textStrings[4]), ut equal to("Select Location of PHBR Cal Data .xlsx File"));
		ut assert that(Expr(textStrings[5]), ut equal to("  "));
		ut assert that(Expr(textStrings[6]), ut equal to(""));
		ut assert that(Expr(textStrings[7]), ut equal to("Select where to save the .cc file"));
		ut assert that(Expr(textStrings[8]), ut equal to("  "));
		ut assert that(Expr(textStrings[9]), ut equal to(""));
		ut assert that(Expr(textStrings[10]), ut equal to("Choose the desired build number"));
		ut assert that(Expr(textStrings[11]), ut equal to("  "));
		ut assert that(Expr(textStrings[12]), ut equal to(""));
		ut assert that(Expr(textStrings[13]), ut equal to("Operator inputs"));
	)
);

ut test(startDialogTests, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Returning Start Variables",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx");//must be real file
				ccSaveFolder << Set Text("C:/users/nclark/Desktop/");//must be real dir
				buildNumberText << Set items({"V.10","test"});
				buildNumberText << Set Selected(2);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		ut assert that(Expr(phbrStarts["phbrDataPath"]), ut equal to("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx"));
		ut assert that(Expr(phbrStarts["ccSaveFolder"]), ut equal to("C:/users/nclark/Desktop/"));
		ut assert that(Expr(phbrStarts["buildNumberText"]), ut equal to({"test"}));
		ut assert that(Expr(phbrStarts["Button"]), ut equal to(1));
	)
);

ut test(startDialogTests, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Populate Correct TextEditBoxes",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			textStrings = {};
			s = Schedule(
				timeout,
				phbrDataPath << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx");
				ccSaveFolder << Set Text("C:/users/nclark/Desktop/");
				buildNumberText << Set items({"V.10","test"});
				buildNumberText << Set Selected(2);
				
				text = (current window() << xpath("//TextEditBox"));
				For(i=1,i<=nitems(text),i++,
					insertinto(textStrings, text[i]<<get text)
				);
				list = (current window() << xpath("//ListBoxBox"));
				For(i=1,i<=nitems(list),i++,
					insertinto(textStrings, Char(list[i]<<get items))
				);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		ut assert that(Expr(textStrings[1]), ut equal to("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx"));
		ut assert that(Expr(textStrings[2]), ut equal to("C:/users/nclark/Desktop/"));
		ut assert that(Expr(textStrings[3]), ut equal to("{\!"V.10\!", \!"test\!"}"));
	)
);

ut test(startDialogTests, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Return on Cancel",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			textStrings = {};
			s = Schedule(
				timeout,
				
				(current window() << xpath("//ButtonBox[text()='Cancel']")) << click;
			);
		);
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		ut assert that(Expr(phbrStarts), ut equal to(0));
	)
);

//rewrite to test for all things
ut test(startDialogTests, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Dialog won't close until everything populated",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			textStrings = {};
			s = Schedule(
				timeout,
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
				If(current window() << get window title == "Operator inputs",
					//pff
					phbrDataPath << set text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/notPHBRFile.xlsx");
					ccSaveFolder << set text("abc");
					buildNumberText << Set items({"V.10","test"});
					(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
					If(current window() << get window title == "Operator inputs",
						//fpf
						phbrDataPath << set text("C:/test/file.xls");
						ccSaveFolder << set text("C:/users/nclark/Desktop/");
						buildNumberText << Set items({"V.10","test"});
						(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
						If(current window() << get window title == "Operator inputs",
							phbrDataPath << set text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/notPHBRFile.xlsx");
							ccSaveFolder << set text("C:/users/nclark/Desktop/");
							buildNumberText << Set items({"V.10","test"});
							(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
							If(current window() << get window title == "Operator inputs",
								//pfp
								phbrDataPath << set text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx");
								ccSaveFolder << set text("");
								buildNumberText << Set items({"V.10","test"});
								buildNumberText << set selected(2);
								(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
								If(current window() << get window title == "Operator inputs",
									//ppp
									phbrDataPath << set text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files/RealPHBRFile.xlsx");
									ccSaveFolder << set text("C:/users/nclark/Desktop/");
									buildNumberText << Set items({"V.10","test"});
									buildNumberText << set selected(2);
									(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
									If(current window() << get window title == "Operator inputs",
										Print("Something wrong")
										,
										Print("Dialog Closed Correctly")
									)
									,
									Print("Dialog closed with empty fields5")
								)
								,
								Print("Dialog closed with empty fields4")
							)
							,
							Print("Dialog closed with empty fields2")
						)
						,
						Print("Dialog closed with empty fields1")
					)
					,
					Print("Dialog closed with empty fields")
				)
			);
		);
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Dialog Closed Correctly\!""));
	)
);

		/////////////////////////////////////////////////////////////
		//          Point Interpolations                           //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "D";
phbrCalUT:utGroupTest = 0;

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Quad Fit_Point5_noCoeffs[1,2,3]",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
			
		beforeAR1 = table1:"Final AR"n[8];
		beforeAR2 = table1:"Final AR"n[14];
		
		interp = curvePointInterp(table1,5,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		
		afterAR1 = table1:"Final AR"n[8];
		afterAR2 = table1:"Final AR"n[14];
		
		ut assert that(Expr(Column(table1,ncol(table1)) << get name), ut equal to("CP5_CP1,2,3(quad)"));
		ut assert that(Expr(Column(table1,ncol(table1)) << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						12312,
							0.007570211690004 + -0.000168140009182188 * :Conc1 + 0.0000013594564995476
							 * :Conc1 ^ 2,
						12313,
							0.00748925216422834 + -0.000161734740794318 * :Conc1 + 0.0000012899125333807
							 * :Conc1 ^ 2,
						.
					)
				)
			)
		);
		ut assert that(Expr(interp), ut equal to(1));
		ut assert that(Expr(beforeAR1), ut missing());
		ut assert that(Expr(beforeAR2), ut missing());
		ut assert that(Expr(afterAR1), ut approx(0.00350203951,{relative epsilon(1e-8)}));
		ut assert that(Expr(afterAR2), ut approx(0.00355672046,{relative epsilon(1e-8)}));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Lin Fit_Point7_noCoeffs[1,2,3]",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
			
		beforeAR1 = table1:"Final AR"n[10];
		beforeAR2 = table1:"Final AR"n[16];
		
		interp = curvePointInterp(table1,7,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		
		afterAR1 = table1:"Final AR"n[10];
		afterAR2 = table1:"Final AR"n[16];
		
		ut assert that(Expr(Column(table1,ncol(table1)) << get name), ut equal to("CP7_CP1,2,3(lin)"));
		ut assert that(Expr(Column(table1,ncol(table1)) << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						12312, 0.00677224807887982 + -0.0000728900234448579 * :Conc1,
						12313, 0.00673210895036533 + -0.0000713573359653664 * :Conc1,
						.
					)
				)
			)
		);
		ut assert that(Expr(interp), ut equal to(1));
		ut assert that(Expr(beforeAR1), ut missing());
		ut assert that(Expr(beforeAR2), ut missing());
		ut assert that(Expr(afterAR1), ut approx(0.0066993581,{relative epsilon(1e-8)}));
		ut assert that(Expr(afterAR2), ut approx(0.0066607516,{relative epsilon(1e-8)}));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Cube Fit_Point9_noCoeffs[1,2,4,5,7]",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
			
		curvePointInterp(table1,4,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,5,[2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		curvePointInterp(table1,6,[1,2,4,5],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,7,[1,2,3,4,5,6],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		
		beforeAR1 = table1:"Final AR"n[12];
		beforeAR2 = table1:"Final AR"n[18];
		
		interp = curvePointInterp(table1,9,[1,2,4,5,7],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","cubic");
		
		afterAR1 = table1:"Final AR"n[12];
		afterAR2 = table1:"Final AR"n[18];
		
		ut assert that(Expr(Column(table1,ncol(table1)) << get name), ut equal to("CP9_CP1,2,4,5,7(cub)"));
		ut assert that(Expr(Column(table1,ncol(table1)) << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						12312,
							0.00650641823471588 + -0.0000971297743745881 * :Conc1 +
							-0.000000289663458518 * :Conc1 ^ 2 + 0.0000000124811916479 * :Conc1 ^ 3,
						12313,
							0.00647987781682596 + -0.000094357082364277 * :Conc1 +
							-0.0000002748456368874 * :Conc1 ^ 2 + 0.0000000118427085894 * :Conc1 ^ 3,
						.
					)
				)
			)
		);
		ut assert that(Expr(interp), ut equal to(1));
		ut assert that(Expr(beforeAR1), ut missing());
		ut assert that(Expr(beforeAR2), ut missing());
		ut assert that(Expr(afterAR1), ut approx(0.0042710601,{relative epsilon(1e-8)}));
		ut assert that(Expr(afterAR2), ut approx(0.0043083618,{relative epsilon(1e-8)}));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Cube Fit_Point9_withCoeffs[1,2,4,5,7]",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		curvePointInterp(table1,4,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,5,[2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		curvePointInterp(table1,6,[1,2,4,5],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,7,[1,2,3,4,5,6],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		
		beforeAR1 = table1:"Final AR"n[12];
		beforeAR2 = table1:"Final AR"n[18];
		
		//point 9 not used so doesn't have to be there if AR spots empty before, they'll be empty after
		interp = curvePointInterp(table1,9,[1,2,4,5,7],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","cubic", final = 1);
		afterAR1 = table1:"Final AR"n[12];
		afterAR2 = table1:"Final AR"n[18];
		
		ut assert that(Expr(Column(table1,ncol(table1)) << get name), ut equal to("Final Curve"));
		ut assert that(Expr(Column(table1,ncol(table1)) << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						12312,
							0.00650641823471588 + -0.0000971297743745881 * :Conc1 +
							-0.000000289663458518 * :Conc1 ^ 2 + 0.0000000124811916479 * :Conc1 ^ 3,
						12313,
							0.00647987781682596 + -0.000094357082364277 * :Conc1 +
							-0.0000002748456368874 * :Conc1 ^ 2 + 0.0000000118427085894 * :Conc1 ^ 3,
						.
					)
				)
			)
		);
		ut assert that(Expr(char(interp)), ut contains pattern("DataTable\(.*"));
		ut assert that(Expr(interp), ut n cols(5));
		ut assert that(Expr(interp), ut n rows(2));
		ut assert that(Expr(beforeAR1), ut missing());
		ut assert that(Expr(beforeAR2), ut missing());
		ut assert that(Expr(afterAR1), ut missing());
		ut assert that(Expr(afterAR2), ut missing());
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Cube Fit_nopoint_withCoeffs[1,2,4,5,7]",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		curvePointInterp(table1,4,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,5,[2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		curvePointInterp(table1,6,[1,2,4,5],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic");
		curvePointInterp(table1,7,[1,2,3,4,5,6],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear");
		
		beforeAR1 = table1:"Final AR"n[12];
		beforeAR2 = table1:"Final AR"n[18];
		
		//point 9 not used so doesn't have to be there if AR spots empty before, they'll be empty after
		interp = curvePointInterp(table1,.,[1,2,4,5,7],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","cubic", final = 1);
		afterAR1 = table1:"Final AR"n[12];
		afterAR2 = table1:"Final AR"n[18];
		
		ut assert that(Expr(Column(table1,ncol(table1)) << get name), ut equal to("Final Curve"));
		ut assert that(Expr(Column(table1,ncol(table1)) << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						12312,
							0.00650641823471588 + -0.0000971297743745881 * :Conc1 +
							-0.000000289663458518 * :Conc1 ^ 2 + 0.0000000124811916479 * :Conc1 ^ 3,
						12313,
							0.00647987781682596 + -0.000094357082364277 * :Conc1 +
							-0.0000002748456368874 * :Conc1 ^ 2 + 0.0000000118427085894 * :Conc1 ^ 3,
						.
					)
				)
			)
		);
		ut assert that(Expr(char(interp)), ut contains pattern("DataTable\(.*"));
		ut assert that(Expr(interp), ut n cols(5));
		ut assert that(Expr(interp), ut n rows(2));
		ut assert that(Expr(beforeAR1), ut missing());
		ut assert that(Expr(beforeAR2), ut missing());
		ut assert that(Expr(afterAR1), ut missing());
		ut assert that(Expr(afterAR2), ut missing());
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(pointInterpolations, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Interpolations work only one lot",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table2,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
			
		ut assert that(Expr(curvePointInterp(table2,4,[1,2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic")), ut no throw());
		ut assert that(Expr(curvePointInterp(table2,5,[2,3],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear")), ut no throw());
		ut assert that(Expr(curvePointInterp(table2,6,[1,2,4,5],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","quadratic")), ut no throw());
		ut assert that(Expr(curvePointInterp(table2,7,[1,2,3,4,5,6],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear")), ut no throw());
		ut assert that(Expr(curvePointInterp(table2,8,[1,2,4,5,6,7],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","linear")), ut no throw());
		ut assert that(Expr(curvePointInterp(table2,9,[1,4,5,7,8],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","cubic")), ut no throw());
		//altered the function to not have final = 1 but just '1' as having 'final = 1' was causing issues
		ut assert that(
			Expr(
				coeffs = curvePointInterp(table2,9,[4,5,6,7,8,9],"Final AR","Conc1","CURVEPOINTNUM","CURVENUM","cubic", 1);
				coeffs:"Group"n[1]
			),
			ut all of({ut no throw(), ut equal to(12312)})
		);
		
		phbrCalUT:saveTable(table2,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);
		/////////////////////////////////////////////////////////////
		//          CC file creation                               //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "E";
phbrCalUT:utGroupTest = 0;

ut test(savingCCfile, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Creating CSV and Rename CC",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\";
		fileName = "testCCfilename";
		
		ut assert that(Expr(IsFile(path||fileName||".csv")), ut equal to(0));
		ut assert that(Expr(IsFile(path||fileName||".cc")), ut equal to(0));
		
		createCC(table1,path,fileName);
		
		ut assert that(Expr(IsFile(path||fileName||".csv")), ut equal to(0));
		ut assert that(Expr(IsFile(path||fileName||".cc")), ut equal to(1));
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				path||fileName||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_"||fileName||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(path||fileName||".csv"));
		Try(DeleteFile(path||fileName||".cc"));
		
		ut assert that(Expr(IsFile(path||fileName||".csv")), ut equal to(0));
		ut assert that(Expr(IsFile(path||fileName||".cc")), ut equal to(0));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	)
);

ut test(savingCCfile, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Proper columns, organization, data types",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\";
		fileName = "testCCfilename";
		
		createCC(table1,path,fileName);
		ccFile = Open(path||fileName||".cc",
			Import Settings(
				End Of Line( CRLF, CR, LF ),
				End Of Field( Comma, CSV( 0 ) ),
				Strip Quotes( 1 ),
				Use Apostrophe as Quotation Mark( 0 ),
				Use Regional Settings( 0 ),
				Scan Whole File( 1 ),
				Treat empty columns as numeric( 0 ),
				CompressNumericColumns( 0 ),
				CompressCharacterColumns( 0 ),
				CompressAllowListCheck( 0 ),
				Labels( 1 ),
				Column Names Start( 1 ),
				Data Starts( 2 ),
				Lines To Read( "All" ),
				Year Rule( "20xx" )
			)
		);
		//check col names/order
		ccCols = ccFile << get column names(string);
		Try(
			Summarize(ccFile,chem = By(:"#  chem+"n));
			Summarize(ccFile,numWL = By(:"NUMBEROFWAVELENGTHS"n));
			Summarize(ccFile,spp = By(:"species"n));
			,
			chem = .;
			numWL = .;
			spp = .;
		);
				
		ut assert that(Expr(table1:"chemlot"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(table1:"chemlot"n << get modeling type), ut equal to("Continuous"));
		ut assert that(expr(ccCols), ut equal to(
			{
				"#  chem+",
				"chemlot",
				"NUMBEROFWAVELENGTHS",
				"species",
				"intercept",
				"lin",
				"quad",
				"cubic"
			}
		));
		ut assert that(Expr(chem), ut equal to({"25"}));
		ut assert that(Expr(numWL), ut equal to({"1"}));
		ut assert that(Expr(spp), ut equal to({"999"}));
		ut assert that(Expr(ccFile:"#  chem+"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(ccFile:"NUMBEROFWAVELENGTHS"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(ccFile:"species"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(ccFile:"chemlot"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(ccFile:"#  chem+"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(ccFile:"NUMBEROFWAVELENGTHS"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(ccFile:"species"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(ccFile:"chemlot"n << get modeling type), ut equal to("Continuous"));
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				path||fileName||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_"||fileName||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(path||fileName||".cc"));
		ut assert that(Expr(IsFile(path||fileName||".cc")), ut equal to(0));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		phbrCalUT:saveTable(ccFile,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);

	)
);

ut test(savingCCfile, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Function Returns Coeff Table with correct information",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);

		path = "D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\";
		fileName = "testCCfilename";
		
		coeffTable = createCC(table1,path,fileName);
		
		ccCols = coeffTable << get column names(string);
		
		Try(
			Summarize(coeffTable,chem = By(:"#  chem+"n));
			Summarize(coeffTable,numWL = By(:"NUMBEROFWAVELENGTHS"n));
			Summarize(coeffTable,spp = By(:"species"n));
			,
			chem = .;
			numWL = .;
			spp = .;
		);
				
		ut assert that(Expr(coeffTable:"chemlot"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(coeffTable:"chemlot"n << get modeling type), ut equal to("Continuous"));
		ut assert that(expr(ccCols), ut equal to(
			{
				"#  chem+",
				"chemlot",
				"NUMBEROFWAVELENGTHS",
				"species",
				"intercept",
				"lin",
				"quad",
				"cubic"
			}
		));
		ut assert that(Expr(chem), ut equal to({"25"}));
		ut assert that(Expr(numWL), ut equal to({"1"}));
		ut assert that(Expr(spp), ut equal to({"999"}));
		ut assert that(Expr(coeffTable:"#  chem+"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(coeffTable:"NUMBEROFWAVELENGTHS"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(coeffTable:"species"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(coeffTable:"chemlot"n << get data type), ut equal to("Numeric"));
		ut assert that(Expr(coeffTable:"#  chem+"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(coeffTable:"NUMBEROFWAVELENGTHS"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(coeffTable:"species"n << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(coeffTable:"chemlot"n << get modeling type), ut equal to("Continuous"));
		
		Try(DeleteFile(path||fileName||".cc"));
		ut assert that(Expr(IsFile(path||fileName||".cc")), ut equal to(0));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		phbrCalUT:saveTable(coeffTable,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);

	)
);

		/////////////////////////////////////////////////////////////
		//          Table Cleanup and Prep                         //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "F";
phbrCalUT:utGroupTest = 0;
	
ut test(calFilePrep, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Prep for Calibration",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		table1 = Open(table1Path,
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(//really only need to specific the settings you want, nonlisted gets default treatment
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 1 ),
				Data Starts on Row( 2 ),
				Data Starts on Column( 1 ),
				//Data Ends on Row( 5 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Replicated Spanned Headers( 0 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Suppress Empty Columns( 1 ),
				Treat as Hierarchy( 0 ),
				Multiple Series Stack( 0 ),
				Import Cell Colors( 0 ),
				Limit Column Detect( 0 ),
				Column Separator String( "-" )
			),
			invisible
		);
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);

		outputTable = prepCalTable(table1,"V10.67");
		
		ut assert that(Expr(outputTable << get name), ut equal to("PHBR Calibration Table build V10.67"));
		ut assert that(Expr(table1:"Text177"n[1::24]), ut equal to(
			[25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25]
		));
		ut assert that(Expr(table1:"CHEMABBR"n[1::24]), ut equal to(
			{"PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR",
"PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR",
"PHBR", "PHBR", "PHBR", "PHBR"}
		));
		ut assert that(Expr(table1:"CURVENUM"n[1::24]), ut equal to(
			[4571 4571 4571 4571 4844 4844 5019 5019 5450 5450 5450 5450 5451 5451 5451 5451
7120 7120 7120 7120 7120 7120 7120 7120]
		));
		ut assert that(Expr(table1:"SPECIES"n[1::24]), ut equal to(
			{"All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All",
"All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All"}
		));
		ut assert that(Expr(table1:"Text188"n[1::24]), ut equal to(
			[6487 6487 6024 6024 6488 6488 6489 6489 7109 7109 7010 7010 7110 7110 7011 7011
7381 7381 7381 7381 7381 7381 7381 7381]
		));
		ut assert that(Expr(table1:"Text184"n[1::24]), ut equal to(
			[5058 5058 4595 4595 5059 5059 5060 5060 5680 5680 5581 5581 5681 5681 5582 5582
5952 5952 5952 5952 5952 5952 5952 5952]
		));
		ut assert that(Expr(table1:"Text174"n[1::24]), ut equal to(
			[40981.46319 40981.46319 40814.60833 40814.60833 40981.46528 40981.46528 40981.46667
40981.46667 41073.21181 41073.21181 41060.45278 41060.45278 41073.21389 41073.21389
41061.43542 41061.43542 41150.40208 41150.40208 41150.40208 41150.40208 41150.40208
41150.40208 41150.40208 41150.40208]
		));
		ut assert that(Expr(table1:"BUILD ID"n[1::24]), ut equal to(
			{"V1.60", "V1.60", "V1.50", "V1.50", "V1.60", "V1.60", "V1.60", "V1.60", "V1.65",
"V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.70", "V1.70",
"V1.70", "V1.70", "V1.70", "V1.70", "V1.70", "V1.70"}
		));
		ut assert that(Expr(table1:"Text183"n[1::24]), ut equal to(
			{"V1.60", "V1.60", "V1.50", "V1.50", "V1.60", "V1.60", "V1.60", "V1.60", "V1.65",
"V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.70", "V1.70",
"V1.70", "V1.70", "V1.70", "V1.70", "V1.70", "V1.70"}
		));
		ut assert that(Expr(table1:"Text190"n[1::24]), ut equal to(
			[40981.46319 40981.46319 40814.60833 40814.60833 40981.46528 40981.46528 40981.46667
40981.46667 41073.21181 41073.21181 41060.45278 41060.45278 41073.21389 41073.21389
41061.43542 41061.43542 41150.40208 41150.40208 41150.40208 41150.40208 41150.40208
41150.40208 41150.40208 41150.40208]
		));
		ut assert that(Expr(associative array(outputTable:"BUILD ID"n) << get keys), ut equal to({"", "V10.67"}));
		ut assert that(Expr(outputTable << get as matrix),
			ut equal to(
				[12312 1 64.5 0.00238086 0.00238086,
				12312 2 27.4 0.003983801 0.003983801,
				12312 3 3.5 0.006998375 0.006998375,
				12313 1 64.5 0.00242372 0.00242372,
				12313 2 27.4 0.004026135 0.004026135,
				12313 3 3.5 0.006938982 0.006938982,
				12312 4 34.9 . .,
				12312 5 31.4 . .,
				12312 6 19.8 . .,
				12312 7 4.3 . .,
				12312 8 48 . .,
				12313 4 34.9 . .,
				12313 5 31.4 . .,
				12313 6 19.8 . .,
				12313 7 4.3 . .,
				12313 8 48 . .]
			)
		);
		ut assert that(Expr(outputTable:"AR"n << get as matrix), ut equal to(outputTable:"Final AR"n << get as matrix));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		phbrCalUT:saveTable(outputTable,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		
	)
);

		/////////////////////////////////////////////////////////////
		//          Graph / Journal Creation                       //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "G";
phbrCalUT:utGroupTest = 0;

ut test(graphics, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Live Graph Made With Correct Info",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		calGraphics = calibrationGraphs(table1);
		
		calTxtBox = calGraphics[1] << xpath("//TextEditBox");
				
		ut assert that(Expr(calTxtBox[3] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==12312"));
		ut assert that(Expr(calTxtBox[4] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==12313"));
		ut assert that(Expr(calTxtBox[5] << get text), ut equal to("Final AR = 0.0070558 - 0.0001961*Conc1 + 3.3188e-6*Conc1^2 - 2.155e-8*Conc1^3"));
		ut assert that(Expr(calTxtBox[6] << get text), ut equal to("Final AR = 0.0070011 - 0.0001883*Conc1 + 3.149e-6*Conc1^2 - 2.0448e-8*Conc1^3"));
		ut assert that(Expr(calGraphics[1] << get window title), ut equal to("PHBR Calibration Graph"));
		ut assert that(Expr(report(calGraphics[1])[axisbox(1)] << get max), ut approx(0.0076982125,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calGraphics[1])[axisbox(1)] << get min), ut approx(0.002142774,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calGraphics[1])[axisbox(2)] << get max), ut approx(70.95,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calGraphics[1])[axisbox(2)] << get min), ut approx(0,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calGraphics[1])[outlinebox(1)] << get title), ut equal to("PHBR Lots 12312, 12313 Calibration Curves"));
		ut assert that(Expr(Char(table1 << get selected rows)), ut equal to("[](0, 1)"));
		ut assert that(Expr(Marker Of(RowState(table1,1))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(table1,2))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(table1,3))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(table1,4))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(table1,5))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(table1,6))), ut equal to(2));
		ut assert that(Expr(Color Of(RowState(table1,1))), ut equal to(0));
		ut assert that(Expr(Color Of(RowState(table1,2))), ut equal to(0));
		ut assert that(Expr(Color Of(RowState(table1,3))), ut equal to(0));
		ut assert that(Expr(Color Of(RowState(table1,4))), ut equal to(0));
		ut assert that(Expr(Color Of(RowState(table1,5))), ut equal to(0));
		ut assert that(Expr(Color Of(RowState(table1,6))), ut equal to(0));
		ut assert that(Expr(Excluded(RowState(table1,1))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(table1,2))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(table1,3))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(table1,4))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(table1,5))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(table1,6))), ut equal to(1));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		phbrCalUT:saveTable(calGraphics[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile,1);
	)
);

ut test(graphics, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Journal Made With Correct Info",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"pre",phbrCalUT:saveFile);
		
		//note visual check of journal will also be done in val tests
		calGraphics = calibrationGraphs(table1);
		
		calTxtBox = calGraphics[2] << xpath("//TextEditBox");
				
		ut assert that(Expr(calTxtBox[3] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==12312"));
		ut assert that(Expr(calTxtBox[4] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==12313"));
		ut assert that(Expr(calTxtBox[5] << get text), ut equal to("Final AR = 0.0070558 - 0.0001961*Conc1 + 3.3188e-6*Conc1^2 - 2.155e-8*Conc1^3"));
		ut assert that(Expr(calTxtBox[6] << get text), ut equal to("Final AR = 0.0070011 - 0.0001883*Conc1 + 3.149e-6*Conc1^2 - 2.0448e-8*Conc1^3"));
		ut assert that(Expr(calGraphics[2] << get window title), ut equal to("Journal: PHBR Calibration Report"));
		ut assert that(Expr(calGraphics[2][axisbox(1)] << get max), ut approx(0.0076982125,{relative epsilon(1e-6)}));
		ut assert that(Expr(calGraphics[2][axisbox(1)] << get min), ut approx(0.002142774,{relative epsilon(1e-6)}));
		ut assert that(Expr(calGraphics[2][axisbox(2)] << get max), ut approx(70.95,{relative epsilon(1e-6)}));
		ut assert that(Expr(calGraphics[2][axisbox(2)] << get min), ut approx(0,{relative epsilon(1e-6)}));
		ut assert that(Expr(calGraphics[2][outlinebox(1)] << get title), ut equal to("PHBR Lots 12312, 12313 Calibration Curves"));
		
		phbrCalUT:saveTable(table1,phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		phbrCalUT:saveTable(calGraphics[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile,1);
			
	)
);

		/////////////////////////////////////////////////////////////
		//          Full Monty                                     //
		/////////////////////////////////////////////////////////////
phbrCalUT:utGroup = "H";
phbrCalUT:utGroupTest = 0;

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Opening, Prep Create Cal Table",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				//phbrDataPath << run script;
				//buildNumberText << Set items({"V10.00"});
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		calFiles = phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
		
		ut assert that(Expr(calFiles[1]:"Text177"n[1::24]), ut equal to(
			[25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25]
		));
		ut assert that(Expr(calFiles[1]:"CHEMABBR"n[1::24]), ut equal to(
			{"PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR",
"PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR", "PHBR",
"PHBR", "PHBR", "PHBR", "PHBR"}
		));
		ut assert that(Expr(calFiles[1]:"CURVENUM"n[1::24]), ut equal to(
			[4571 4571 4571 4571 4844 4844 5019 5019 5450 5450 5450 5450 5451 5451 5451 5451
7120 7120 7120 7120 7120 7120 7120 7120]
		));
		ut assert that(Expr(calFiles[1]:"SPECIES"n[1::24]), ut equal to(
			{"All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All",
"All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All", "All"}
		));
		ut assert that(Expr(calFiles[1]:"Text188"n[1::24]), ut equal to(
			[6487 6487 6024 6024 6488 6488 6489 6489 7109 7109 7010 7010 7110 7110 7011 7011
7381 7381 7381 7381 7381 7381 7381 7381]
		));
		ut assert that(Expr(calFiles[1]:"Text184"n[1::24]), ut equal to(
			[5058 5058 4595 4595 5059 5059 5060 5060 5680 5680 5581 5581 5681 5681 5582 5582
5952 5952 5952 5952 5952 5952 5952 5952]
		));
		ut assert that(Expr(calFiles[1]:"Text174"n[1::24]), ut equal to(
			[40981.46319 40981.46319 40814.60833 40814.60833 40981.46528 40981.46528 40981.46667
40981.46667 41073.21181 41073.21181 41060.45278 41060.45278 41073.21389 41073.21389
41061.43542 41061.43542 41150.40208 41150.40208 41150.40208 41150.40208 41150.40208
41150.40208 41150.40208 41150.40208]
		));
		ut assert that(Expr(calFiles[1]:"BUILD ID"n[1::24]), ut equal to(
			{"V1.60", "V1.60", "V1.50", "V1.50", "V1.60", "V1.60", "V1.60", "V1.60", "V1.65",
"V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.70", "V1.70",
"V1.70", "V1.70", "V1.70", "V1.70", "V1.70", "V1.70"}
		));
		ut assert that(Expr(calFiles[1]:"Text183"n[1::24]), ut equal to(
			{"V1.60", "V1.60", "V1.50", "V1.50", "V1.60", "V1.60", "V1.60", "V1.60", "V1.65",
"V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.65", "V1.70", "V1.70",
"V1.70", "V1.70", "V1.70", "V1.70", "V1.70", "V1.70"}
		));
		ut assert that(Expr(calFiles[1]:"Text190"n[1::24]), ut equal to(
			[40981.46319 40981.46319 40814.60833 40814.60833 40981.46528 40981.46528 40981.46667
40981.46667 41073.21181 41073.21181 41060.45278 41060.45278 41073.21389 41073.21389
41061.43542 41061.43542 41150.40208 41150.40208 41150.40208 41150.40208 41150.40208
41150.40208 41150.40208 41150.40208]
		));
		ut assert that(Expr(associative array(calFiles[2]:"BUILD ID"n) << get keys), ut equal to({"", "V10.25"}));
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
		
		phbrCalUT:saveTable(calFiles[1],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);	
		phbrCalUT:saveTable(calFiles[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		
	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Interpolations_multiple lots",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		phbrStarts = phbrCalDialog();		
		
		calFiles = phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
		
		ut assert that(Expr(calFiles[2]:"AR"n[1::9]), ut equal to(calFiles[2]:"Final AR"n[1::9]));
		ut assert that(Expr(Round(calFiles[2]:"Final AR"n << get as matrix,10)),
			ut equal to(Round([0.003310418, 0.004993835, 0.007636132, 0.003062681, 0.004781981, 0.007482047, 0.00286562, 0.004456226, 0.007106123, 0.00427221207498056,
0.00434243950470644, 0.00530018475238654, 0.00710296905013596, 0.0040093608380093, 0.00404471991344579, 0.00411634393142091, 0.00509486077326961,
0.00693704636764887, 0.00377664144616615, 0.00374723161629809, 0.00380295690542354, 0.00474568592243421, 0.00655224761235517, 0.00353865981985341],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP4_CP1,2,3(quad)"n << get as matrix,10)),
			ut equal to(Round([0.00331041799999155, 0.00499383500000662, 0.00763613199999363, 0.00306268100000183, 0.00478198099999234, 0.00748204699999959, 0.00286561999999849,
0.0044562259999912, 0.00710612300000961, 0.00427221207498056, 0.00452932315572894, 0.00559547692685288, 0.00753330491447182, 0.00357557925292814,
0.00404471991344579, 0.0043073887960354, 0.00539672802161471, 0.00737696423365191, 0.00333320113592651, 0.00374723161629809, 0.00399835945952816,
0.00505443869339824, 0.00700219990387439, 0.00308510473797675],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP5_CP2,3(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00102387554504714, 0.00499383500000002, 0.00763613199999999, 0.000725225629314263, 0.00478198100000002, 0.00748204699999999, 0.000474847809054151,
0.00445622599999998, 0.00710612300000002, 0.00392791509861053, 0.00434243950470644, 0.00571629182205291, 0.00755204276333482, 0.00237640946436582,
0.00369275670596148, 0.00411634393142091, 0.00552023302151503, 0.00739611930569251, 0.00210733023352761, 0.0033872402088749, 0.00380295690542354,
0.00518076081398475, 0.00702179189870015, 0.00183127200179285],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP6_CP1,2(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00331041800000005, 0.00499383499999992, 0.0061142715534008, 0.00306268100000007, 0.00478198099999995, 0.00592630030190917, 0.00286562000000009,
0.00445622599999988, 0.00551489007696871, 0.00454184356205246, 0.00471761801014314, 0.00530018475238654, 0.00607861445107383, 0.00388394491348449,
0.00432035510501191, 0.00449987628639615, 0.00509486077326961, 0.00588988314797123, 0.00364843296897377, 0.00402915398329349, 0.00419523754534598,
0.00474568592243421, 0.00548119884009521, 0.0034075269367542],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP7_CP1,2,3,4(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00286373947128743, 0.00544173249528965, 0.00715757451096655, 0.00260605657841619, 0.00523985153006858, 0.00699283379055082, 0.00239858008021263,
0.00492454045171876, 0.00660575094957979, 0.00474955059743703, 0.00501873244660194, 0.00591087800383421, 0.00710296905013596, 0.00374204139056265,
0.00453268701441012, 0.00480769543716619, 0.00571915192401486, 0.00693704636764887, 0.0035033697749517, 0.00424632913478692, 0.00451007798026041,
0.00538421701097256, 0.00655224761235517, 0.00325915488458614],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP8_CP4,5(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00378021876730585, 0.0044527968942743, 0.00490044659632282, 0.00354294250751488, 0.00422889595966817, 0.00468544791424872, 0.00335683616218981,
0.00389052521690819, 0.00424573413131055, 0.00427221207498087, 0.00434243950470609, 0.00457519327179541, 0.00488620046057856, 0.0040093608380093,
0.00404471991344563, 0.00411634393142106, 0.00435372639099678, 0.00467091847060227, 0.00377664144616615, 0.00374723161629765, 0.00380295690542397,
0.00398764643509978, 0.0042344298583735, 0.00353865981985341],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"Final Curve"n << get as matrix,10)),
			ut equal to(Round([0.00446796562175211, 0.00476272367028511, 0.00720246323848193, 0.00424600297742414, 0.00454572366928205, 0.0070387220241195, 0.00407593328586637,
0.00421457969453762, 0.00665268588232423, 0.00422405708501205, 0.00439829624482011, 0.00528685987590568, 0.00710478529701832, 0.00401316771753528,
0.00399549268685654, 0.00417344439550203, 0.00508123920310578, 0.00693890305496696, 0.00378053309166505, 0.00369688152742842, 0.00386135981787284,
0.00473175364883568, 0.00655414664970372, 0.003542640232877],10))
		);
		ut assert that(Expr(calFiles[2]:"Final Curve"n << get formula),
			ut equal to(
				NameExpr(
					Match( :CURVENUM,
						8867,
							0.00771293350993194 + -0.000145908944018303 * :Conc1 + 0.0000010030547635559
							 * :Conc1 ^ 2 + 0.0000000089773703817 * :Conc1 ^ 3,
						8868,
							0.00756038717644372 + -0.000149110051603915 * :Conc1 + 0.0000010253890575715
							 * :Conc1 ^ 2 + 0.0000000091772642105 * :Conc1 ^ 3,
						8869,
							0.00716826680415309 + -0.000147501943774135 * :Conc1 + 0.0000010487779180219
							 * :Conc1 ^ 2 + 0.0000000093865958366 * :Conc1 ^ 3,
						.
					)		
				)			
			)
		);
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
			
		phbrCalUT:saveTable(calFiles[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
	
	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Interpolations_1 lot",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table2Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(1);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		calFiles = phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
		
		ut assert that(Expr(calFiles[2]:"AR"n[1::3]), ut equal to(calFiles[2]:"Final AR"n[1::3]));
		ut assert that(Expr(Round(calFiles[2]:"Final AR"n << get as matrix,10)),
			ut equal to(Round([0.002580866, 0.004247347, 0.007283399, 0.00361162042018146, 0.00373922114225936,
0.00458872855256088, 0.00656183258881569, 0.00313402914612027],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP4_CP1,2,3(quad)"n << get as matrix,10)),
			ut equal to(Round([0.00258086599999392, 0.00424734700003484, 0.00728339899996458, 0.00361162042018146,
0.00388944725448487, 0.00504602976075262, 0.00715689767650963, 0.00286447980974173],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP5_CP2,3(lin)"n << get as matrix,10)),
			ut equal to(Round([-0.000465520330544094, 0.00424734699999996, 0.00728339900000004,
0.00329461101673634, 0.00373922114225936, 0.0052127861297071, 0.00718177382845192,
0.00163049883263588],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP6_CP1,2(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00258086599999991, 0.00424734700000018, 0.00532090214555291, 0.00391045730997317,
0.00406767249865244, 0.00458872855256088, 0.00528496724528336, 0.00332202331805933],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP7_CP1,2,3,4(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00202469115917928, 0.00482083645883893, 0.00662212682708329, 0.00425557797508024,
0.00451936526750096, 0.00539363172238107, 0.00656183258881569, 0.00326825982344839],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"CP8_CP4,5(lin)"n << get as matrix,10)),
			ut equal to(Round([0.00253248288489789, 0.00388505053891913, 0.00475638118396247, 0.00361162042018168,
0.00373922114225916, 0.00416212639257308, 0.00472721530463047, 0.00313402914612027],10))
		);
		ut assert that(Expr(Round(calFiles[2]:"Final Curve"n << get as matrix,10)),
			ut equal to(Round([0.00263019912562042, 0.0039966024242447, 0.00669992687315119, 0.00359151558579882,
0.00376254147181913, 0.00458316538834525, 0.0065625908746231, 0.00313561852955311],10))
		);
		ut assert that(Expr(calFiles[2]:"Final Curve"n << get formula),
			ut equal to(
				NameExpr(
					0.00734772415127853 + -0.000196325219795594 * :Conc1 + 0.000003286194887332 * :Conc1 ^ 2 + -0.000000021338687174 * :Conc1 ^ 3		
				)			
			)
		);
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				phbrStarts["ccSaveFolder"]||"PHBR_V10.68_lot12398_"||date||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_PHBR_V10.68_lot12398_"||date||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.68_lot12398_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.68_lot12398_"||date||".cc")), ut equal to(0));
			
		phbrCalUT:saveTable(calFiles[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);
		
	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_JMP/CC Coeffs Files_multiple lots",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
		
		calFiles = phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
		colNames = calFiles[3] << get column names( string );
		
		ut assert that(Expr(colNames),
			ut equal to({
				"#  chem+",
				"chemlot",
				"NUMBEROFWAVELENGTHS",
				"species",
				"intercept",
				"lin",
				"quad",
				"cubic"
			})
		);
		ut assert that(Expr(calFiles[3] << get name), ut equal to("PHBR_V10.25_lot8867-8868-8869_"||date));
		ut assert that(Expr(Round(calFiles[3][1,0],15)), ut equal to(Round([25 8867 1 999 0.00771293350993194 -0.000145908944018303 0.0000010030547635559 0.0000000089773703817],15)));
		ut assert that(Expr(Round(calFiles[3][2,0],15)), ut equal to(Round([25 8868 1 999 0.00756038717644372 -0.000149110051603915 0.000001025389057571 0.00000000917726421055],15)));
		ut assert that(Expr(Round(calFiles[3][3,0],15)), ut equal to(Round([25 8869 1 999 0.00716826680415309 -0.000147501943774135 0.0000010487779180219 0.0000000093865958366],15)));
		
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(1));
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
		
		phbrCalUT:saveTable(calFiles[3],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile);

	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Code for 'Main' Section_canceled",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Cancel']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		
		//trackUsage(u,addinID);

		If( checkVersion( minJMPver ) == 1,
			
			phbrStarts = phbrCalDialog();
			If(phbrStarts == 0,
				Print("Dialog Canceled or X'd out of")
				,
				phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
			)
			,
			wrongVer( minJMPver );
		);
		
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Dialog Canceled or X'd out of\!""));
		
	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Code for 'Main' Section_OK",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		
		//trackUsage(u,addinID);

		If( checkVersion( minJMPver ) == 1,
			
			phbrStarts = phbrCalDialog();
			If(phbrStarts == 0,
				Print("Dialog Canceled or X'd out of")
				,
				phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
			)
			,
			wrongVer( minJMPver );
		);
		
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut not("\!"Dialog Canceled or X'd out of\!""));
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
		
	)
);

ut test(fullMonty, phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest+1)||"_Proper Graphics created",
	Expr(
		phbrCalUT:utGroupTest = phbrCalUT:utGroupTest + 1;
			
		closemodal = Function({timeout},
			s = Schedule(
				timeout,
				phbrDataPath << Set Text(table1Path,runscript(1));
				ccSaveFolder << Set Text("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_PHBR_swt-T6-0016233-00_UT\Files\");
				buildNumberText << Set Selected(22);
				
				(current window() << xpath("//ButtonBox[text()='Ok']")) << click;
			);
		);
		date = shortdate(today());
		substituteinto(date,"/","");
		
		closemodal(2);
		phbrStarts = phbrCalDialog();
		
		calFiles = phbrCal(phbrStarts["phbrDataPath"],phbrStarts["ccSaveFolder"],phbrStarts["buildNumberText"][1]);
		
		calTxtBox = calFiles[4][1] << xpath("//TextEditBox");
		calTxtBox1 = calFiles[4][2] << xpath("//TextEditBox");
		
		//tests for the table and live graph
		ut assert that(Expr(calTxtBox[3] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8867"));
		ut assert that(Expr(calTxtBox[4] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8868"));
		ut assert that(Expr(calTxtBox[5] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8869"));
		ut assert that(Expr(calTxtBox[6] << get text), ut equal to("Final AR = 0.0077129 - 0.0001459*Conc1 + 1.0031e-6*Conc1^2 + 8.9774e-9*Conc1^3"));
		ut assert that(Expr(calTxtBox[7] << get text), ut equal to("Final AR = 0.0075604 - 0.0001491*Conc1 + 1.0254e-6*Conc1^2 + 9.1773e-9*Conc1^3"));
		ut assert that(Expr(calTxtBox[8] << get text), ut equal to("Final AR = 0.0071683 - 0.0001475*Conc1 + 1.0488e-6*Conc1^2 + 9.3866e-9*Conc1^3"));
		ut assert that(Expr(calFiles[4][1] << get window title), ut equal to("PHBR Calibration Graph"));
		ut assert that(Expr(report(calFiles[4][1])[axisbox(1)] << get max), ut approx(0.0083997452,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calFiles[4][1])[axisbox(1)] << get min), ut approx(0.002579058,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calFiles[4][1])[axisbox(2)] << get max), ut approx(65.362,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calFiles[4][1])[axisbox(2)] << get min), ut approx(0,{relative epsilon(1e-6)}));
		ut assert that(Expr(report(calFiles[4][1])[outlinebox(1)] << get title), ut equal to("PHBR Lots 8867, 8868, 8869 Calibration Curves"));
		ut assert that(Expr(Char(calFiles[2] << get selected rows)), ut equal to("[](0, 1)"));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],1))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],2))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],3))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],4))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],5))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],6))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],7))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],8))), ut equal to(2));
		ut assert that(Expr(Marker Of(RowState(calFiles[2],9))), ut equal to(2));
		ut assert that(Expr(Excluded(RowState(calFiles[2],1))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],2))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],3))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],4))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],5))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],6))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],7))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],8))), ut equal to(1));
		ut assert that(Expr(Excluded(RowState(calFiles[2],9))), ut equal to(1));
		
		//tests for the journal
		ut assert that(Expr(calTxtBox1[3] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8867"));
		ut assert that(Expr(calTxtBox1[4] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8868"));
		ut assert that(Expr(calTxtBox1[5] << get text), ut equal to("Polynomial Fit Degree=3 CURVENUM==8869"));
		ut assert that(Expr(calTxtBox1[6] << get text), ut equal to("Final AR = 0.0077129 - 0.0001459*Conc1 + 1.0031e-6*Conc1^2 + 8.9774e-9*Conc1^3"));
		ut assert that(Expr(calTxtBox1[7] << get text), ut equal to("Final AR = 0.0075604 - 0.0001491*Conc1 + 1.0254e-6*Conc1^2 + 9.1773e-9*Conc1^3"));
		ut assert that(Expr(calTxtBox1[8] << get text), ut equal to("Final AR = 0.0071683 - 0.0001475*Conc1 + 1.0488e-6*Conc1^2 + 9.3866e-9*Conc1^3"));
		ut assert that(Expr(calFiles[4][2] << get window title), ut equal to("Journal: PHBR Calibration Report"));
		ut assert that(Expr(calFiles[4][2][axisbox(1)] << get max), ut approx(0.0083997452,{relative epsilon(1e-6)}));
		ut assert that(Expr(calFiles[4][2][axisbox(1)] << get min), ut approx(0.002579058,{relative epsilon(1e-6)}));
		ut assert that(Expr(calFiles[4][2][axisbox(2)] << get max), ut approx(65.362,{relative epsilon(1e-6)}));
		ut assert that(Expr(calFiles[4][2][axisbox(2)] << get min), ut approx(0,{relative epsilon(1e-6)}));
		ut assert that(Expr(calFiles[4][2][outlinebox(1)] << get title), ut equal to("PHBR Lots 8867, 8868, 8869 Calibration Curves"));
		
		Match(phbrCalUT:saveFile,
			1,
			Copy File(
				phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
				,
				phbrCalUT:savePath||phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest)||"_PHBR_V10.25_lot8867-8868-8869_"||date||".cc"
			);
			,
			0, Empty()
		);
		
		Try(DeleteFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc"));
		ut assert that(Expr(IsFile(phbrStarts["ccSaveFolder"]||"PHBR_V10.25_lot8867-8868-8869_"||date||".cc")), ut equal to(0));
			
		phbrCalUT:saveTable(calFiles[2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile); 
		phbrCalUT:saveTable(calFiles[4][2],phbrCalUT:savePath,phbrCalUT:utGroup||Char(phbrCalUT:utGroupTest),"post",phbrCalUT:saveFile,1);
	)
);

/////////////////////////////////////////////////////////////
//                                                         //
//          Finishing Off                                  //
//                                                         //
/////////////////////////////////////////////////////////////

Match(phbrCalUT:saveFile,
	0, phbrCalUT << delete
	,
	1,
	ut global reporter:save report(phbrCalUT:savePath||phbrCalUT:reportName);
	phbrCalUT << delete;
);