//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092
//nathan-clark@idexx.com

//-----------------Revision History for both script and Help File--
//
//  1.1.0 NClark 102021
//      -> updated report out function to update #diffs to 10x the number of rows in the update table (default max is 500)
//  1.0.1 NClark 092217
//      -> Deletes tables if column match fails
//      -> Added to ccUpdateer function check for col match fail and triggers stop and dialog if fails
//  1.0.0 NClark 091721
//      -> Updated to maintain visibility to all decimals in number so final .cc has intended resolution
//  RC2 NClark 091521
//      -> Fixed naming of cc file to be files[1] and files[2] (latter was files[1])
//      -> now hiding columns in report
//      -> final cc JMP file named just like the final .cc file
//      -> Final ccFile included in report along with main and update file names
//	RC1 NClark 091321
//		-> First Release Candidate
//
//------------------------------------------------------------------

Names Default to here(1);

path = ConvertFilePath("");
include(ConvertFilePath(path||"Utilities\utilities.jsl"));

//////////////////////////////////////////////////
//       Here variable declaration              //
//////////////////////////////////////////////////

    If(HostIs("MAC"),
        u = Get Environment Variable("USER");
        ,
        u = Get Environment Variable("USERNAME");
    );
	addinID = "com.idexx.IDEXXSlideCalTools_ccUpdater";

    updateIDs = {"com.idexx.IDEXXSlideCalTools_ccUpdater"};
    
    minJMPver = "15.2";

//////////////////////////////////////////////////


checkVersion = Function( {minVer},
	{default local},
	currVer = JMP Version();
	currWords = words(currVer,".");
	minWords = words(minVer,".");
	minBackHalf = If(nitems(minWords)==1,"0",concatitems(minWords[2::nitems(minWords)],""));
	backHalf = If(nitems(currWords)==1,"0",concatitems(currWords[2::nitems(currWords)],""));
	newNumVer = Num(currWords[1]||"."||backHalf);
	newMinVer = Num(minWords[1]||"."||minBackHalf);
	
	If(newNumVer >= newMinVer, Return(1),Return(0));
);

wrongVer = Function( {maxVer},
	{Default Local},
	New Window( "Requires JMP " || Char( maxVer ),
		<<Modal,
		Text Box( "This addin requires the used of JMP " || Char( maxVer ) || "+" ),
		Button Box( "OK" )
	)
);

colMatchFail = Function( {},
	{Default Local},
	New Window( "Fail: Column Matching",
		<<Modal,
		Text Box( "The two tables did not have matching columns." ),
        Text Box( "Please verify they are correct and try again." ),
		Button Box( "OK" )
	)
);

ccUpdaterDialog = Function({},{default local},
	nw = New Window("Operator inputs",
        //show Menu(0),
        //show toolbars(0),
        << modal,
        << on validate(
            Right(calCurveMain << get text,3) == ".cc" & 
			IsFile(calCurveMain << get text) & 
			Is Directory Writable(calCCsave << get text) &
			(Right(calCCsave << get text,1) == "/" | Right(calCCsave << get text,1) == "\") &
			Right(calCurveUpdate << get text,3) == ".cc" & 
			IsFile(calCurveUpdate << get text)
        ),
        << return result,
        tb = Tab Box(
            Tab Page Box("calCurves",
                V List Box(
                    TextBox("",<<set font size(10)),
                    TextBox("Enter or navigate to each file and click 'Ok' to continue", << set font style("Bold"), << set font size(10)),
                    TextBox("",<<set font size(5)),
                    TextBox("Main calCurve .cc File",<<set font size(10)),
                    H List Box(
                        calCurveMain = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                mainFile = Pick File(
                                    ,
                                    ,
                                    {"All Files|cc"},
                                    1,
                                    0,
                                    ,
                                    //Multiple
                                );
                                calCurveMain << set text(mainFile)
                            );
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    TextBox(".cc File with updated information",<<set font size(10)),
                    H List Box(
                        calCurveUpdate = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                updateFiles = Pick File(
                                    ,
                                    ,
                                    {"All Files|cc"},
                                    1,
                                    0,
                                    ,
                                    //Multiple
                                );
                                calCurveUpdate << set text(updateFiles)
                                //calCurveUpdate << set text(ConcatItems(updateFiles,", \!N"));
                            )
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    TextBox("Where to save the new .cc file",<<set font size(10)),
                    H List Box(
                        calCCsave = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                dir = Pick Directory();
                                calCCsave << set text(dir);
                            )
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    /*TextBox("Input the desired build number",<<set font size(10)),
                    H List Box(
                        buildNumberText = TextEditBox("", << set width(300)),
                        TextBox("  "), 
                    ),
                    TextBox("",<<set font size(5)),
                    H List Box(
                        ButtonBox("Ok"),
                        ButtonBox("Cancel")
                    )*/
                )
            ),
            /*Tab Page Box("nonCubicCurves",
                V List Box(
                    TextBox("",<<set font size(10)),
                    TextBox("Enter or navigate to each file and click 'Ok' to continue", << set font style("Bold"), << set font size(10)),
                    TextBox("",<<set font size(5)),
                    TextBox("Main nonCubicCurve .cc File",<<set font size(10)),
                    H List Box(
                        nonCubMain = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                file = Pick File(
                                    ,
                                    ,
                                    {"All Files|cc"},
                                    1,
                                    0,
                                    ,
                                    //Multiple
                                );
                                nonCubMain << set text(file)
                            );
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    TextBox(".cc File(s) with updated information",<<set font size(10)),
                    H List Box(
                        nonCubUpdate = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                updateFiles = Pick File(
                                    ,
                                    ,
                                    {"All Files|cc"},
                                    1,
                                    0,
                                    ,
                                    Multiple
                                );
                                nonCubUpdate << set text(ConcatItems(updateFiles,", \!N"));
                            )
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    TextBox("Where to save the new .cc file",<<set font size(10)),
                    H List Box(
                        nonCubCCsave = TextEditBox("", << set width(300)),
                        TextBox("  "),
                        buttonbox("",
                            << Set Icon( "WinFileOpen" ),
                            << set script(
                                dir = Pick Directory();
                                nonCubCCsave << set text(dir);
                            )
                        ); 
                    ),
                    TextBox("",<<set font size(2)),
                    TextBox("Choose current expiration date",<<set font size(10)),
                    H List Box(
                        dateBox=numbereditbox(3692304000,9,<<setformat(Format( "m/d/y", 20 ))),
                        TextBox("  "), 
                    ),
                    TextBox("",<<set font size(5)),
                    /*H List Box(
                        ButtonBox("Ok"),
                        ButtonBox("Cancel")
                    )*/
                )
            )*/
        ),
        H List Box(
            ButtonBox("Ok"),
            ButtonBox("Cancel")
        )
    );

	If(nw["Button"] == -1, Return(0), Return(nw));
);

saveNewCC = Function({tableName,path,fileName,chem90str=""},{default local},

    Try(
        tableName << Delete Columns("Match Flag");
    );

	tableName << Save(path||fileName||".csv");
    SaveTextFile(path||fileName||".csv",chem90str,mode("append"));
	Rename File(path||fileName||".csv", fileName||".cc");
	Return(tableName)
);

ccFileOpen = Function({mainPath,updatePath},{default local},

    fileList = EvalList(List(mainPath,updatePath));
    tableList = {};
    For(i=1,i<=nitems(fileList),i++,
        tableList[i] = Open(fileList[i],
            Import Settings(
                End Of Line( CRLF, CR, LF ),
                End Of Field( Comma, CSV( 0 ) ),
                Strip Quotes( 1 ),
                Use Apostrophe as Quotation Mark( 0 ),
                Use Regional Settings( 0 ),
                Scan Whole File( 1 ),
                Treat empty columns as numeric( 0 ),
                CompressNumericColumns( 0 ),
                CompressCharacterColumns( 0 ),
                CompressAllowListCheck( 0 ),
                Labels( 1 ),
                Column Names Start( 1 ),
                Data Starts( 2 ),
                Lines To Read( "All" ),
                Year Rule( "20xx" )
            )
        );
    );
    //hardcode check to only look at main columns (not extras if chem90 is present)
    //will not be the same for noncubic table
    If( (tableList[1] << get column names(string))[1::8] == (tableList[2] << get column names(string))[1::8],
        Return(tableList)
        ,
        For(i=1,i<=nitems(tableList),i++,
            tableList[i] << close window;
        );
        Return(0)
    )

);

joinCCfiles = Function({mainTable,updateTable},{default local},

    mainTable << selectwhere(:"#  chem+"n == 90);
    wrsDataFile = mainTable << Subset(
        Selected Rows( 1 ),
        Selected columns only( 0 ),
        private
    );
    string1="";
    Try(
        For(j=1,j<=nrow(wrsDataFile),j++,
            For(i=1,i<=ncol(wrsDataFile),i++,
                string1 = string1 || Char(wrsDataFile[j,i]) || ",";
            );
            removefrom(string1,length(string1));
            string1 = string1 ||"\!n";
        );
        wrsDataFile << close window;
    );
    mainTable << delete rows;
    For(i=ncol(mainTable),i>=1,i--,
        colName = Column(mainTable,i) << get name;
        If(Contains(colName,"Column") > 0,
            mainTable << delete columns(colName)
            ,
            mainTable:colName << set data type("Numeric");
            mainTable:colName << set modeling type("Continuous");
        )
    );
    For(i=1,i<=ncol(mainTable),i++,
        column(mainTable,i) << Format("Best",64)
    );
    For(i=1,i<=ncol(updateTable),i++,
        column(updateTable,i) << Format("Best",64)
    );
    finalTable = mainTable << Join(
        With( updateTable ),
        Merge Same Name Columns,
        By Matching Columns(
            :Name( "#  chem+" ) = :Name( "#  chem+" ),
            :"chemlot"n = :"chemlot"n,
            :"NUMBEROFWAVELENGTHS"n = :"NUMBEROFWAVELENGTHS"n,
            :"species"n = :"species"n
        ),
        Drop multiples( 0, 0 ),
        Include Nonmatches( 1, 1 ),
        Preserve main table order( 1 )
    );
    For(i=1,i<=ncol(finalTable),i++,
        column(finalTable,i) << Format("Best",64)
    );
    
    date = Substitute(shortdate(today()),"/","");
    origMainFile = Substitute((mainTable<<getname),".cc","");
    origUpdateFile = Substitute((updateTable<<getname),".cc","");

    mainTable << set name((mainTable << get name) || "_cleaned");
    	
    finalTable << set name(date||"_"||origMainFile||"_with_"||origUpdateFile||"_ccUpdate");

    Return(mainTable,updateTable,finalTable,string1)

);

get_cell_color = Function( {table, col, r},{default local},

	col = Column(table, col);
	s = col << get script;

     //Locate argument "Color Cells" in column script
	p=0;
	For( i = 1, i <= N Arg( s ), i++,
		If( Head Name( Arg( s, i ) ) == "Color Cells",
			p = i;
			Break();
		)
	);

     //Identify the sublist that contains the color of row r

	L = Arg( Arg( s, p ), 1 );

	If(IsEmpty(L),
		color = -1
		,
		!IsList(L[1]),
			For( i = 1, i<=N Items( L[2] ), i++,
				If( L[2][i] == r | L[2][i] == 0,
					color = L[1];
					Break();
				);
				color = -1
			);
		,
		For( i = 1, i<=N Items( L ), i++,
			If( N Row( Loc( L[i][2], r ) ) == 1,
				color = L[i][1];
				Break();
			);
			color = -1
		);
	);
	
	Return(color);

);

ccReportOutput = Function({mainTable,updateTable,finalTable},{default local},

    numDiffs = nrow(updateTable)*10;
    rpt = mainTable << Compare Data Tables(
        Compare with( finalTable ),
        Compare Table Properties,
        Compare Column Attributes and Properties,
        Compare Data,
        Show Difference Summary,
        Show Difference Plot
    );
    Eval(
        EvalExpr(
            rpt << limit(Expr(numDiffs))	
        )
    );
    table = rpt << save difference summary;
    rpt << close window;

    addedItemRowList = {};
    addedRows = table << get rows where(:action == "add");
    For(i=1,i<=nitems(addedRows),i++,
        For(j=1,j<=table:"N"n[addedRows[i]],j++,
            insertinto(addedItemRowList,table[addedRows[i],4] + j-1);
        );
    );
    replaceItemRowList = {};
    oldItemRowList = {};
    replaceRows = table << get rows where(:action == "replace");
    For(i=1,i<=nitems(replaceRows),i++,
        For(j=1,j<=table:"N"n[replaceRows[i]],j++,
            
            insertinto(oldItemRowList,table[replaceRows[i],3] + j-1);
            insertinto(replaceItemRowList,table[replaceRows[i],4] + j-1);
        );
    );
    deleteItemRowList = {};
    deleteRows = table << get rows where(:action == "delete");
    For(i=1,i<=nitems(deleteRows),i++,
        For(j=1,j<=table:"N"n[deleteRows[i]],j++,
            insertinto(deleteItemRowList,table[deleteRows[i],3] + j-1);
        );
    );
    table << close window;
    totalChanges = nitems(addedItemRowList) + nitems(replaceItemRowList) + nitems(deleteItemRowList);

    reportTable = New Table( "CC Update Report",
        Add Rows( totalChanges ),
        New Column( "Status", Character(15), "Nominal",<< set display width(100) ),
        New Column( "#  chem+", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "chemlot", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "NUMBEROFWAVELENGTHS", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "species", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "intercept", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "lin", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "quad", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "cubic", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "Original -->", Character, "Nominal" ),
        New Column( "#  chem+ 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "chemlot 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "NUMBEROFWAVELENGTHS 2",
            Numeric,
            "Continuous",
            Format( "Best", 12 )
        ),
        New Column( "species 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "intercept 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "lin 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "quad 2", Numeric, "Continuous", Format( "Best", 12 ) ),
        New Column( "cubic 2", Numeric, "Continuous", Format( "Best", 12 ) )
    );
    nextRow = 1;
    For(i=1,i<=nitems(addedItemRowList),i++,
        reportTable[i,1] = "Added";
        Column(reportTable,1) << Color Cells("Yellow",i);
        finalTableList = AsList(Transpose(finalTable[addedItemRowList[i],0]));
        RemoveFrom(finalTableList,1);
        reportTable[i,2::9] = finalTableList;
        nextRow = nextRow + 1;
    );
    For(j=1,j<=nitems(oldItemRowList),j++,
        reportTable[nextRow,1] = "Modified";
        Column(reportTable,1) << Color Cells("Light Blue",nextRow);
        reportTable[nextRow,11::18] = mainTable[oldItemRowList[j],0];
        finalTableList = AsList(Transpose(finalTable[replaceItemRowList[j],0]));
        RemoveFrom(finalTableList,1);
        reportTable[nextRow,2::9] = finalTableList;
        nextRow = nextRow + 1;
    );
    For(i=1,i<=nitems(deleteItemRowList),i++,
        reportTable[nextRow,1] = "Removed";
        Column(reportTable,1) << Color Cells("Red",nextRow);
        reportTable[nextRow,11::18] = mainTable[deleteItemRowList[i],0];
        nextRow = nextRow + 1;
    );

    reportTable << New Column("Main File",Character, << set display width(1),
        << set each value(mainTable << get name)
    );
    reportTable << New Column("Update File",Character, << set display width(1),
        << set each value(updateTable << get name)
    );
    reportTable << New Column("Final ccFile",Character, << set display width(1),
        << set each value(finalTable << get name)
    );
    reportTable << New Column("Chem Type",Character,
        Formula(
            assayCodes = Associative Array(
                {{0, "GLU"}, {1, "BUN"}, {3, "CA"}, {4, "SDMA"}, {5, "URIC"}, {6, "TP"}, {7,
                "TRIG"}, {8, "CHOL"}, {9, "ALB"}, {10, "NH3"}, {12, "PHOS"}, {14, "TBIL"}, {15,
                "CREA"}, {16, "FRU"}, {17, "CRP"}, {18, "SDMA"}, {20, "BA"}, {21, "BA"}, {23,
                "PROG"}, {25, "PHBR"}, {28, "TT4"}, {30, "TT4"}, {32, "MG"}, {35, "LAC"}, {40,
                "CL"}, {41, "K"}, {42, "NA"}, {54, "UPRO"}, {56, "ALTV"}, {57, "TCO2"}, {59,
                "LIPA"}, {60, "AMYL"}, {62, "ALT"}, {63, "LDH"}, {64, "CK"}, {65, "ALKP"}, {67,
                "GGT"}, {70, "UCRE"}, {73, "AST"}, {90, "WRS"}, {., "No Assay Code"}}
            );
            assayCode = If( !Is Missing( :Name( "#  chem+" ) ),
                :Name( "#  chem+" ),
                :Name( "#  chem+ 2" )
            );
            Try(assayCodes[assayCode], "No Assay Code")
        )
    );
    reportTable:"Chem Type"n << delete formula;
    reportTable << Move Selected Columns(
        {
            "Main File",
            "Update File",
            "Final ccFile"
        },
        To First
    );
    reportTable << Move Selected Columns(
        {
            "Chem Type"
        },
        After("Status")
    );

    reportTable:"NUMBEROFWAVELENGTHS"n << hide;
    reportTable:"species"n << hide;
    reportTable:"intercept"n << hide;
    reportTable:"lin"n << hide;
    reportTable:"quad"n << hide;
    reportTable:"cubic"n << hide;

    reportTable:"NUMBEROFWAVELENGTHS 2"n << hide;
    reportTable:"species 2"n << hide;
    reportTable:"intercept 2"n << hide;
    reportTable:"lin 2"n << hide;
    reportTable:"quad 2"n << hide;
    reportTable:"cubic 2"n << hide;
    
    Return(reportTable)
);

ccUpdater = Function({mainPath,updatePath,saveFolder},{default local},

    files = ccFileOpen(mainPath,updatePath);
    If(files == 0,
        colMatchFail();
        Return(0)
        ,
        joinOutput = joinCCfiles(files[1],files[2]);

        reportTable = ccReportOutput(joinOutput[1],joinOutput[2],joinOutput[3]);

        ccFileName = joinOutput[3] << get name; 
        saveNewCC(joinOutput[3],saveFolder,ccFileName,joinOutput[4]);

        Return(joinOutput[1],joinOutput[2],joinOutput[3],reportTable)
    );
);

//////////////////////////////////////////////////
//                                              //
//               Main                           //
//                                              //
//////////////////////////////////////////////////

If( Length( Include File List() ) == 1,
	//batchUpdateChk(updateIDs);
	trackUsage(u,addinID);

    If( checkVersion( minJMPver ) == 1,
			
		ccStarts = ccUpdaterDialog();
		If(ccStarts == 0,
			Stop()
			,
			ccUpdater(ccStarts["calCurveMain"],ccStarts["calCurveUpdate"],ccStarts["calCCsave"]);
		)
		,
		wrongVer( minJMPver );
	)
    ,
	Print( "CC Updater script was included from another source" );

);