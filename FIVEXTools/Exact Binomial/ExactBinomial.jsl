// Launch window for Exact Binomial FIVEX Tool

//Author:
//Nathan Clark
//IDEXX Laborabories, Inc.
//Westbrook, ME
//nathan-clark@idexx.com

//------------------Revision History for both script and Help File--
//
//	1.6 NClark 052620
//		-> Updated for back update checking
//	1.5 NClark 051210
//		-> added include adn variables to allow for usage tracking
//	1.4 NClark 092915
//		-> Updated all references to (com.idexx.nclark.exactBinom) to (com.idexx.nclark.exactBinom)
//	1.3 NClark 081414
//		-> Fixed bug in sample graph that incorrectly drew lines when Defects=0
//	1.2 NClark 051314
//		-> Updated buttons for Sample data (Summarized and Individual Row tables) to open correctly
//		-> Fixed bugs that would error script if data contained all of one kind of data (no Pass or no Fail)
// 1.1 NClark 121213 - Included buttons for Sample data
// 1.0 NClark 091113 - First Official Version. Closed intermediate table prior to graph-making
// B2 NClark 112612 - Now deletes calculation columns if they exist to recalc with new options
//						Moved 'Proportion' Column formula to exactBinomEqn instead of each data SUB
// B1 NClark 112612 - First Beta released(B1)
//------------------------------------------------------------------

//------------------SUB Routine List--------------------------------
//		recallItemsEB
//		runOKeb
//		exactBinomEqn
//		dataSummary
//		dataByRows
//		sampleGraph
//		exactBinomGraph
//		exactBinomDlg
//------------------------------------------------------------------

//------------------Variable List by SUB Routine--------------------
//--> .. Global Namespace Variable (noted by '::' in script)
//--> . Here Namespace Variable (default namespace in scrit)
//--> Variables listed in SUB Routine where first populated but may appear in other SUBs and not listed here
//----No Routine-----
//		.orig, .nc, .lbWidth
//		.notImplemented
//		.Help
//		.About
//		.exprCancelEB
//		..globalListEB
//			..ba1ListEB, ..ba2ListEB, ..ba3ListEB
//		..globalVarEB
//			..ba1VarEB
//		..globalVar1EB
//			..ba2VarEB, ..ba3VarEB
//		..lbListEB
//			(..colListYeb, ..colListLeb, ..colListBeb)
//		..lbVarEB
//			(..dataOrg)
//		.lbVar1EB
//			(comboset, newAlpha)
//----recallItemsEB-----
//		.colList, .nextList, .lb
//----------------------
//----runOKeb-----------
//		.glVar, .lb
//		.alpha, .comboSet
//		.glVar1
//		.glVar2
//----------------------
//----exactBinomEqn-----
//		.pctCI, .colCI, .colCIname, .colName
//----------------------
//----dataSummary-------
//		.sampCol, .defectCol
//		.sampVar, .defectVar
//		.dtReady
//----------------------
//----dataByRows--------
//		.valOrder
//		.sumOrig
//		.passFailMtrx
//		.passFailPresence
//		.splitSumOrig
//		.order
//		.dtReady
//		.sampCol, .defectCol
//		.sampVar, .defectVar
//----------------------
//----sampleGraph-------
//		.alpha
//		.Samples1, .Defects1
//		.Samples2, .Defects2
//		.x1, .x2, .a1
//		.nw, .gb
//		.gb1, .gb2, .gb3, .gb4, .gb5
//		.B1, .B2
//----------------------
//----exactBinomGraph---
//		.varList, .xExpr
//		.varExpr
//		.exactBinomGB
//----------------------
//----exactBinomDlg-----
//		.colListData
//		..colListYeb - 1st box to drag columns to
//		..colListLeb - 2nd box to drag columns to
//		..colListBeb - 3rd box to drag columns to
//		..dataOrg - Choice b/n summary or row data
//		..comboObj - Drop down alpha choice
//		..textObj - manual input alpha
//		.newAlpha - override based on textObj
//----------------------
//------------------/Variable List by SUB Routine-------------------

include("$ADDIN_HOME(com.idexx.nclark.updateFX)\FIVEXutils\utilities.jsl");
If(HostIs("Mac"),
	u = Get Environment Variable("USER");
	,
	u = Get Environment Variable("username");
);
addinID = "com.idexx.nclark.exactBinom";
trackUsage(u,addinID);
batchUpdateChk(EvalList(List(addinID)));

//clearglobals();
orig = currentDataTable();
If(IsEmpty(orig),orig=open());
nc = ncol(orig);
lbWidth = 130;
notImplemented = expr(New Window("Feature Not Available",<<Modal,TextBox("This feature has not been implemented yet."),ButtonBox("OK")));
Help = expr(Open( "$ADDIN_HOME(com.idexx.nclark.exactBinom)\ExactBinomial_Help.pdf" ));
IndRow = expr(Open( "$ADDIN_HOME(com.idexx.nclark.exactBinom)\ExactBinomSample-Individual Row.jmp" ));
Summarized = expr(Open( "$ADDIN_HOME(com.idexx.nclark.exactBinom)\ExactBinomSample-Summarized.jmp" ));
About = Expr(Dialog(
	VList("Exact Binomial v1.5",
		"",
		"Nathan Clark",
		"IDEXX Laboratories, Inc.",
		"Westbrook, ME 04092",
		"nathan-clark@idexx.com"
	)
));

exprCancelEB = Expr(exactBinomDlg << Close Window);

::globalListEB = {::ba1ListEB,::ba2ListEB,::ba3ListEB};
::globalVarEB = {::ba1VarEB};
::globalVar1EB = {::ba2VarEB,::ba3VarEB};

::lbListEB = Expr({::colListYeb,::colListLeb,::colListBeb });
::lbVarEB = Expr({::dataOrg});
lbVar1EB = Expr({comboSet,newAlpha});

//--------------------------SUB recallItemsEB--------------------------------------
::recallItemsEB =
Expr(
//Is List will produce error if ba1List is not declared
//If error, declare vars, otherwise get vars
	colList = orig << Get Column Names(String);
	Try(
		For(i=1,i<=N Items(::globalListEB),i++,
			nextList = ::globalListEB[i];
			For(j=1,j<=N Items(nextList),j++,
				If(N Row(Loc(colList,nextList[j])) > 0,
					Eval(
						Substitute(
							Expr(lb << Append(item)),
							Expr(lb),::lbListEB[i],
							Expr(item),nextList[j]
						)
					)
				)
			)
		),
		Print("No columns to recall.")
	);
	Try(
		::dataOrg<<set(Num(::ba1VarEB))
	);
	Try(
		::comboObj<<set(Num(::ba2VarEB))
	);
	Try(
		::textObj<<settext(::ba3VarEB);
		newAlpha=::ba3VarEB
	);
);
//--------------------------/SUB recallItemsEB-------------------------------------

//--------------------------SUB runOKeb----------------------------------------------
runOKeb =
Expr(
//Populate global variables for Recall
	For(i=1,i<=N Items(::globalListEB),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar);
					glVar = lb << Get Items;
					Lock Globals(glVar);
				),
				Expr(lb),::lbListEB[i],
				Expr(glVar),Name Expr(::globalListEB[i])
			)
		);
	);
	newAlpha = ::textObj<<get text;
	If( Is Missing( Num(newAlpha) ) == 0,
		alpha = Num( newAlpha );
		comboSet = Char(::comboObj<<get),
		newAlpha="";
		comboSet = Char(::comboObj<<get);
		Match( comboSet,
			"1", alpha = 0.10,
			"2", alpha = 0.05,
			"3", alpha = 0.01
		)
	);
	For(i=1,i<=N Items(::globalVarEB),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar1);
					glVar1 = lb << Get;
					Lock Globals(glVar1);
				),
				Expr(lb),::lbVarEB[i],
				Expr(glVar1),Name Expr(::globalVarEB[i])
			)
		);
	);
	For(i=1,i<=N Items(::globalVar1EB),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar2);
					glVar2 = lb;
					Lock Globals(glVar2);
				),
				Expr(lb),lbVar1EB[i],
				Expr(glVar2),Name Expr(::globalVar1EB[i])
			)
		);
	);

//Checks for proper columns
	If(Nitems(::colListYeb<<get items) < 1 & (::dataorg<<Get) == 1,
		Dialog("Sample Size column necessary to use Summary table");throw()
	);
	If(Nitems(::colListLeb<<get items) < 1,
		Dialog("Defects column required");throw()
	);
	
//Data analysis determined by how table is organized
	Match((::dataOrg<<Get),
		1, Eval(dataSummary),
		2, Eval(dataByRows)
	);
	
	Eval(exprCancelEB);
);
//--------------------------/SUB runOK---------------------------------------------
//--------------------------SUB exactBinomEqn--------------------------------------
exactBinomEqn=
Expr(
	pctCI = (1-alpha)*100;
	colCI = Char(pctCI)||"%CI (NAL)";
	colCIname = Parse( Eval Insert( ":name( \!"^colCI^\!" )" ) );
	
	For(i=ncol(dtready),i>=1, i--,
		colName=Column(i)<<getname;
		If(Contains(colName,"%CI")!=0|
			Contains(colName,"(NAL)")!=0|
			Contains(colName,"(EBL)")!=0|
			colName == "Proportion",
			dtready<<delete columns(Column(i))	
		)
	);
	
	dtready << New column("Proportion",Numeric,Continuous,
		Formula(
			If(IsMissing(defectVar),0,
				defectVar / sampVar
			)
		)
	);
	dtReady << New Column( colCI,Numeric,Continuous,
		Formula(
			If( IsMissing(defectVar)|defectVar==0,
				1 - (alpha / 2) ^ (1 / sampVar),
				-1 * Normal Quantile( alpha / 2 ) * Root(
					:Proportion * ((1 - :Proportion) / sampVar)
				)
			)
		)
	);
	dtReady << New column("UCL (NAL)", Numeric, continuous,
		Formula(
			:Proportion + colCIname
		)
	);
	dtReady << New column("LCL (NAL)", Numeric, continuous,
		Formula(
			:Proportion - colCIname
		)
	);
	dtReady << New column("UCL (EBL)", Numeric, continuous,
		Formula(
			If(IsMissing(defectVar),
				Beta Quantile( 1 - alpha / 2, 0 + 1, sampVar - 0 ),
				If(sampVar == defectVar,
					1,
					Beta Quantile( 1 - alpha / 2, defectVar + 1, sampVar - defectVar ),
				)
			)
		)
	);
	dtReady << New column("LCL (EBL)", Numeric, continuous,
		Formula(
			If(IsMissing(defectVar)|defectVar==0,
				0,
				Beta Quantile( alpha / 2, defectVar, sampVar - defectVar + 1 )
			)
		)
	);
	//dtReady << New column("Date Script Last Ran",
	//	Numeric,
	//	Continuous,
	//	Format("m/d/y h:m:s"),
	//	Formula(Today())
	//);
);
//--------------------------/SUB exactBinomEqn-------------------------------------
//--------------------------SUB dataSummary----------------------------------------
//analysis for data in summarized format
dataSummary =
expr(
	//New Window("Feature Coming Soon",<<Modal,TextBox("Summary analysis currently unavailable"),ButtonBox("OK"))
	sampCol = ::ba1ListEB[1];
	defectCol = ::ba2ListEB[1];
	sampVar = Parse( Eval Insert( ":name( \!"^sampCol^\!" )" ) );
	defectVar = Parse( Eval Insert( ":name( \!"^defectCol^\!" )" ) );
	
	//orig<<New Column("Proportion",Numeric,Continuous,
	//	Formula(defectVar / sampVar)
	//);
	show(alpha);
	dtReady = orig;
	Eval(exactBinomEqn);
	Eval(exactBinomGraph)
);
//--------------------------/SUB dataSummary---------------------------------------

//--------------------------SUB dataByRows-----------------------------------------
//analysis for data in individual row format
dataByRows =
expr(
	//New Window("Feature Not Available",<<Modal,TextBox("Analysis currently unavailable for Individual Row data"),ButtonBox("OK"));
	valOrder = {};
	For(i=1, i<=nitems(::ba3ListEB),i++,
		valOrder[i] = Column(orig,::ba3ListEB[i])<<Get Property(Value Ordering);
	);
	
	sumOrig = orig << Summary(
		Group( ::colListBeb<<getitems, ::colListLeb<<getitems ),
		Link to original data table( 0 )
	);
	passFailMtrx = Column(sumOrig,(::colListLeb<<getitems)[1])<<getasmatrix;
	If(Contains(passFailMtrx,"Fail")==0, passFailPresence = "NoFail",
		Contains(passFailMtrx,"Pass")==0, passFailPresence = "NoPass",
		passFailPresence = "Good"
	);
	
	splitSumOrig = sumOrig << Split( 
		Split By( ::colListLeb<<getitems ),
		Split( :N Rows ),
		Group( ::colListBeb<<getitems )
	);
	
	Match(passFailPresence,
		"NoFail",
			splitSumOrig << new column("Fail");
			splitSumOrig << new column("Sample Size",Numeric, Continuous,
				Formula(
					If(
						Is Missing( :Fail ), :Pass + 0,
						Is Missing( :Pass ), :Fail + 0,
						:Pass + :Fail
					)
				)
			),
		"NoPass",
			splitSumOrig << new column("Pass");
			splitSumOrig << new column("Sample Size",Numeric, Continuous,
				Formula(
					If(
						Is Missing( :Fail ), :Pass + 0,
						Is Missing( :Pass ), :Fail + 0,
						:Pass + :Fail
					)
				)
			),
		"Good",
			splitSumOrig << new column("Sample Size",Numeric, Continuous,
				Formula(
					If(
						Is Missing( :Fail ), :Pass + 0,
						Is Missing( :Pass ), :Fail + 0,
						:Pass + :Fail
					)
				)
			)
	);
	//splitSumOrig << New column("Proportion",Numeric,Continuous,
	//	Formula(
	//		If(IsMissing(:Fail),0,
	//			:Fail / :Sample Size
	//		)
	//	)
	//);
	For(i=1,i<=nitems(::ba3ListEB),i++,
		order = valOrder[i];
		If(order == Empty(),,
			Column(splitSumOrig,::ba3ListEB[i])<<Set Property("Value Ordering",order)
		)
	);
	dtReady = splitSumOrig;
	sampCol = "Sample Size";
	defectCol = "Fail";
	sampVar = Parse( Eval Insert( ":name( \!"^sampCol^\!" )" ) );
	defectVar = Parse( Eval Insert( ":name( \!"^defectCol^\!" )" ) );
	Close(sumOrig,no save);
	Eval(exactBinomEqn);
	Eval(exactBinomGraph);
);
//--------------------------/SUB dataByRows----------------------------------------

//---------------------------SUB sampleGraph---------------------------------------
//forms interactive graph to play with sample sizes
sampleGraph = 
Expr(
	alpha = 0.05;
	Samples1 = 50;
	Defects1 = 1;
	Samples2 = 50;
	Defects2 = 4;
	x1 = 1;
	x2 = 2;
	a1 = 0.2;
	
	lowLimit1 = Expr(If(Defects1 == 0, 0,Beta Quantile( alpha / 2, Defects1, Samples1 - Defects1 + 1 )));
	lowLimit2 = Expr(If(Defects2 == 0, 0, Beta Quantile( alpha / 2, Defects2, Samples2 - Defects2 + 1 )));

	nw = New Window( "Range Bars",
		gb = Graph Box(
			Y Scale( 0, a1 ),
			X Scale( 0.5, 2.5 ),
			FrameSize( 407, 271 ),
			YAxis( Show Major Grid ),
			Marker Size( 2 ),
			Marker(
				{x1, Eval(lowLimit1)},
				{x1, Defects1 / Samples1},
				{x1, Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 )}
			),
			Marker(
				{x2, Eval(lowLimit2)},
				{x2, Defects2 / Samples2},
				{x2, Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 )}
			),
			Line(
				{x1 - 0.125, Eval(lowLimit1)},
				{x1 + 0.125, Eval(lowLimit1)}
			), //x1 bottom
			Line(
				{x1, Eval(lowLimit1)},
				{x1, Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 )}
			), //x1 Vert
			Line(
				{x1 - 0.125, Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 )},
				{x1 + 0.125, Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 )}
			), //x1 top
			Line(
				{x2 - 0.125, Eval(lowLimit2)},
				{x2 + 0.125, Eval(lowLimit2)}
			),
			Line(
				{x2 - 0.125, Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 )},
				{x2 + 0.125, Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 )}
			),
			Line(
				{x2, Eval(lowLimit2)},
				{x2, Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 )}
			),
		), 
		H List Box(
			V List Box(
				gb5=Global Box(Alpha),
				H List Box(
					Panel Box( "A",
						H List Box(
							H List Box(
								gb1=Global Box( Samples1 )
							),
							Slider Box(
								1,
								1000,
								Samples1,
								B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
								B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
								a1 = Maximum( B1, B2 ) * 1.1;
								gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
								gb << reshow;
							)
						),
						H List Box(
							H List Box(
								gb2=Global Box( Defects1 )
							),
							Slider Box(
								1,
								100,
								Defects1,
								B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
								B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
								a1 = Maximum( B1, B2 ) * 1.1;
								gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
								gb << reshow;
							)
						)
					),
					Panel Box( "B",
						H List Box(
							H List Box(
								gb3=Global Box( Samples2 )
							),
							Slider Box(
								1,
								1000,
								Samples2,
								B1 = Beta Quantile(1 - alpha / 2, Defects1 + 1, Samples1 - Defects1);
								B2 = Beta Quantile(1 - alpha / 2, Defects2 + 1, Samples2 - Defects2);
								a1 = Maximum( B1, B2 ) * 1.1;
								gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
								gb << reshow;
							)
						),
						H List Box(
							H List Box(
								gb4=Global Box( Defects2 )
							),
							Slider Box(
								1,
								100,
								Defects2,
								B1 = Beta Quantile(1 - alpha / 2, Defects1 + 1, Samples1 - Defects1);
								B2 = Beta Quantile(1 - alpha / 2, Defects2 + 1, Samples2 - Defects2);
								a1 = Maximum( B1, B2 ) * 1.1;
								gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
								gb << reshow;
							)
						)
					)
				)
			)
		)
	);
	
	gb1<<Setscript(
		B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
		B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
		a1 = Maximum( B1, B2 ) * 1.1;
		gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
		gb << reshow;
	);
	gb2<<Setscript(
		B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
		B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
		a1 = Maximum( B1, B2 ) * 1.1;
		gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
		gb << reshow;
	);
	gb3<<Setscript(
		B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
		B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
		a1 = Maximum( B1, B2 ) * 1.1;
		gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
		gb << reshow;
	);
	gb4<<Setscript(
		B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
		B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
		a1 = Maximum( B1, B2 ) * 1.1;
		gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
		gb << reshow;
	);
	gb5<<Setscript(
		B1 = Beta Quantile( 1 - alpha / 2, Defects1 + 1, Samples1 - Defects1 );
		B2 = Beta Quantile( 1 - alpha / 2, Defects2 + 1, Samples2 - Defects2 );
		a1 = Maximum( B1, B2 ) * 1.1;
		gb << Set Y Axis( {Max( a1 ), inc( a1 / 4 )} );
		gb << reshow;
	);
);
//----------------------------/SUB sampleGraph-------------------------------------

//----------------------------SUB exactBinomGraph----------------------------------
exactBinomGraph =
Expr(
	varList = ::colListBeb<<getitems;
	xExpr = Expr( 
		Variables( Y( :Name("LCL (EBL)") ), 
		Y( :Proportion, Position( 1 ) ), 
		Y( :Name("UCL (EBL)"), Position( 1 ) ) ) 
	);

	For( i = N Items( varList ), i >= 1, i--,
		varExpr = Expr( X() );
		Insert Into( varExpr, Column( varList[i] ) );
		Insert Into( varExpr, Name Expr( Position( 1 ) ) );
		Insert Into( xExpr, Name Expr( varExpr ), 1 );
	);

	Eval(
		  Substitute(
					  Expr(
							exactBinomGB = dtReady << Graph Builder(
								  Show Control Panel( 0 ),
								  Xvars,
								  Elements(
										Points( X( 1 ), Y( 2 ), Legend( 1 ), Jitter( 0 ) ),
										Bar(
											  X( 1 ),
											  Y( 1 ),
											  Y( 3 ),
											  Legend( 2 ),
											  Bar Style( "Stock" ),
											  Summary Statistic( "Mean" )
										)
								  )
							)
					  ),
				Expr( xVars ), Name Expr( xExpr )
		  )
	);
	exactBinomGB<<SendToReport(
		Dispatch( {}, "LCL (EBL)", ScaleBox, {Show Major Grid( 1 )} ),
		Dispatch(
			{},
			"graph title",
			TextEditBox,
			{Set Text( "Exact Binomial Graph, Alpha = "||Char(alpha) )}
		),
		Dispatch( {}, "Y title", TextEditBox, {Set Text( "Proportion" )} )
	)
);
//----------------------------/SUB exactBinomGraph---------------------------------

//----------------------------SUB exactBinomDlg------------------------------------
//Constructs dialog and sets up variables for subsequent analysis
exactBinomDlg = New Window( "Exact Binomial",
	Border Box( Left( 3 ), top( 2 ),
		V List Box(
			Text Box( "Choose columns for Exact Binomial Analysis" ),
			H List Box(
				//V List Box(
					Panel Box( "Select Columns",
						colListData = Col List Box(
							All,
							width( lbWidth ),
							nLines( Min( nc, 10 ) )
						)
					),
				//),
				V List Box(
					Panel Box( "Cast Selected Columns into Roles",
						Lineup Box( N Col( 2 ), Spacing( 3 ),
							Button Box( "Sample Size",
								::colListYeb << Append( colListData << GetSelected )
							),
							::colListYeb = Col List Box( width( lbWidth ), maxitems( 1 ), nLines( 2 ), numeric ),
							Button Box( "Defects",
								::colListLeb << Append( colListData << GetSelected )
							),
							::colListLeb = Col List Box( width( lbWidth ), minitems(1), maxitems( 1 ), nLines( 2 ) ),
							Button Box( "By",
								::colListBeb << Append( colListData << GetSelected )
							),
							::colListBeb = Col List Box( width( lbWidth ), nLines( 1 ) )
						)
					),
					Panel Box( "Open Sample Data Tables",
						Lineup Box( N Col( 3 ), Spacing( 3 ),
							Button Box( "Summarized", Eval(Summarized)
							),
							Text Box ("  "),
							Button Box( "Individual Row", Eval(IndRow)
							),
						)
					)
				),
				Panel Box( "Action",
					Lineup Box( N Col( 1 ),
						Button Box( "OK", Eval(runOKeb)),
						Button Box( "Cancel", Eval(exprCancelEB) ),
						Text Box( " " ),
						Button Box( "Remove",
							::colListYeb << RemoveSelected;
							::colListLeb << RemoveSelected;
							::colListBeb << RemoveSelected;
						),
						Button Box( "Recall", Eval(::recallItemsEB) ),
						Button Box( "Help", Eval(Help) ),
						Button Box( "About", Eval(About) )
					)
				)
			),
			H List Box(
				Panel Box( "Sample Size",
					Button Box("Show Graph",Eval(sampleGraph))
				),
				Panel Box( "How is data organized?",
					::dataOrg = Radio Box({"Summary", "Individual Rows"},<<set(1))
				),
				Panel Box( "Alpha",
					H List Box(
						V List Box(
							TextBox("Select Alpha"),
							H List Box(
								::comboObj = Combo Box( {"0.10", "0.05", "0.01"}, <<Set( 2 ) ),
								TextBox("   or")
							),
							H List Box(
								TextBox("Enter Desired Alpha "),
								::textObj = Text Edit Box("",<<Script(newAlpha=::textObj<<GetText))
							)
						)
					)
				)
			)
		)
	)
);
//----------------------------/SUB ExactBinomDlg-----------------------------------


