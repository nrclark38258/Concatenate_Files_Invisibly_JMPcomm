//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

Names Default To Here( 1 );

//------------------Revision History for script---------------------
//
//	1.0.0 NClark 060721
//		-> 1st version
//------------------------------------------------------------------

//-----------Variable Declarations (above Main for easy access)--
	
	//gathers user information
	If(HostIs("MAC"),
		u = Get Environment Variable("USER");
		,
		u = Get Environment Variable("USERNAME");
	);
	addinID = "com.idexx.catalystAssayCodes";

	updateIDs = {"com.idexx.assayDevLibraries2","com.idexx.catalystAssayCodes"};

	minJMPver = "15";
	
	topBottomSpace = Repeat(" ",55);
	sideSpace = "    ";
	rowsPerCol = 10;

//-----------/Variable Declarations-----------------------

Include( "$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_AssayCodes2.jsl" );
Include( "$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_Utilities.jsl" );

////////////////////////////////////////
//                                    //
//            Functions               //
//                                    //
////////////////////////////////////////

/*
Testing a namespace thing that can hopefully work if I change the libraries to their own namespace

The goal being to set the namespace for just the utility-level functions that exist locally but could
exist from the library. Then I believe I can just delete the namespace at the end to clean up things
since they will no longer be in the 'here' namespace and cleaned up automatically
*/

// new namespace
	If( !Namespace Exists( "UtilityFunctions" ),
		New Namespace(
			"UtilityFunctions"
		)
	);
	uf = Namespace( "UtilityFunctions" );

	uf:checkVersion = Function( {minVer},
		{default local},
		currVer = JMP Version();
		currWords = words(currVer,".");
		minWords = words(minVer,".");
		minBackHalf = If(nitems(minWords)==1,"0",concatitems(minWords[2::nitems(minWords)],""));
		backHalf = If(nitems(currWords)==1,"0",concatitems(currWords[2::nitems(currWords)],""));
		newNumVer = Num(currWords[1]||"."||backHalf);
		newMinVer = Num(minWords[1]||"."||minBackHalf);
		
		If(newNumVer >= newMinVer, Return(1),Return(0));
	);

	uf:wrongVer = Function( {maxVer},
		{Default Local},
		New Window( "Requires JMP " || Char( maxVer ),
			<<Modal,
			Text Box( "This addin requires the used of JMP " || Char( maxVer ) || "+" ),
			Button Box( "OK" )
		)
	);
//end of new namespace

catalystAssayCodes = Function({}, {default local},

	assayCodes = assayNums();
	nw = New Window("Assay Codes",
		show menu(0),
		show toolbars(0),
		BorderBox(Left(10),Right(10),Top(10),Bottom(10),
			VListBox(
				Panel Box("Catalyst Assays and their Numerical Codes",
					bb = Border Box(Left(10),Right(10),Top(10),Bottom(10),
					//bb = Lineup Box(N Col(Ceiling(nitems(assayCodes)/rowsPerCol ))

					)
				),
				Panel Box("Notes",
					Border Box(Left(5),Right(5),Top(5),Bottom(5),
						//Sides(15),
						HListBox(
							VListBox(
								TextBox("04 SDMA is Quest Platform"),
								TextBox("18 SDMA is HRP Platform"),
								TextBox("28 TT4 is 7:1 Dilution"),
								TextBox("30 TT4 is 5:1 Dilution"),
							),
							TextBox(sideSpace),
							VListBox(
								TextBox("20 BA was for potential 2nd Slide"),
								TextBox("21 BA is Original Assay"),
								TextBox("56 ALTV is ALT read in visual spectrum"),
								TextBox("73 ALT is original ALT"),
							)
						)
					)
				)
			)
		)
	);

	baseExpr = Expr(
		Border Box(Left(5),Right(5),Top(5),Bottom(5),
			Sides(15),
			VListBox(
				TextBox(topBottomSpace, << set font size(5)),
				HlistBox(
					TextBox(a),
					TextBox(sideSpace),
					TextBox(b)
				),
				TextBox(topBottomSpace, << set font size(5))
			)
		)
	);

	hbox = HListBox();
	For(i=1,i<=Ceiling(nitems(assayCodes)/rowsPerCol ),i++,
		Eval(
			EvalExpr(
				insertInto(hBox,Borderbox(Left(10),Right(10),Top(10),Bottom(10),Expr(Parse("vb"||char(i)||" = "||"VlistBox()"))))
			)
		)
	);

	currentKey = assayCodes << first;
	count = 1;
	For(j=1, j<=Ceiling(nitems(assayCodes)/rowsPerCol ),j++,
		For(i=1,i<=rowsPerCol,i++,
			code = If(Length(Char(currentKey)) == 2 | Char(currentKey) == ".", char(currentKey),"0"||char(currentKey));
			a1 = Substitute(NameExpr(baseExpr),Expr(a),EvalExpr(Expr(code)),Expr(b),EvalExpr(Expr(assayCodes[currentKey])));

			Eval(
				EvalExpr(
					insertinto(Expr(Parse("vb"||char(j))),a1);
					insertinto(Expr(Parse("vb"||char(j))),TextBox("", << set font size(5)))
				)
			);
			currentKey = assayCodes << Next(currentKey);
			If(count < nitems(assayCodes),count++,Break())
		);
	);

	insertinto(bb,hbox);

);

////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////

If( Length( Include File List() ) == 1,

	batchUpdateChk(updateIDs);
	trackUsage(u,addinID);

	If( uf:checkVersion( minJMPver ) == 1,
		//defaultsNoDialog = 1;

		catalystAssayCodes();

		uf << delete namespace;
	,
		uf:wrongVer( minJMPver );
		uf << delete namespace;
	)
	,
	Print( "Script was included from another source" );
	
);

