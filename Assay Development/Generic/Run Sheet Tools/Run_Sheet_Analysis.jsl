//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

//Tool to analyze run sheets and add them to a data table

//------------------Revision History for both script and Help File--
//
//	1.3.0.0 NClark 053119
//		-> Better file naming from sheet
//	1.2.0.0 NClark 040819
//		-> Further updated the finding of the end of the table. Rows without Date_RS filled in will be removed from the run sheet
//			-> This should target rows at the end of the table only if Excel brings in more rows than were actually run
//			(should be as effective or more than the initial while() loop since it targets the same thing (missing Date_RS cells))
//	1.1.0.0 NClark 040319
//		-> Fixed bug that was triggered when all rows in imported sheet have values in Date_RS field
//	1.0.0.2 NClark 021419
//		-> icon jmpcust fixes
//		-> added check for lib files if no script update
//	1.0.0.1 NClark 021419
//		-> jmpcust updates to open official tempate from web
//	1.0.0 NClark 021319
//		-> First Release ... only analyzes run sheet, no join
//------------------------------------------------------------------

names default to here(1);

//-----------Variable Declarations (above Main for easy access)--

	u = Get Environment Variable("username");
	addinID = "com.idexx.runsheet";
	addinLib = "com.idexx.assayDevLibraries2";

	Try(
		runSheetVer = Char(GetAddin(addinID)<<version);
		,
		Print("Addin not installed yet");
		runSheetVer = "v999"
	);

//-----------/Variable Declarations-----------------------

include("$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_Utilities.jsl");

noSampleID = Function({},
	New Window( "No 'Sample id' column",
		<<Modal,
		Text Box( "A Sample id column is missing from file", <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "Please ensure proper column is named appropriately"),
		Text Box( "" ), 
		Button Box( "OK" ),
	)
);

noStartTable = Function({},
	New Window( "No Data Table",
		<<Modal,
		Text Box( "No data table open", <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "Please open your starting data table"),
		Text Box( "" ), 
		Button Box( "OK" ),
	)
);
	
runSheetJoin = Function({},{default local},

	//Gets Preferences user may have changed from what's necessary
	prefExcelSheet = GetPreferences(Use Excel Labels as Headings);
	prefExcelOpen = GetPreferences(Excel Open Method);
	//Changes to necessary preferences
	Preferences(Use Excel Labels as Headings("Never"));
	Preferences(Excel Open Method("Select Individual Worksheets"));

	/*
	If(isempty(currentdatatable()), 
		noStartTable();
		Try(
			//dtStart = Open();
			startFile = Pick File(
			   ,
			   ,
			   {"JMP FIles|jmp;"},
			   //{"Excel Files|xls;xlsx;xlsm"},
			   1,
			   0,
			   ,
			   //Multiple
			);
			dtStart = Open(startFile);
			Wait(0); //wait forces-hopefully-dtStart to open before prompting for run sheet
			,
			Print("no data table selected");
			Throw()
		);
		,
		dtStart = currentdatatable()
	);

	//Sets up Variables for new naming nomenclature (rules in revision history)
	tableName = dtStart<<GetName;
	titleName = Word(1,tableName,"-");
	dateName = Substr(tableName,Munger( tableName, 1, "-" )+1,6);

	//If Sample id column is not present, an error notifies the user
	Try(
		Column(dtStart,"Sample id")<< ModelingType("Nominal");
		Column(dtStart,"Sample id")<< DataType("Character")
		,
		noSampleID();
		Throw()
	);
	*/

	Try(
		runSheetFile = Pick File(
		   ,
		   ,
		   //{"JMP FIles|jmp;"},
		   {"Excel Files|xls;xlsx;xlsm"},
		   1,
		   0,
		   ,
		   //Multiple
		);
		dt = Open(runsheetFile);
		,
		Print("no run sheet selected");
		Throw()
	);
	fileName = Words(runSheetFile,"/")[nitems(Words(runSheetFile,"/"))];
	dt<< set name(fileName);

	//Locates the row which contains header information
	findStart = Column(dt,1)<<getasmatrix;
	rowStart = Contains(findStart,"Date_RS");
	findNotes = dt[rowstart,0];
	notesCol = Contains(findNotes, "NOTES");

	//Moves header information into column headers
	colMtrx={};
	For(i=1,i<=ncol(dt),i++,
		colMtrx[i]=Column(dt,i)<<getasmatrix;
		Column(dt,i)<<Setname(colMtrx[i][rowStart])
	);

	//Removes any additional columns
	While(ncol(dt) > notesCol,
		dt << delete columns(ncol(dt))
	);

	//metadata headers from column A
	For(i=1,i<=rowStart-1,i++,
		Match(colMtrx[1][i],
			"Experiment Configuration",Empty()
			,
			"Software Configuration", Empty()
			,
			"", Empty()
			,
			dt<<new column(colMtrx[1][i],Character(10),
				//<<Set Values(colMtrx[3][i])
				Formula(
					If(colMtrx[3][i] == "", "NA",
						colMtrx[3][i]
					)
				)
			);
			Column(dt,colMtrx[1][i])<<DeleteFormula;
		)
	);
	//metadata headers from column D
	For(i=1,i<=rowStart-1,i++,
		Match(colMtrx[4][i],
			"Hardware Configuration",Empty()
			,
			"None", Empty()
			,
			"", Empty()
			,
			dt<<new column(colMtrx[4][i],Character(10),
				<<Set Each Value(colMtrx[5][i])
				//Formula(
				//	If(colMtrx[5][i] == "", "NA",
				//		colMtrx[5][i]
				//	)
				//)
			);
			//Column(dt,colMtrx[4][i])<<DeleteFormula;
		)
	);

	machineList = colMtrx[6][1::rowStart-1];
	For(i=nitems(machineList),i>=1,i--,
		if(machineList[i] == "",
			removefrom(machineList,i)
		)
	);
	machNum = colMtrx[7][1::rowStart-1];
	machNotes ={};
	For(i=1,i<=nitems(machNum),i++,
		if(machNum[i] == "", empty()
			,
			insertinto(machNotes,colMtrx[7][i]||"_"||colMtrx[8][i])
			
		)
	);
	removefrom(machNotes,1);
	moniker = machineList[1];
	removefrom(machineList,1);
	machArray = associative array(machineList);
	currentKey = machArray << first;
	For(i=1,i<=nitems(machArray),i++,
		Try(machArray[currentkey] = machNotes[i],machArray[currentkey] = "NA");
		currentKey = machArray << next(currentkey);
	);

	dt << New Column(moniker||" notes",Character(10),
		Formula(
			If(machArray[:Instrument_RS] == 0, "",machArray[:Instrument_RS])
		)
	);
	Column(dt,moniker||" notes") << delete formula;
	dt<<DeleteRows(1::rowStart);
	dt<<SelectWhere(IsMissing(:Date_RS))<<DeleteRows;//If it doesn't have a Date, it's assuumed it wasn't run

	/*
	//Joins dt onto dtStart by Run Number only
	newJustResults = dtStart << Join(
		With( Data Table( dt ) ),
		Merge Same Name Columns,
		By Matching Columns( :Name("Sample id") = :Name("Sample ID_RS") ),
		Drop multiples( 0, 0 ),
		Name( "Include non-matches" )(1, 1),
		Preserve main table order( 1 )
	);

	newJustResults << SetName(
		titleName||"-"||dateName||"_"||"justResults and RunSheet"
	);

	newJustResults << New Column("Runsheet Tool Ver",Character(10),
		<< Set Each Value(runSheetVer)
		//Formula(Eval(runSheetVer))
	);
	*/

	Eval(prefExcelSheet);
	Eval(prefExcelOpen);
);

////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////


If(Length(Include File List()) == 1,
	if(isMissing(checkForUpdate(addinID)),
		checkForUpdate(addinLib)
	);
	trackUsage(u,addinID);
	runSheetJoin()
	,
	print("script was included from another source");
);