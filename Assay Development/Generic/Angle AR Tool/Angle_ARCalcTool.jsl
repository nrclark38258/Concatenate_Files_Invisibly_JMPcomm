//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

//Tool Calculates ARs from IA curves in a manner very similar to TT4

//------------------Revision History for both script and Help File--
//
//	3.5.0.1 NClark 021121
//		-> updated two tableprep calls to reset table variable so not lost if tableprep makes new table
//	3.5.0.0 NClark 021021
//		-> Updated to use uniqueCurveID over uniqueAssayID
//	3.4.0.2 NClark 021419
//		-> updated to check lib files if no script update
//	3.4.0.1 NClark 021419
//		-> did include for utilities
//		-> fixed bug to rename version correctly
//	3.4 NClark 021419
//		-> Updated to gather user name and made variable for addinID
//		-> updated starting code to for tracking and update checking along with the 'included file' check
//	3.3 NClark 061418
//		-> Updating to use uniqueAssayID instead of commonRunID
//	3.2 NClark 051018
//		-> general updates to better match generic AR tools
//		-> better match of colums so works when tableprep produces default cols
//		-> force dt_algorithm to top when complete
//	3.1 NClark 050218
//		-> added missing cols function
//		-> added try when columns picked to look for default cols and call missing cols if they aren't there
//		-> Moved names default to here() and namespace stuff prior to variable declarations
//	3.0 NClark 050218
//		-> Full redo of code structure
//		-> allows users to choose own 'time' and response columms
//		-> incorporates new Table Prep features (in libraries2)
//		-> updates to use existing table to add additional parameters if desires w/o new columns
//		-> table script for just results so vast number of tables aren't created
//		-> fully function-based
//		-> moved where tableprep lives so original table remains untouched
//	2.4 NClark 010517
//		-> Updated include pathes to reference the new, separated libraries
//	2.3 NClark 062916
//		-> New version for updated TablePrep file (v1.7)
//	2.2 NClark 062916
//		-> Update all include paths to be the correct $ADDINHOME path for tool
//	2.1 NClark 062416
//		-> include for ChemCodes list
//		-> Updated TablePreparation file (v1.6) to use chemcodes
//	2.0 NClark 062216
//		-> Switched to new infrastructure of 'include' scripts to make updating easier and transferrable between assays (replaced many formulas/preps with function calls)
//		-> Updated so dt_input opens invisible to start
//		-> Added 'show window' to ARCalc to make dt_input visible when 'OK' clicked
//		-> Updated startDiag 'Cancel' button to close dt_input
//		-> deleted numRegressFlag5 as it is not longer used in script
//		-> deleted flagging thresholds (that were commented out) as the generic script won't flag
//	1.1 NClark 102215
//		-> Adjusted in-house prep and Sort to handle Multiple Wavelengths
//	1.0 NClark 100515
//		-> 1st version released in this branch
//		-> Based on version 1.9 of SDMA tool
//		-> Added Table prep expression to be done befor arCalc
//		-> Removed a lot of tt4-esque infrasctructure as this is a generic script
//------------------------------------------------------------------

Names Default To Here( 1 );

If( !Namespace Exists( "genericAR" ), New Namespace( "genericAR" ) );
ga = Namespace("genericAR");

//-----------Variable Declarations (above Main for easy access)--
	
	u = Get Environment Variable("username");
	addinID = "com.idexx.genericAD_AngleTool";
	addinLib = "com.idexx.assayDevLibraries2";

	Try(
		AngleARCalcVer = Char(GetAddin(addinID)<<version);
		,
		Print("Addin not installed yet");
		AngleARCalcVer = "v999"
	);
	//Script Version
	//AngleARCalcVer = "v3.0";
	
	title1 = "Select Values for 'Time' and Response";
	title2 = "Defaults Selected";
	
	//Define the table variables for use in formulas
	SOPnormTime = 40;
	SOPthreshTime = 15;
	SOPthreshArea = 1;
	SOPnumRegressPoints = 10;
	
	//Variables starting as empty lists
	normTime1 = {};
	threshTime1 = {};
	threshArea1 = {};
	numRegressPoints1 = {};
	
	//globals for 'get text'
	globalListParam = {ga:ba1ListParam, ga:ba2ListParam, ga:ba3ListParam, ga:ba4ListParam};
	lbListParam = {normtime1, threshTime1, threshArea1, numRegressPoints1};

	//globals for 'get items'
	globalList = {ga:ba1List, ga:ba2List, ga:ba3List}; //global list for column lists
	lbList = {colListY, colListX, colListT};
	globalVarParam = {ga:ba1VarParam};
	lbVarParam = {numParam};

	//globals for 'get checkbox'
	globalDefault = {ga:checkbox};
	lbDefault = {chooseDefBox};

//-----------/Variable Declarations-----------------------

include("$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_FunctionLibrary2.jsl");
include("$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_TablePreparation2.jsl");
include("$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_Utilities.jsl");

////////////////////////////////////////
//                                    //
//            Functions               //
//                                    //
////////////////////////////////////////

exprCancel = Function( {},
	diagWindow << close window;
);

recallItems = Function( {dtName}, {dtName},
	
	//recall for checkbox
	Try(
		If(ga:checkbox == 1,
			chooseDefBox<<set(1);
			ob << Close( 1 );
			ob << visibility( 2 );
			ob << set title( title2 );
		)
	);

	//from generic ar tool
	numParam = If( Is Missing( ga:ba1VarParam ),
		1,
		ga:ba1VarParam
	);
	Try(
		For( j = 1, j <= 4, j++,
			hb1[j] << Delete;
			hb2[j] << Delete;
			hb3[j] << Delete;
			hb4[j] << Delete;
			j = j - 1;
		)
	);
	For( i = 1, i <= numParam, i++,
		hb1 << Append( normTime1[i] = Text Edit Box( ga:ba1ListParam[i] ) );
		hb1 << Append( Text Box( "   " ) );
		hb2 << Append( threshTime1[i] = Text Edit Box( ga:ba2ListParam[i] ) );
		hb2 << Append( Text Box( "   " ) );
		hb3 << Append( threshArea1[i] = Text Edit Box( ga:ba3ListParam[i] ) );
		hb3 << Append( Text Box( "   " ) );
		hb4 << Append( numRegressPoints1[i] = Text Edit Box( ga:ba4ListParam[i] ) );
		hb4 << Append( Text Box( "   " ) );
	);
//from sdma cal tool for doing columns
	//Is List will produce error if ba1List is not declared
	//If error, declare vars, otherwise get vars
	colList = dtName << Get Column Names( String );
	Try(
		For( i = 1, i <= N Items( globalList ), i++,
			nextList = globalList[i];
			For( j = 1, j <= N Items( nextList ), j++,
				If( N Row( Loc( colList, nextList[j] ) ) > 0,
					Eval( 
						Substitute( 
							Expr( lb << Append( item ) ), Expr( lb ), lbList[i], Expr( item ), nextList[j] 
						) 
					)
				)
			);
		)
	,
		Print( "No columns to recall." )
	);
);

///// Three functions for populating globals of differing variable types///////
//get items like Col List boxes and num edit boxes
populateGetItems = Function( {globalList, localList, namespace=.}, 

	For( i = 1, i <= N Items( globalList ), i++, 
	//show(nitems(globalList));
		Eval(
			Substitute(
					Expr(
						If(IsEmpty(ns),
							Unlock Globals( glVar )
						,
							ns << unlock;
						);
						Try( glVar = lb << Get Items
						, 
							Try( glVar = lb << get
							, 
								glVar = lb ) ;
						);
						If(IsEmpty(ns),
							Lock Globals( glVar )
						,
							ns << lock;
						);
					),
				Expr( lb ), Name Expr( localList[i] ),
				Expr( glVar ), Name Expr( globalList[i] ),
				Expr( ns ), Name Expr(namespace)
			)
		)
	);

	//Show( globalList, localList );
	//Try(Show( ga:ba1List, ga:ba2List, ga:ba3List ));
	//Try(Show( ga:ba1VarParam ));
);
// for text edit boxes
populateGetText = Function( {globalList, localList, namespace=.}, 

	For( i = 1, i <= N Items( globalList ), i++, 
	//show(nitems(globalList));
		Eval(
			Substitute(
					Expr(
						If(IsEmpty(ns),
							Unlock Globals( glVar )
						,
							ns << unlock;
						);
						glVar = lb << Get Text;
						If(IsEmpty(ns),
							Lock Globals( glVar )
						,
							ns << lock;
						);
					),
				Expr( lb ), Name Expr( localList[i] ),
				Expr( glVar ), Name Expr( globalList[i] ),
				Expr( ns ), Name Expr(namespace)
			)
		)
	);
	
	//Show( globalList, localList );
	//Try(Show( ga:ba1VarParam, ga:ba1ListParam, ga:ba2ListParam, ga:ba3ListParam, ga:ba4ListParam ));

);
// for check boxes
populateChkBx = Function( {globalList, localList, namespace=.}, 

	For( i = 1, i <= N Items( globalList ), i++, 
	//show(nitems(globalList));
		Eval(
			Substitute(
					Expr(
						If(IsEmpty(ns),
							Unlock Globals( glVar )
						,
							ns << unlock;
						);
						glVar = lb << Get;
						If(IsEmpty(ns),
							Lock Globals( glVar )
						,
							ns << lock;
						);
					),
				Expr( lb ), Name Expr( localList[i] ),
				Expr( glVar ), Name Expr( globalList[i] ),
				Expr( ns ), Name Expr(namespace)
			)
		)
	);
	
	//Show( globalList, localList );
	//Try(Show(ga:checkbox));

);
///////////////////////////////////////////////////////////////////////////////

missingCols = Function({},
	New Window( "Default Columns Not Present",
		<<Modal,
		Text Box( "Defaults chosen, but one or more default columns missing", <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "" ), 
		Button Box( "OK" ),
	)
);

arCalc = Function({tableName,fullDefaults=0},{},
	
	tblGetName = tableName << GetName;
	
	//determines if any other paramSets are present and find the next paramSet
	tableVars = tableName << get table variable names;
	paramNums = {};
	For(i=1,i<=nitems(tableVars),i++,
		If(Contains(tableVars[i],"paramSet")>0,
			InsertInto(paramNums,Num(Munger(tableVars[i],1,"paramSet","")))
		)
	);
	paramStart = Max(paramNums) + 1;
	If(IsMissing(paramStart),
		paramStart = 1;
	);
	
	//determines if any AR tool has been run before
	//makes new table if first time use
	//does tableprep no matter what
	If(
		Contains(tblGetName,"_progCurves") > 0,
		newTable = 0;
		dt_algorithm = tableName;
		dt_algorithm = tablePrep(dt_algorithm);
	,	
		newTable = 1;
		//Creates working copy of data table so original data is never 'touched'
		dt_algorithm = tableName << Subset(Output Table( tblGetName ), All Rows,Selected columns only( 0 ),invisible);
		dt_algorithm = tablePrep(dt_algorithm);
	);
	
	colList1 = dt_algorithm << get column names (string);
	//discovers presence of any column that would become default
	//assigns cols or throws error dialog
	foundTimeCol = 0;
	foundRespCol = 0;
	foundUniqueCol = 0;
	If(
		Contains(colList1,"TimeFromSampleDispense:sec")>0,
		foundTimeCol = 1;
	);
	If(
		Contains(colList1,"ReflDens_avg")>0,
		foundRespCol = 1;
	);
	If(
		Contains(colList1,"uniqueCurveID")>0,
		foundUniqueCol = 1;
	);
	If(fullDefaults == 0,
		useDefaultCols = chooseDefBox<<get;
	,
		useDefaultCols = 1		
	);
	If(fullDefaults == 0,
		useDefaultCols = chooseDefBox<<get;
	,
		useDefaultCols = 1		
	);
	Match(useDefaultCols,
		0,
		Try(
			respCol = (colListY << Get items)[1];
			timeCol = (colListX << Get items)[1];
			uniqueCol = (colListT << Get items)[1];
		,
			If( foundTimeCol == 1 & foundRespCol == 1 & foundUniqueCol == 1,
				respCol = "ReflDens_avg";
				timeCol = "TimeFromSampleDispense:sec";
				uniqueCol = "uniqueCurveID"
			,
				missingCols();
				If(newTable=1,Close(dt_algorithm,nosave));
				Throw()
			);
		)
	,
		1,
		If( foundTimeCol == 1 & foundRespCol == 1 & foundUniqueCol == 1,
			respCol = "ReflDens_avg";
			timeCol = "TimeFromSampleDispense:sec";
			uniqueCol = "uniqueCurveID";
		,
			missingCols();
			If(newTable == 1,Close(dt_algorithm,nosave));
			Throw()
		);
	);
	//show(respCol,timeCol,uniqueCol);
	
	diagwindow << close window();
	dt_algorithm << show window();
	
	//Sets up Variables for new naming nomenclature (rules in revision history)
	dt_name = tblGetName;
	titleName = Word(1,dt_name,"-");
	dateName = Substr(dt_name,Munger( dt_name, 1, "-" )+1,6);
	
	//Sets up MMDDYYYY date for Table Naming
	todayDate=Short Date( Today() );
	newTodayDate = Munger(todayDate,1,"/","");
	nextTodayDate = Munger(newTodayDate,1,"/","");
	
	If(fullDefaults != 0,
		insertInto(normTime1,char(SOPnormTime));
		insertInto(threshTime1,char(SOPthreshTime));
		insertInto(threshArea1,char(SOPthreshArea));
		insertInto(numRegressPoints1,char(SOPnumRegressPoints));
		normTime = normTime1;
		threshTime = threshTime1;
		threshArea = threshArea1;
		numRegressPoints = numRegressPoints1;
	,
		normTime = normTime1 << get text;
		threshTime = threshTime1 << get text;
		threshArea = threshArea1 << get text;
		numRegressPoints = numRegressPoints1 << get text;
	);

	//Show(normTime,threshTime,threshArea,numRegressPoints);
	Try(
		IsScriptable(Column(dt_algorithm,"Angle AR Tool Version"));
	,
		dt_algorithm << New Column("Angle AR Tool Version",Characterr(10),
			Formula(Eval(AngleARCalcVer))
		);
		Column(dt_algorithm,"Angle AR Tool Version") << delete formula;
	);
	
	dt_algorithm << Sort(
		By(Column(dt_algorithm,uniqueCol),Column(dt_algorithm,timeCol)),
		Order(Ascending,Ascending),
		ReplaceTable(1)
	);
	
	If(nitems(normTime) > 1,
		multiSets = "True",
		multiSets = "False"
	);

	//genericAngleCalc{paramSetStart,tableName,yColumn,xColumn,byColumn,normalizationTime,thresholdTime,thresholdArea,numberRegressionPoints,severalParamSets}
	For(j=1, j<=nitems(normTime), j++,
		genericAngleCalc(paramStart+(j-1),dt_algorithm,respCol,timeCol,uniqueCol,normTime[j],threshTime[j],threshArea[j],numRegressPoints[j],multiSets);
	);

	For(k=1, k<=nitems(normTime),k++,
		dt_algorithm << new table variable( "paramSet"||Char(k + (paramStart-1)),
			"normtime = "||normTime[k]||";
threshTime = "||threshTime[k]||";
threshArea = "||threshArea[k]||";
numRegressPoints = "||numRegressPoints[k]||";"
		)
	);
	If(newTable == 1,
		dt_algorithm << SetName(
			titleName||"-"||dateName||"_"||"genericARtools_"||nextTodayDate|| "_progCurves" 
		);
		parseUnique = EvalInsert(":Name(\!"^uniqueCol^\!")");
		Eval(
			EvalExpr(
				dt_algorithm << New Script("Make justResults",
					tblName = currentdatatable()<<Getname;
					Try(newName = Munger(tblName,1,"_progCurves",""),newName = tblName);
					datatable(tblName) << SelectWhere(Expr(Parse(parseUnique)) != Lag(Expr(Parse(parseUnique)),1));
					datatable(tblName) << Subset(
						output table name( newName|| "_justResults" )
					);
					datatable(tblName) << select all rows;
					datatable(tblName) << invert row selection;
				)
			)
		);
	,
		Empty()
	);
	currentdatatable(dt_algorithm);

);

startDialog = Function( {datatable},
	here:dt_new = datatable;
	nc = N Col( datatable );
	lbWidth = 130;
	numParam = 1;
	diagWindow = New Window( "Generic Angle Calculation",
		Border Box( Left( 3 ), top( 2 ),
			V List Box(
				H List Box(
					chooseDefbox = Check Box(
						{""},
						<<setFunction(
							Function( {this, button},
								If( (this << get( 1 )) == 1,
									ob << Close( 1 );
									ob << visibility( 2 );
									ob << set title( title2 );
									colListY << RemoveAll;
									//colListBsdmaCal << RemoveAll;
									colListX << RemoveAll;
									colListT << RemoveAll;
								,
									ob << Close( 0 );
									ob << visibility( 0 );
									ob << set title( title1 );
								)
							)
						)
					),
					tb = Text Box( "Check this box for default columns", <<setwrap( 500 ), <<setfontsize( 12 ), <<setfontstyle( "Bold" ) )
				),
				H List Box(
					Panel Box( "Input Parameters Combinations",
						V List Box(
							V List Box(
								H List Box(
									Text Box( "How many parameter sets?  " ),
									Number Edit Box(
										numParam,
										5,
										<<Set Function(
											Function( {this},
												numParam = this << Get;
												Try(
													For( j = 2, j <= 4, j++,
														hb1[j] << Delete;
														hb2[j] << Delete;
														hb3[j] << Delete;
														hb4[j] << Delete;
														j = j - 1;
													)
												);
												For( i = 1, i <= numParam - 1, i++,
													hb1 << Append( Text Box( "   " ) );
													hb1 << Append( normTime1[i + 1] = Text Edit Box( "" ) );
													hb2 << Append( Text Box( "   " ) );
													hb2 << Append( threshTime1[i + 1] = Text Edit Box( "" ) );
													hb3 << Append( Text Box( "   " ) );
													hb3 << Append( threshArea1[i + 1] = Text Edit Box( "" ) );
													hb4 << Append( Text Box( "   " ) );
													hb4 << Append( numRegressPoints1[i + 1] = Text Edit Box( "" ) );
												);
											)
										)
									)
								)
							),
							Text Box( "Each Vertical Set of Values = 1 Algorithm AR ", <<SetFontStyle( "Bold" ) ),
							Text Box( "" ),
							V List Box(
								Text Box( "Normalization Time" ),
								hb1 = H List Box( normTime1[1] = Text Edit Box( Char( SOPnormTime ) ) ),
								Text Box( "Time Threshold" ),
								hb2 = H List Box( threshTime1[1] = Text Edit Box( Char( SOPthreshTime ) ) ),
								Text Box( "Area Threshold" ),
								hb3 = H List Box( threshArea1[1] = Text Edit Box( Char( SOPthreshArea ) ) ),
								Text Box( "Regression Points" ),
								hb4 = H List Box( numRegressPoints1[1] = Text Edit Box( Char( SOPnumRegressPoints ) ) ),

							)
						)
					),
					Panel Box( "Default Columns",
						H List Box(
							Panel Box( "", Text Box( "Y, Resp", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ) ),
							V List Box(
								Text Box( "", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ),
								Text Box( "ReflDens_avg", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) )
							),

						),
						H List Box(
							Panel Box( "", Text Box( "X, 'Time'", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ) ),
							V List Box(
								Text Box( "", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ),
								Text Box( "TimeFromSampleDispense:sec", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) )
							),

						),
						H List Box(
							Panel Box( "", Text Box( "Unique ID", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ) ),
							V List Box(
								Text Box( "", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) ),
								Text Box( "uniqueCurveID", <<setfontsize( 10 ), <<setfontstyle( "Bold" ) )
							),

						),

					),
					Panel Box( "Action",
						Lineup Box( N Col( 1 ),
							Button Box( "OK",
								Batch Interactive( 1 );
								
								populateGetItems( globalList, lbList, ga );
								populateGetItems( globalVarParam, lbVarParam, ga );
								populateGetText( globalListParam, lbListParam, ga );
								populateChkBx( globalDefault, lbDefault, ga );
								arCalc(here:dt_new);
								
								Batch Interactive( 0 );
							),
							Button Box( "Cancel", exprCancel() ),
							Text Box( " " ),
							Button Box( "Remove",
								colListY << RemoveSelected;
								//colListBsdmaCal << RemoveSelected;
								colListX << RemoveSelected;
								colListT << RemoveSelected;
							),
							Button Box( "Recall",
								recallItems(here:dt_new)
							),
						)
					)
				),
				ob = Outline Box( title1,
					Border Box( Left( 3 ), top( 2 ),
						V List Box(
							Text Box( "Choose Columns for Response, 'Time', and Unique ID", <<setfontstyle( "Bold" ) ),
							H List Box(
								V List Box(
									Panel Box( "Select Columns",
										colListData = Col List Box(here:dt_new, All, width( lbWidth ), nLines( Min( nc, 10 ) ), Grouped )
									), 

								),
								Panel Box( "Cast Selected Columns into Roles",
									Lineup Box( N Col( 2 ), Spacing( 3 ),
										Button Box( "Y, Resp", colListY << Append( colListData << GetSelected ) ),
										colListY = Col List Box(here:dt_new, width( lbWidth ), minitems( 1 ), maxitems( 1 ), nLines( 3 ), numeric ),
										Button Box( "X, 'Time'", colListX << Append( colListData << GetSelected ) ),
										colListX = Col List Box(here:dt_new, width( lbWidth ), minitems( 1 ), maxitems( 1 ), nLines( 1 ), numeric ),
										Button Box( "Unique ID", colListT << Append( colListData << GetSelected ) ),
										colListT = Col List Box(here:dt_new, width( lbWidth ), minitems( 1 ), maxitems( 1 ), nLines( 1 ) ), 
										//Button Box( "By", colListBsdmaCal << Append( colListData << GetSelected ) ),
										//colListBsdmaCal = Col List Box( width( lbWidth ), nLines( 1 ), maxitems( 1 ), character )
									)
								)
							)
						)
					)
				)
			)
		)
	);
	Return(1);
);

////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////


If(Length(Include File List()) == 1,
	if(isMissing(checkForUpdate(addinID)),
		checkForUpdate(addinLib)
	);
	trackUsage(u,addinID);

	defaultsNoDialog = 0;

	//Gets data table if non opened
	If(Ntable()==0,
		dt_start = Open(),
		dt_start = currentdatatable()
	);

	If(defaultsNoDialog == 0,
		startdialog(dt_start);
		,
		arCalc(dt_start,defaultsNoDialog)
	);
	,
	print("script was included from another source");
);


