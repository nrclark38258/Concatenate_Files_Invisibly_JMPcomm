//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092
//nathan-clark@idexx.com

//Tool to help decide correct titer for SDMA Assay

//------------------Revision History -------------------------------
//
//	1.3 NClark 022619
//		-> added variables to send to new functions for auto update and tracking
//		-> added included to utilities.jsl
//		-> added check functions in main function of script
//	1.2 NClark 062218
//		-> Changed LCMS to Assigned Conc.
//		-> updated and improved Try() for column presence
//	1.1 NClark 081517 -- updated menu, not script
//	1.0 NClark 081517
//		-> updated based on OPS tool v1.0
//		-> reverted some features back to Beta 3 for addition of orig titer data
//		-> Updated to new spec lines
//		-> Final table modeled to all titers
//	Beta 5 NClark xxxxxx
//	Beta 4 NClark xxxxxx
//	Beta 3 NClark 072717
//		-> Fixed last bug to correct Match on titer, not titer column
//	Beta 2 NClark 072217
//		-> Fixed doseSDform
//		-> Fixed current bug with OrdconjugateTiter being wrong decimals
//	Beta 1 NClark 0720
//		-> Rough attempt at tool, math looks right
//------------------------------------------------------------------
Clear Globals();
Names Default To Here( 1 );

include("$ADDIN_HOME(com.idexx.assayDevLibraries2)\AssayDev_Utilities.jsl");

u = Get Environment Variable("username");
addinID = "com.idexx.RnD_SDMAtiterCheck";
addinLib = "com.idexx.assayDevLibraries2";

if(isMissing(checkForUpdate(addinID)),
	checkForUpdate(addinLib)
);
trackUsage(u,addinID);

//named because JMP has a built in Sequence function
nrcSequence = Function({startValue,endValue,increment},{default Local},
	seqList = {};
	For(i=startValue,i<endValue + increment,i+=increment,
		insertInto(seqList,i)
	);
	Return(seqList)
);
missingCols = Function( {tableFail},{tableFail},
	If(tableFail == "Both",
		tableFail = "Both Tables", tableFail = tableFail||" Table"
	);
	New Window( tableFail||"_Incomplete Column Selection",
		<<Modal,
		Text Box( "Naming issue with "||tableFail, <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "One or more columns are missing or incorrect for data type", <<setfontstyle( "bold" ), <<setfontsize( 10 ) ),
		Text Box( "" ), 

		Text Box( "Please be sure the following nomenclature stadards are being adhered to", <<setfontstyle( "bold" ) ),
		Text Box( "\!"Angle\!" = Analyzer response column" ),
		Text Box( "\!"Assigned Conc.\!" = Reference dose column" ),
		Text Box( "\!"conjugateTiter\!" = Titer dose column" ),
		Button Box( "OK" ),

	)
);

//startDil = 6; // 5:1 = 6x = 6, 7:1 = 8x = 8 and so on
doseStartValues = nrcSequence(0,100,1);
//titerStartValues = nrcSequence(0.05,0.6,0.01);
//dilStartValues = nrcSequence(startDil,startDil,2);
//If(dilStartValues[1] == 0,
//	removeFrom(dilStartValues,1);
//);

//sets up for all columns to be added with formulas
//startFormula = "dt_start<<newcolumn(\!"Predict Angle\!", Formula(Match(";
//startFormula1 = "titerDT<<newcolumn(\!"AR (Dose sub0.05)\!", Formula(Match(";
startFormula2 = "titerDT<<newcolumn(\!"AR(Dose)\!", Formula(Match(:Name(\!"Ord(conjugateTiter)\!"),";
//startFormula3 = "titerDT<<newcolumn(\!"AR (Dose add0.05)\!", Formula(";
startFormula4 = "titerDT<<newcolumn(\!"1stDeriv_AR(Dose)\!", Formula(Match(:Name(\!"Ord(conjugateTiter)\!"),";
startFormula5 = "titerDT<<newcolumn(\!"AR SD (Dose)\!", Formula(";
//startFormula6 = "titerDT<<newcolumn(\!"Dose SD(Dose)\!", Formula(";

endForm = ")))";
arSDendForm = "))";

arSDform = "(1.2046957598E-04 + 4.6037745001E-02 * :Name( \!"AR (Dose)\!" ) +
	-5.8460259381E-01 * (:Name( \!"AR (Dose)\!" ) ^ 2))";

dt_start = currentdatatable();
dt_titer = Open();
startName = dt_start << GetName();

Try(IsScriptable(Column(dt_start,"conjugateTiter"));
	IsScriptable(Column(dt_start,"Assigned Conc."));
	IsScriptable(Column(dt_start,"Angle"));
	,
	missingCols("Response Verification");
	Close(dt_titer,nosave);
	throw();
);

dt = dt_start << Subset(Output Table( startName ), All Rows,Selected columns only( 0 ),invisible);

For(i=1,i<=nrow(dt),i++,
	If(Column(dt,"Assigned Conc.")[i] == 0,
		Column(dt,"Assigned Conc.")[i] = 0.01 
	,
		Empty()
	)
);

Summarize(dt,titerList = by(Column("conjugateTiter")));
For(j=1,j<=nitems(titerList),j++,
	For(i=1, i<=100,i++,
		dt << Add Rows( {:Name("Assigned Conc.") = 10000, :Name("Angle") = 0.0001, :Name("conjugateTiter") = Num(titerList[j])})
	)
);
//Column(dt,"Concentration Ratio") << Suppress formula eval(0);

doseCurve = dt << Fit Curve( 
	Y( :Name("Angle") ), 
	X( :Name("Assigned Conc.") ), 
	Fit Logistic 4P Rodbard,
	By(:Name("conjugateTiter"))
);
//doseCurve << (Fit[1] << save prediction formula); //May not be needed with all the other stuff.

If(nitems(titerList) == 1,
	params = Report(doseCurve)[Tablebox(3)] << make combined datatable;
,

	params = Report(doseCurve[1])[Tablebox(3)] << make combined datatable;
);

For(i=ncol(params),i>=1,i--,
	a = Column(params,i) << getname();
	
	If(a != "Parameter" & a != "Estimate" &a != "conjugateTiter",
		//Print("deleting");
		//For(j=1, j<=nitems(params),j++,
			params << DeleteColumns(a);
		//)
	,
		Empty()
	)
);
/* Rodbard Normal Form (for deriv calculations):([c-L asympt]) + ([d-U asympt] - ([c-L asympt])) / (1 + ([Concentration] / [b-inflection]) ^ [a-Growth])*/
fitformula = {};
fitDerivForm = {};
For( i = 1, i <= N Items( titerList ), i++,
	r = Eval Insert( "\!"^titerList[i]^\!"" );
	fitFormula[i] = r || "," || Char(
		Eval Expr(
			Expr( params[(4 * i - 1), 3] ) + (Expr( params[(4 * i), 3] ) - Expr( params[(4 * i - 1), 3] )) / (1 + (:Name( "Dose" ) /
			Expr( params[(4 * i - 2), 3] )) ^ Expr( params[(4 * i - 3), 3] ))
		)
	);
	fitDerivForm[i] = r || "," || Char(
		Eval(
			Eval Expr(
				Derivative(
					Expr( params[(4 * i - 1), 3] ) + (Expr( params[(4 * i), 3] ) - Expr( params[(4 * i - 1), 3] )) / (1 + (:Name( "Dose" ) / Expr( params[(4 * i - 2), 3] )) ^ Expr( params[(4 * i - 3), 3] ))
				,
					:Name( "Dose" )
				)
			)
		)
	);
);
fitConcatFormula = ConcatItems(fitFormula,",");
fitConcatDerivForm = ConcatItems(fitDerivForm,",");

doseCurve << Close window();
Close(params, nosave);
Close(dt, nosave);

doseSDform = Concat("-((1 / Match(:Name(\!"Ord(conjugateTiter)\!"),",fitConcatDerivForm,")) *", arSDform, ")");

//fullFitform = Concat(startFormula, fitFormula, endForm);
//fullARdoseSub0_5form = Concat(startFormula1, midForm1, subForm1, endForm);
fullARdoseForm = Concat(startFormula2, fitConcatFormula, endForm);
//fullARdoseAdd0_5form = Concat(startFormula3, midForm3, subForm3, endForm);
fullSlopeForm = Concat(startFormula4,fitConcatDerivForm,endForm);
fullARsdForm = Concat(startFormula5,arSDform,arSDendForm);
//fullDoseSDform = Concat(startFormula6,doseSDForm,arSDendForm);

titerList1 = Repeat(titerList,nitems(doseStartValues));
doseList = Repeat( doseStartValues, nitems(titerList));
//dilList = Repeat(dilStartValues, nitems(doseStartValues) * nitems(titerStartValues));

titerDT = new table("Titer Check Table",
	new column("Dose",
	set values(doseList))
);
titerDT <<sort(By(:Name("Dose")),Order(ascending),ReplaceTable(1));

titerDT << newcolumn("conjugateTiter",setvalues(titerList1));
titerDT << sort(By(:Name("Dose"),:Name("conjugateTiter")),Order(ascending),ReplaceTable(1));

titerDT << new column ("Ord(conjugateTiter)", Ordinal, Character(10),
	Formula(Char(Round(:Name("conjugateTiter"),3)))
);
Column(titerDt,"Ord(conjugateTiter)") << deleteformula();
//Column(titerDt,"Dilution") << deleteformula();

//Eval( Parse( fullFitForm ) ); //puts 'angle predictor' in base table (combine with all evals later)
//Eval( Parse( fullARdoseSub0_5form ));
Eval( Parse( fullARdoseForm ));
//Eval( Parse( fullARdoseAdd0_5form ));

Eval( Parse( fullSlopeForm ));
Eval( Parse( fullARsdForm ));
//Eval( Parse( fullDoseSDForm ));

titerDT << New Column("Dose SD(Dose)",
	Formula(
		-(:Name( "AR SD (Dose)" ) * (1 / :Name( "1stDeriv_AR(Dose)" )))
	)
);
titerDT << New Column("Data Type",
	Formula("Dose Response")
);
Column(titerDT,"Data Type")<<deleteformula();


titerConcat = dt_titer << Concatenate(titerDT);
Close(dt_titer,nosave);
titerConcat << Set Name("Titer Optimization_Titer Check");

Column(titerConcat,"Ord(conjugateTiter)") << Set Formula(Round(:Name("conjugateTiter"),3));
Column(titerConcat,"Ord(conjugateTiter)") << delete formula();
Column(titerConcat,"Ord(conjugateTiter)") << Data Type("Character");

For(i=1, i<= nrow(titerConcat),i++,
	Row State(i) = combine states(Marker State(0),Color State(0));
);

For(i=1, i<=nitems(titerList),i++,
	rowMtrx = titerConcat << get rows where(:Name("Ord(conjugateTiter)") == titerList[i]);
	For(j=1,j<=nrow(rowMtrx),j++,
		Row State(rowMtrx[j]) = Marker State(i + 3)
	)
);

//Not correct if several response Titers are run
Summarize(titerConcat, a = by(:Name("Dose")), c = Mean(:Name("Dose SD(Dose)")));
fifteenLocale = Contains(a, "15");
sixtyLocale = Contains(a, "60");
If(c[fifteenLocale] <= 1.5 & c[sixtyLocale] <=6,
	responseCheck = "Pass"
,
	responseCheck = "Fail"
);

biv1 = titerConcat << Bivariate(
	Y( :Name( "Dose SD (Dose)" ) ),
	X( :Name("Dose") ),
	SendToReport(
		Dispatch(
			{},
			"2",
			ScaleBox,
			{Min( 0.1 ), Max( 10 ), Inc( 1 ), Minor Ticks( 1 )}
		),
		Dispatch(
			{},
			"1",
			ScaleBox,
			{Min( 0 ), Max( 100 ), Inc( 10 ), Minor Ticks( 1 )}
		),
		Dispatch(
			{},
			"Bivar Plot",
			FrameBox,
			{Frame Size( 450, 368 ),
			Add Graphics Script(
				4,
				Description( "Precision Req" ),
				Pen Size( 2 ); 
				Pen Color( "blue" ); 
				Line( {0, 1.5}, {5, 1.5}, {9, 1}, {20, 1}, {50, 3}, {100, 5} ); 
				Pen Color( "red" ); 
				Line( {0, 1.5}, {15, 1.5}, {18, 1.7}, {25, 2.25}, {50, 5}, {100, 10} );
			), Row Legend(
				Name("Data Type"),
				Color( 1 ),
				//Color Theme( "Jet" ),
				Marker( 0 ),
				Marker Theme( "" ),
				Continuous Scale( 0 ),
				Reverse Scale( 0 ),
				Excluded Rows( 0 )
			)
			}
		)
	)
);

biv1 << Local Data Filter(
	Auto clear( 0 ),
	Add Filter(
		columns( :Name( "Ord(conjugateTiter)" ) ),
		Where( :Name( "Ord(conjugateTiter)" ) == titerList[1] ),
		Display( :Name( "Ord(conjugateTiter)" ), Size( 160, 225 ), List Display ),
		//Order By Count( :Name( "Ord(conjugateTiter)" ) )
	)
);