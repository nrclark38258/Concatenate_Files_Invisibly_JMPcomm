[main_vars]
; NOTE: when the .py brings in the config.ini file, all variables will be lowercase, so .py should use lowercase versions of these if they are camelcase in the file

; lib_tag based on version of libraries used in testing the planned release. Update as necessary.
lib_tag = 23.5.0
; tagSuffix is a boolean (1 / 0) on whether the final .jmpaddin filename contains the tool tag for the version ... files that are used with autoupdate features are not named based on their version (1 ends with tool tag, 0 would not[only on PROD releases])
tagsuffix = 0

; prod_path is the location of where the production release .jmpaddin will be placed (current system places on remote runner that is sync'd to final location) [prod releases will archive old prod releases]
; finalProdPath is the final production location the file will live in once syncing happens (gets populated in publistfile)
; finalprodpath is placed into the publishedaddin file while prod_path is where the .jmpaddin file is saved post building
prod_path = C:/NotRandallTheBuilderOfAddins/Production_Deployment/
finalprodpath = R:/JMP User Group/JMP Addins/Production_Deployment/

; test_path is the location of where any testing release .jmpaddin will be placed (current system places on remote runner that is sync'd to final location)
test_path = C:/NotRandallTheBuilderOfAddins/Testing_Deployment/

; pubListFilename is the filename of the published addin file
; publListPath is the path to the final published addin information (runing list of addins that have been published)
; publListMiddle is the path / name to an intermediary created to facilite updates to the published addin information. (no file needs to be present for the tool to work. the file will be created)
; publistmiddle represents the 'meat' of the information and the .py has leadin and training code to append to make a working .jsl file
; finalPubPath is the final production location of the published addin information (after syncing happens)
; finalpubpath will be written into the custommeta file 
publistfilename = jmpdatum_publishedAddins.jsl
publistpath = C:/NotRandallTheBuilderOfAddins/Production_Deployment/MetaData/
publistmiddle = C:/NotRandallTheBuilderOfAddins/Production_Deployment/MetaData/pubaddinMiddle.txt
finalpubpath = R:/JMP User Group/JMP Addins/Production_Deployment/MetaData/

; addinID is the ID for the addin which is how JMP recoginizes it. it is also present in the addin.def and .jmpcust files
; addinName is the name for the addin which is places in the addin.def and .jmpcust files
; author is useful but not necessary metadata
addinid = com.idexx.nclark.concatenate_files_invisibly
addinname = Concatenate_Files_Invisibly
author = ""

[external_files]
; ***how to write to get the file you want within the libraries repo***
; arbitary number = name of the file you want exactly as it's written in the libraries repo, name to call the file in the addin, folder to add it into the addin
; empty folder location defaults to the main folder of the addin.
1 = jmpDATUM_Utilities.jsl, jmpdatum_utilities.jsl, Utilities