//////CRP SlideCal Tool jslHamcrest Unit Tests//////
crpCalUT = New Namespace("crpSlideCal");
crpCalUT:saveFile = 0;
crpCalUT:savePath = "C:\Users\nclark\Box\NRC_Experiments\NRC-00260b_121120_CRPcalCurve-SlideCal_swt-T6-0014228-00_v1.1x Validation\Validation Files/";
crpCalUT:reportName = "00_swt-T6-0014228-00_v1.1_UnitTestReport.txt";

crpCalUT:toolPath = "D:\JSL Development\Official JMP Addin Working\IDEXX SlideCal Tools\CalibCalc_CRP_swt-T6-0014228-00\CRPcalibCalculation.jsl";

Match(crpCalUT:saveFile,
	1, ut global reporter = New Object("ut collecting reporter")
);

crpCalUT:saveTable = Function({tableName,savePath,fileName,testingBOOL = 0,journalSave = 0},{default Local},
	If( testingBOOL == 1,
		If(journalSave == 0,
			tableName << SaveAs(savePath||fileName)
			,
			tableName << Save Journal(savePath||fileName)
		)
		,
		Empty()
	);
	Return(1);
);

/////////////////////////////////////////////////////////////
//                                                         //
//          TEST CASES                                     //
//                                                         //
/////////////////////////////////////////////////////////////

tblExclude = ut test case("Table Exclusions")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\beckExclusionTest.jmp",private);
		tableName2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\beckOutlierTest.jmp", private);
		tableName3 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patientExclusionTest.jmp", private);
		tableName4 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\FullFile_clearRowState.jmp", private);
		tableName5 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patVarExclusionTest.jmp", private);
		tableName6 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\level3ExclusionTest.jmp", private);
		tableName7 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\level3ExclusionTest_colSelected.jmp", private);
		tableName8 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patientExclusionTest_iterateOutlier.jmp", private);
		tableName9 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patientExclusionTest_noExclusions.jmp", private);
		tableName10 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patientExclusionTest_iteratesOnly4x.jmp", private);
		));
		
subsets = ut test case("Clean Subset")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\FullFile.jmp", private)
		));
		
fullMonty = ut test case("Full Script")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\FullFile.jmp", private);
		tableName1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\hookPassFullFile.jmp", private);
		tableName2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\FullFile_patCountFail.jmp", private);
		));
		
calData = ut test case("Cal Table")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\SubsetFull.jmp", private);
		tableName1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\SubsetFull_lin.jmp", private);
		tableName2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\SubsetFull_FinalPreHook.jmp", private);
		tableName3 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\DynamicColRemoval.jmp", private)
		));
		
hookTests = ut test case("Hook Calculator")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\FullFile.jmp", private);
		tableName2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\SubsetFull_HookCalc.jmp", private);
		tableName3 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\hookPassFullFile.jmp", private)
		));

cellColor = ut test case("Cell Color Checks")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\CellColorChecks.jmp", private);
		));

coeffTbl = ut test case("Coefficient Table")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		tableName = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\SubsetFull.jmp", private);
		));

arSD = ut test case("ARSD Checks")
	<< Setup(Expr(
		include(crpCalUT:toolPath);
		));

patCountError = ut test case("Patient Count and Cal Error")
	<< Setup(Expr(
		include(crpCalUT:toolPath);

		tableName1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\IDEXX_SlideCal_Tools\CalibCalc_CRP_swt-T6-0014228-00_UT\Files\patientExclusionTest_iterateOutlier.jmp", private);
		));

/////////////////////////////////////////////////////////////
//                                                         //
//          UNIT TESTS                                     //
//                                                         //
/////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////
		//          Table Exclusions                               //
		/////////////////////////////////////////////////////////////

ut test(tblExclude,"Beckman < 0.5 & > 9.0_single decimal_and no panel exclude",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath,"te_t1_Beckman < 0.5 & > 9.0_single decimal_and no panel exclude_pre.jmp",crpCalUT:saveFile);
		
		beckmanOutlier(tableName1);
		output = tableName1 << get rows where(excluded(rowstate(row()))== 1);
		
		ut assert that(Expr(output), ut equal to([2, 16]));
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath,"te_t1_Beckman < 0.5 & > 9.0_single decimal_and no panel exclude_post.jmp",crpCalUT:saveFile);
	)
);

ut test(tblExclude,"Beckman < 0.5 & > 9.0_exclusion notes",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "te_t1_Beckman < 0.5 & > 9.0_exclusion notes_pre.jmp",crpCalUT:saveFile);
		
		actual = tableName1 << get rows where(:Beckman Result Average < 0.5 | :Beckman Result Average > 9.0);
		beckmanOutlier(tableName1);
				
		ut assert that(Expr(tableName1:Name("Exclusion Notes")[2]), ut equal to("{> 9.0 OR < 0.5}"));
		ut assert that(Expr(tableName1:Name("Exclusion Notes")[16]), ut equal to("{> 9.0 OR < 0.5}"));
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "te_t1_Beckman < 0.5 & > 9.0_exclusion notes_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Beckman Outlier exclude & exclusion notes & Mixed exclude",
	Expr(
		
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "te_t2_Beckman Outlier exclude & exclusion notes & Mixed exclude_pre.jmp",crpCalUT:saveFile);
			
		output = tableName2 << get rows where(excluded(rowstate(row())) == 1);
		beckmanOutlier(tableName2);
		output1 = tableName2 << get rows where(excluded(rowstate(row())) == 1);
		
		ut assert that(Expr(contains(output,46)), ut equal to(0));
		ut assert that(Expr(contains(output,47)), ut equal to(0));
		ut assert that(Expr(contains(output,48)), ut equal to(0));
		ut assert that(Expr(contains(output1,46)), ut greater than(1));
		ut assert that(Expr(contains(output1,47)), ut greater than(1));
		ut assert that(Expr(contains(output1,48)), ut greater than(1));
		ut assert that(Expr(tableName2:Name("Exclusion Notes")[4]), ut equal to("{> 9.0 OR < 0.5}{Beckman Outlier}"));
		ut assert that(Expr(tableName2:Name("Exclusion Notes")[46]), ut equal to("{Beckman Outlier}"));
		ut assert that(Expr(tableName2:Name("Exclusion Notes")[47]), ut equal to("{Beckman Outlier}"));
		ut assert that(Expr(tableName2:Name("Exclusion Notes")[48]), ut equal to("{Beckman Outlier}"));
		
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "te_t2_Beckman Outlier exclude & exclusion notes & Mixed exclude_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Overall Patient Exclusion & Notes",
	Expr(
		
		crpCalUT:saveTable(tableName3,crpCalUT:savePath, "te_t3_Overall Patient Exclusion & Notes_pre.jmp",crpCalUT:saveFile);
		
		output = tableName3 << get rows where(excluded(rowstate(row())) == 1);
		patientOutlier(tableName3);
		output1 = tableName3 << get rows where(excluded(rowstate(row())) == 1);
		
		ut assert that(Expr(contains(output,126)), ut equal to(0));
		ut assert that(Expr(contains(output,127)), ut equal to(0));
		ut assert that(Expr(contains(output,128)), ut equal to(0));
		ut assert that(Expr(contains(output1,126)), ut greater than(0));
		ut assert that(Expr(contains(output1,127)), ut greater than(0));
		ut assert that(Expr(contains(output1,128)), ut greater than(0));
		ut assert that(Expr(tableName3:Name("Exclusion Notes")[126]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName3:Name("Exclusion Notes")[127]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName3:Name("Exclusion Notes")[128]), ut equal to("{Patient Outlier}"));
		
		crpCalUT:saveTable(tableName3,crpCalUT:savePath, "te_t3_Overall Patient Exclusion & Notes_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Patient Exclusion & Notes_single exclude points",
	Expr(
		
		crpCalUT:saveTable(tableName8,crpCalUT:savePath, "te_t8_Overall Patient Exclusion & Notes_single exclude points_pre.jmp",crpCalUT:saveFile);
		
		output = tableName8 << get rows where(excluded(rowstate(row())) == 1);
		patientOutlier(tableName8);
		output1 = tableName8 << get rows where(excluded(rowstate(row())) == 1);
		
		ut assert that(Expr(contains(output,93)), ut equal to(0));
		ut assert that(Expr(contains(output,164)), ut equal to(0));
		ut assert that(Expr(contains(output1,93)), ut greater than(0));
		ut assert that(Expr(contains(output1,164)), ut greater than(0));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[93]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[164]), ut equal to("{Patient Outlier}"));
		
		crpCalUT:saveTable(tableName8,crpCalUT:savePath, "te_t8_Overall Patient Exclusion & Notes_single exclude points_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Patient Exclusion & Notes_iterative exclusion",
	Expr(
		
		crpCalUT:saveTable(tableName8,crpCalUT:savePath, "te_t8_Overall Patient Exclusion & Notes_iterative exclusion_pre.jmp",crpCalUT:saveFile);
		
		output = tableName8 << get rows where(excluded(rowstate(row())) == 1);
		patientOutlier(tableName8);
		output1 = tableName8 << get rows where(excluded(rowstate(row())) == 1);
		
		ut assert that(Expr(output), ut n items(0));
		ut assert that(Expr(output1), ut equal to([33, 70, 71, 78, 80, 83, 84, 85, 93, 95, 109, 136, 138, 141, 164]));

		ut assert that(Expr(tableName8:Name("Exclusion Notes")[33]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[70]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[71]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[78]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[80]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[83]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[84]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[85]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[93]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[95]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[109]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[136]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[138]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[141]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName8:Name("Exclusion Notes")[164]), ut equal to("{Patient Outlier}"));
		
		crpCalUT:saveTable(tableName8,crpCalUT:savePath, "te_t8_Overall Patient Exclusion & Notes_iterative exclusion_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Patient Exclusion & Notes_iteration stops after 4",
	Expr(
		//this table would actually require 6 iterations to get all the outliers
		crpCalUT:saveTable(tableName10,crpCalUT:savePath, "te_t10_Overall Patient Exclusion & Notes_iteration stops after 4_pre.jmp",crpCalUT:saveFile);
		
		output = tableName10 << get rows where(excluded(rowstate(row())) == 1);
		patientOutlier(tableName10);
		output1 = tableName10 << get rows where(excluded(rowstate(row())) == 1);
		
		ut assert that(Expr(output), ut n items(0));
		ut assert that(Expr(output1), ut equal to([33, 71, 72, 78, 80, 84, 85, 93, 109, 136, 138, 141, 164]));

		ut assert that(Expr(tableName10:Name("Exclusion Notes")[33]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[71]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[72]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[78]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[80]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[84]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[85]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[93]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[109]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[136]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[138]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[141]), ut equal to("{Patient Outlier}"));
		ut assert that(Expr(tableName10:Name("Exclusion Notes")[164]), ut equal to("{Patient Outlier}"));
		
		crpCalUT:saveTable(tableName10,crpCalUT:savePath, "te_t10_Overall Patient Exclusion & Notes_iteration stops after 4_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Patient Exclusion_no Patient Exclusions",
	Expr(
		//table has all outliers pre-removed so there are no outliers to be found
		crpCalUT:saveTable(tableName9,crpCalUT:savePath, "te_t9_Overall Patient Exclusion_no Patient Exclusions_pre.jmp",crpCalUT:saveFile);
		
		output = tableName9 << get rows where(excluded(rowstate(row())) == 1);
		patientOutlier(tableName9);
		output1 = tableName9 << get rows where(excluded(rowstate(row())) == 1);
		Summarize(tableName9,a = By(:"Exclusion Notes"n));
		
		ut assert that(Expr(output), ut n items(0));
		ut assert that(Expr(output1), ut n items(0));
		
		ut assert that(Expr(Contains(a,"{Patient Outlier}")), ut equal to(0));
		
		crpCalUT:saveTable(tableName9,crpCalUT:savePath, "te_t9_Overall Patient Exclusion_no Patient Exclusions_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude,"Closing of private tables_patientOutlier",
	Expr(
		
		//crpCalUT:saveTable(tableName3,crpCalUT:savePath, "te_t3_Overall Patient Exclusion & Notes_pre.jmp",crpCalUT:saveFile);
		
		patientOutlier(tableName3);
		
		allTables = find all(data tables,project(0));
		
		for(i=1,i<=n items(allTables),i++,
			if(char(allTables[i]) == "Scriptable[]", allTables[i] = allTables[i]<<get name,
				allTables[i]=(allTables[i]<<get data table)<<get name
			)
		);
		//show(allTables);
		
		ut assert that(Expr(Contains(allTables,"patientExclusionTest By (Sample id)")), ut equal to(0));
		ut assert that(Expr(Contains(allTables,"Subset of patientExclusionTest")), ut equal to(0));
		ut assert that(Expr(Contains(allTables,"Subset of patientExclusionTest By (Sample id)")), ut equal to(0));
		
		//crpCalUT:saveTable(tableName3,crpCalUT:savePath, "te_t3_Overall Patient Exclusion & Notes_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(tblExclude, "Exclusions of Beckman and Patient Outliers",
	Expr(
		
		crpCalUT:saveTable(tableName4,crpCalUT:savePath, "te_t4_Exclusions of Beckman and Patient Outliers_pre.jmp",crpCalUT:saveFile);
		
		beckmanOutlier(tableName4);
		patientOutlier(tableName4);
		subTble = subsetNoExcluded(tableName4);
		
		summarize(subTble, subIDs = by(:Sample id));
		
		ut assert that(Expr(subIDs), ut equal to({"3", "4", "5", "6", "7", "8", "9", "10", "12", "12B", "13", "14", "15", "16", "17",
"18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31",
"32", "33", "34", "35", "36", "38", "39", "40", "41", "43", "46", "47", "50"}));

		crpCalUT:saveTable(subTble,crpCalUT:savePath, "te_t4_Exclusions of Beckman and Patient Outliers_post.jmp",crpCalUT:saveFile);

	)
);

ut test(tblExclude, "Exclusions of Variable Patients",
	Expr(
		
		crpCalUT:saveTable(tableName5,crpCalUT:savePath, "te_t5_Exclusions of Variable Patients_pre.jmp",crpCalUT:saveFile);
		
		patientVariance(tableName5);
		
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[1]), ut equal to("{> 9.0 OR < 0.5}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[2]), ut equal to("{> 9.0 OR < 0.5}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[3]), ut equal to("{> 9.0 OR < 0.5}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[4]), ut equal to("{Beckman Outlier}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[5]), ut equal to("{Beckman Outlier}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[6]), ut equal to("{Beckman Outlier}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[7]), ut equal to("{Patient Variance}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[8]), ut equal to("{Patient Variance}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[9]), ut equal to("{Patient Variance}"));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[10]), ut equal to(""));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[11]), ut equal to(""));
		ut assert that(Expr(tableName5:Name("Exclusion Notes")[12]), ut equal to(""));

		ut assert that(Expr(tableName5 << get rows where(excluded(rowstate(row()))== 1)), ut equal to([1,2,3,4,5,6,7,8,9]));
		
		crpCalUT:saveTable(tableName5,crpCalUT:savePath, "te_t5_Exclusions of Variable Patients_post.jmp",crpCalUT:saveFile);

	)
);

ut test(tblExclude, "Level 3 passes SD",
	Expr(
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 passes SD_pre.jmp",crpCalUT:saveFile);
		
		level3Variance(tableName6);
		
		ut assert that(Expr(tableName6 << get rows where(excluded(rowstate(row()))== 1)), ut n rows(0));
		ut assert that(Expr(tableName6 << get rows where(:Name("Exclusion Notes") == "{L3 Gross Outlier}")), ut n rows(0));
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 passes SD_post.jmp",crpCalUT:saveFile);
	)
);

ut test(tblExclude, "Level 3 fails SD_no gross outliers",
	Expr(
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 fails SD_no gross outliers_pre.jmp",crpCalUT:saveFile);
		
		tableName6:AR[12] = 1.2;
		level3Variance(tableName6);
		
		ut assert that(Expr(tableName6 << get rows where(excluded(rowstate(row()))== 1)), ut n rows(0));
		ut assert that(Expr(tableName6 << get rows where(:Name("Exclusion Notes") == "{L3 Gross Outlier}")), ut n rows(0));
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 fails SD_no gross outliers_post.jmp",crpCalUT:saveFile);
	)
);

ut test(tblExclude, "Level 3 fails SD_two gross outliers",
	Expr(
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 fails SD_two gross outliers_pre.jmp",crpCalUT:saveFile);
		
		tableName6:AR[12] = 12;
		tableName6:AR[15] = 6;
		level3Variance(tableName6);
		
		ut assert that(Expr(tableName6 << get rows where(excluded(rowstate(row()))== 1)), ut equal to([12, 15]));
		ut assert that(Expr(tableName6 << get rows where(:Name("Exclusion Notes") == "{L3 Gross Outlier}")), ut equal to([12, 15]));
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 fails SD_two gross outliers_post.jmp",crpCalUT:saveFile);
	)
);

ut test(tblExclude, "Level 3 fails SD_3 gross outliers",
	Expr(
	
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t6_Level 3 fails SD_3 gross outliers_pre_post.jmp",crpCalUT:saveFile);
		
		tableName6:AR[12] = 12;
		tableName6:AR[15] = 6;
		tableName6:AR[18] = 6;
		closeModal = Function( {timeout},
			s=Schedule(
				timeout,
				If(current window() << get window title == "Level 3, too many outliers",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);
			)
		);
		closemodal(2);
		
		ut assert that(Expr(level3Variance(tableName6)), ut throws(ut anything()));
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Error Dialog Executed\!""));
		
		s << clear schedule;
        s << Close;
	)
);

ut test(tblExclude, "Level 3 works when columns selected",
	Expr(
		
		crpCalUT:saveTable(tableName6,crpCalUT:savePath, "te_t7_Level 3 works when columns selected_pre_post.jmp",crpCalUT:saveFile);
		
		closeModal = Function( {timeout},
			s=Schedule(
				timeout,
				//Show(current window() << get window title);
				If(current window() << get window title == "Level 3, too many outliers",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);
			)
		);
		wait(0.1);
		closemodal(.5);
		
		ut assert that(Expr(level3Variance(tableName7)), ut no throw());
		wait(1);
		log = GetLog(-1);
		ut assert that(Expr(log[1]), ut equal to("\!"Dialog Not Executed\!""));
		
		//s << clear schedule;
        //s << Close;
	)
);

		/////////////////////////////////////////////////////////////
		//          Clean Subset                                   //
		/////////////////////////////////////////////////////////////

ut test(subsets,"Patients with no excluded data",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"sub_t_Patients with no excluded data_pre.jmp",crpCalUT:saveFile);
		
		toteRow = nrow(tableName);
		panelRow = nrow(tableName << get rows where(IsMissing(Num(substr(:Sample id,1,1)))));
		excludeRow = nrow(tableName << get rows where(excluded(rowstate(row()))== 1));
		expectedRow = toteRow - excludeRow - panelRow;
		
		subTable = subsetNoExcluded(tableName);
		
		ut assert that(Expr(nrow(subTable)), ut equal to(expectedRow));
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"sub_t_Patients with no excluded data_post.jmp",crpCalUT:saveFile);
		
	)
);

		/////////////////////////////////////////////////////////////
		//          Full Script                                    //
		/////////////////////////////////////////////////////////////

ut test(fullMonty,"Creates Weight Column start value 1",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"fm_t_Creates Weight Column start value 1_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		dt = DataTable("CRP_Lot720020_Cal Table");
		Try(IsScriptable(Column(dt,"Weight"));worked=1,worked = 0);
		rows = dt:weight << get as matrix;
		truncRows = rows[1::nrow(rows)-4];
		
		ut assert that(Expr(worked), ut equal to(1));
		ut assert that(Expr(Mean(truncRows)), ut approx(1,{Relative Epsilon(1e-6)}));
		
		crpCalUT:saveTable(dt,crpCalUT:savePath,"fm_t_Creates Weight Column start value 1_post.jmp",crpCalUT:saveFile);
	)
);

ut test(fullMonty,"Correct 1st Cubic with Col Name",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"fm_t_Correct 1st Cubic with Col Name_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		actual = char(Column(subTable,"Predicted_2;6.3;6.75") << get formula);
		substituteinto(actual,"^","\!"^\!"");
				
		expected = "0.334051681637055 + 0.169796459042238 * :Beckman Result Average + -0.0216237628676744 * :Beckman Result Average \!"^\!" 2 + 0.0010437049107861 * :Beckman Result Average \!"^\!" 3";
		
		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath,"fm_t_Correct 1st Cubic with Col Name_post.jmp",crpCalUT:saveFile);
	)
);

ut test(fullMonty,"Adding Beckman 2;6.3;6.75;8.3;9.0;10 values",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"fm_t_Adding Beckman 2;6.3;6.75;8.3;9.0;10 values_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		beckMtrx = subTable:Name("Beckman Result Average") << get as matrix;
		wtMtrx = subTable:Name("Weight") << get as matrix;
		
		ut assert that(Expr(beckMtrx[nrow(beckMtrx)-5::nrow(beckMtrx)]), ut equal to([2,6.3,6.75,8.3,9.0,10]));
		ut assert that(Expr(wtMtrx[nrow(wtMtrx)-5::nrow(wtMtrx)]), ut any of({[1,1,1,6,6,25],[1,1,1,10,10,25]}));
		
		ut assert that(Expr(subTable << get rows where(marker of(rowstate(row()))== 12)), ut equal to([125,126,127,128,129,130]));
		ut assert that(Expr(subTable << get rows where(color of(rowstate(row()))== 5)), ut equal to([125,126,127,128,129,130]));
		ut assert that(Expr(subTable << get rows where(color of(rowstate(row()))== 32)), ut equal to(
			[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]
		));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath,"fm_t_Adding Beckman 2;6.3;6.75;8.3;9.0;10 values_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Expected non-centered Linear eqn",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Expected non-centered Linear eqn_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		actual = char(subTable:Name("Predicted_8.3;9") << get formula);
		expected = "0.497360434199743 + 0.0490693766686903 * :Beckman Result Average";
		
		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Expected non-centered Linear eqn_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Calibration AR formula Col",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Calibration AR formula Col_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		rowNum1 = subTable:Name("Calibration AR")[1];
		rowBefore2 = subTable:Name("Calibration AR")[nrow(subTable)-6]; 
		row2 = subTable:Name("Calibration AR")[nrow(subTable)-5];
		row6_3 = subTable:Name("Calibration AR")[nrow(subTable)-4];
		row7_5 = subTable:Name("Calibration AR")[nrow(subTable)-3];
		row8_3 = subTable:Name("Calibration AR")[nrow(subTable)-2];
		row9 = subTable:Name("Calibration AR")[nrow(subTable)-1];
		row10 = subTable:Name("Calibration AR")[nrow(subTable)];
		
		ut assert that(Expr(subTable:Name("Calibration AR")[1]), ut approx(0.44521249,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-6];), ut approx(0.90089634,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-5];), ut approx(0.59549918,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-4];), ut approx(0.80649750,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-3];), ut approx(0.81593326,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-2];), ut approx(0.90463626,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Calibration AR")[nrow(subTable)-1];), ut approx(0.93898482,{Relative Epsilon(1e-6)}));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Calibration AR formula Col_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Expected non-centered Cubic eqn with interpolated data",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Expected non-centered Cubic eqn with interpolated data_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		actual = char(subTable:Name("Predicted_10") << get formula);
		substituteinto(actual,"^","\!"^\!"");
		
		expected = "0.323188897229493 + 0.181507490753479 * :Beckman Result Average + -0.0250898821408593 * :Beckman Result Average \!"^\!" 2 + 0.00134105397127025 * :Beckman Result Average \!"^\!" 3";
		
		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Expected non-centered Cubic eqn with interpolated data_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Hook Test Fails",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Hook Test Fails_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		
		ut assert that(Expr(subTable:Name("Calibration AR")[130]), ut approx(0.969394561724073,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(get_cell_color( subTable, "Calibration AR", 130 )), ut equal to(3));
		ut assert that(Expr(subTable:Name("Weight")[128]), ut approx(10,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Weight")[129]), ut approx(10,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 128 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 129 )), ut equal to(3));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Hook Test Fails_post.jmp",crpCalUT:saveFile);
	)
);

ut test(fullMonty,"Hook Test Fails_cell values and colors",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Hook Test Fails_cell values and colors_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		
		ut assert that(Expr(subTable:Name("Calibration AR")[130]), ut approx(0.969394561724073,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(get_cell_color( subTable, "Calibration AR", 130 )), ut equal to(3));
		ut assert that(Expr(subTable:Name("Weight")[128]), ut approx(10,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Weight")[129]), ut approx(10,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 128 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 129 )), ut equal to(3));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Hook Test Fails_cell values and colors_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Hook Test Passes_cell values and colors",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "fm_t1_Hook Test Passes_cell values and colors_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName1);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		
		ut assert that(Expr(subTable:Name("Calibration AR")[130]), ut missing());
		ut assert that(Expr(get_cell_color( subTable, "Calibration AR", 130 )), ut equal to(-1));
		ut assert that(Expr(subTable:Name("Weight")[128]), ut approx(6,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(subTable:Name("Weight")[129]), ut approx(6,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 128 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( subTable, "Weight", 129 )), ut equal to(-1));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t1_Hook Test Passes_cell values and colors_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Hook Test Fails_Final Cubic Formula",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Hook Test Fails_Final Cubic Formula_pre.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);
		subTable = Datatable("CRP_Lot720020_Cal Table");
		actual = char(subTable:Name("Predicted_Final") << get formula);
		substituteinto(actual,"^","\!"^\!"");
		expected = "0.332705265383456 + 0.173218722816549 * :Beckman Result Average + -0.0232751647900653 * :Beckman Result Average \!"^\!" 2 + 0.00123421170118528 * :Beckman Result Average \!"^\!" 3";

		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(subTable,crpCalUT:savePath, "fm_t_Hook Test Fails_Final Cubic Formula_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Final Graph Remains Open",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Final Graph Remains Open_pre_post.jmp",crpCalUT:saveFile);
		
		calibrate(tableName);

		ut assert that(Expr(IsScriptable(biv)), ut equal to(1));
		
	)
);

ut test(fullMonty,"Creating Coefficient Table_hookFail",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Creating Coefficient Table_hookFail_pre.jmp",crpCalUT:saveFile);
		
		calTbls = calibrate(tableName);
		table = calTbls[2];
				
		ut assert that(Expr(table << get name), ut equal to("CRP_Lot720020_Cal Coeffs"));
		ut assert that(Expr(Column(table,1)[1]), ut equal to(17));
		ut assert that(Expr(Column(table,2)[1]), ut equal to(720020));
		ut assert that(Expr(Column(table,3)[1]), ut equal to(99));
		ut assert that(Expr(Column(table,4)[1]), ut equal to(1));
		ut assert that(Expr(Column(table,5)[1]), ut approx(0.332705265383456,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,6)[1]), ut approx(0.173218722816549,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,7)[1]), ut approx(-0.0232751647900653,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,8)[1]), ut approx(0.00123421170118528,{Relative Epsilon(1e-6)}));
		
		crpCalUT:saveTable(table,crpCalUT:savePath, "fm_t12_Creating Coefficient Table_hookFail_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty,"Creating Coefficient Table_hookPass",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "fm_t1_Creating Coefficient Table_hookPass_pre.jmp",crpCalUT:saveFile);
		
		calTbls = calibrate(tableName1);
		table = calTbls[2];
				
		ut assert that(Expr(table << get name), ut equal to("CRP_Lot720020_Cal Coeffs"));
		ut assert that(Expr(Column(table,1)[1]), ut equal to(17));
		ut assert that(Expr(Column(table,2)[1]), ut equal to(720020));
		ut assert that(Expr(Column(table,3)[1]), ut equal to(99));
		ut assert that(Expr(Column(table,4)[1]), ut equal to(1));
		ut assert that(Expr(Column(table,5)[1]), ut approx(0.323188897229493,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,6)[1]), ut approx(0.181507490753479,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,7)[1]), ut approx(-0.0250898821408593,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,8)[1]), ut approx(0.00134105397127025,{Relative Epsilon(1e-6)}));
		
		crpCalUT:saveTable(table,crpCalUT:savePath, "fm_t1_Creating Coefficient Table_hookPass_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty, "Removal of unecessary columns",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "fm_t1_Removal of unecessary columns_pre.jmp",crpCalUT:saveFile);
		
		calTbls = calibrate(tableName1);
		table = calTbls[1];
		colsToKeep2 = {"Time Run Started", "DateTime", "IVLS RunID", "Lot", "Assay", "Chem Type", "Instrument ID", "Sample id", "Beckman Rep 1", "Beckman Rep 2", "Beckman Result Average", "AR", "Weight", "Notes", "Exclusion Notes", "Predicted_2;6.3;6.75", "Predicted_8.3;9", "Calibration AR", "Predicted_10", "Predicted_Final"};
		
		ut assert that(Expr(Sort List(table << Get column names(string))), ut sorted(Sort List(colsToKeep2)));
		
		crpCalUT:saveTable(table,crpCalUT:savePath, "fm_t1_Removal of unecessary columns_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(fullMonty, "Creating Journal with Graph",
	Expr(
	
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "fm_t1_Creating Journal with Graph_pre.jmp",crpCalUT:saveFile);
		
		calTbls = calibrate(tableName1);
		//table = calTbls[1];
			
		ut assert that(Expr(IsScriptable(here:jrn)), ut equal to(1));
		ut assert that(Expr(here:jrn << get window title), ut equal to("Journal: CRP_Lot720020_Cal Graph"));
		ut assert that(Expr(here:jrn[OutlineBox(1)] << get title), ut equal to("Bivariate Fit of Calibration AR By Beckman Result Average"));
		
		crpCalUT:saveTable(here:jrn,crpCalUT:savePath, "fm_t1_Creating Journal with Graph_post.jrn",crpCalUT:saveFile,1);
		
	)
);

ut test(fullMonty, "Patient Count Failure",
	Expr(
	
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "fm_t2_Patient Count Failure_pre.jmp",crpCalUT:saveFile);
		
		closeModal = Function( {timeout},
			s=Schedule(
				timeout,
				If(current window() << get window title == "Patient Exclusion Error",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);
			);
		);
		closemodal(10);
		
		ut assert that(Expr(calibrate(tableName2)), ut throws(ut anything()));
		log = GetLog(-2);
		
		ut assert that(Expr(log[1]), ut equal to("\!"Error Dialog Executed\!""));
		ut assert that(Expr(log[2]), ut equal to("\!"Too many patients excluded\!""));
		//ut assert that(Expr(checkOutput[1]), ut equal to(6));
		//ut assert that(Expr(checkOutput[2]), ut equal to(0));
		
		//s << clear schedule;
        //s << Close;
        
        crpCalUT:saveTable(tableName2,crpCalUT:savePath, "fm_t2_Patient Count Failure_post.jmp",crpCalUT:saveFile);
	)
);

ut test(fullMonty, "Patient Count Passing",
	Expr(
	
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Patient Count Passing_pre.jmp",crpCalUT:saveFile);
		
		closeModal = Function( {timeout},
			s=Schedule(
				timeout,
				If(current window() << get window title == "Patient Exclusion Error",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);
			);
		);
		closemodal(3);
		
		calTbls = calibrate(tableName);
		Wait(1);
		log = GetLog(-1);
		
		ut assert that(Expr(log[1]), ut equal to("\!"Dialog Not Executed\!""));
		//ut assert that(Expr(checkOutput[1]), ut equal to(6));
		//ut assert that(Expr(checkOutput[2]), ut equal to(0));
		
		//s << clear schedule;
        //s << Close;
        
        crpCalUT:saveTable(tableName,crpCalUT:savePath, "fm_t_Patient Count Passing_post.jmp",crpCalUT:saveFile);
	)
);

		/////////////////////////////////////////////////////////////
		//          Cal Table                                      //
		/////////////////////////////////////////////////////////////

ut test(calData,"1st Cubic_Expected non-centered Cubic eqn & graph open and closed",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"cd_t_1st Cubic_Expected non-centered Cubic eqn & graph open and closed_pre.jmp",crpCalUT:saveFile);
		
		cubicSave(tableName,"AR","AR");
		actual = char(tableName:Name("Predicted_AR") << get formula);
		substituteinto(actual,"^","\!"^\!"");

		expected = "0.335211856923531 + 0.168412323128574 * :Beckman Result Average + -0.0211977974121041 * :Beckman Result Average \!"^\!" 2 + 0.00101104994602895 * :Beckman Result Average \!"^\!" 3";
		
		ut assert that(Expr(actual), ut equal to(expected));
		ut assert that(Expr(IsScriptable(biv)), ut equal to(0));
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"cd_t_1st Cubic_Expected non-centered Cubic eqn & graph open and closed_post1.jmp",crpCalUT:saveFile);
		
		tableName << select rows(4) << exclude;
		cubicSave(tableName,"AR 2","AR",1);
		actual2 = char(tableName:Name("Predicted_AR 2") << get formula);
		substituteinto(actual2,"^","\!"^\!"");
		
		ut assert that(Expr(actual2), ut not (expected));
		ut assert that(Expr(IsScriptable(biv)), ut equal to(1));
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"cd_t_1st Cubic_Expected non-centered Cubic eqn & graph open and closed_post2.jmp",crpCalUT:saveFile);
		
	)
);

ut test(calData,"1st Cubic_Correct Naming of Column",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"cd_t_1st Cubic_Correct Naming of Column_pre.jmp",crpCalUT:saveFile);
		
		cubicSave(tableName,"2;6.3;7.5","AR");
		
		ut assert that(Expr(Column(tableName,ncol(tableName)) << get name), ut equal to("Predicted_2;6.3;7.5"));
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath,"cd_t_1st Cubic_Correct Naming of Column_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(calData,"Cal Linear_Expected non-centered Linear eqn",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "cd_t1_Cal Linear_Expected non-centered Linear eqn_pre.jmp",crpCalUT:saveFile);
		
		linearSave(tableName1);
		actual = char(tableName1:Name("Predicted_8.3;9") << get formula);
		expected = "0.496568500960333 + 0.0493826060700805 * :Beckman Result Average";
		
		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "cd_t1_Cal Linear_Expected non-centered Linear eqn_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(calData,"Cal Hook_Expected non-centered Cubic eqn with interpolated data",
	Expr(
		
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "cd_t2_Cal Hook_Expected non-centered Cubic eqn with interpolated data_pre.jmp",crpCalUT:saveFile);
		
		cubicSave(tableName2,"FinalPreHook","Calibration AR");
		actual = char(tableName2:Name("Predicted_FinalPreHook") << get formula);
		substituteinto(actual,"^","\!"^\!"");
		
		expected = "0.323549033572702 + 0.180915334684437 * :Beckman Result Average + -0.0248740550801434 * :Beckman Result Average \!"^\!" 2 + 0.00132448947666029 * :Beckman Result Average \!"^\!" 3";
		
		ut assert that(Expr(actual), ut equal to(expected));
		
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "cd_t2_Cal Hook_Expected non-centered Cubic eqn with interpolated data_post1.jmp",crpCalUT:saveFile);
		
		tableName2 << select rows(4) << exclude;
		cubicSave(tableName2,"FinalPreHook 2", "Calibration AR");
		actual2 = char(tableName2:Name("Predicted_FinalPreHook 2") << get formula);
		substituteinto(actual2,"^","\!"^\!"");
		
		ut assert that(Expr(actual2), ut not (expected));
		
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "cd_t2_Cal Hook_Expected non-centered Cubic eqn with interpolated data_post2.jmp",crpCalUT:saveFile);
		
	)
);

ut test(calData, "Removal of unecessary columns",
	Expr(
		
		crpCalUT:saveTable(tableName3,crpCalUT:savePath, "cd_t3_Removal of unecessary columns_pre.jmp",crpCalUT:saveFile);
		
		tableNameDupe = tableName3 << Subset(
			Selected Rows(0),
			Selected Columns(0),
			private
		);
		colsToKeep1 = {"Time Run Started","Beckman Rep 1","Predicted_2;6.3;6.75"};
		colsToKeep2 = {"Time Run Started", "DateTime", "IVLS RunID", "Lot", "Assay", "Chem Type", "Instrument ID", "Sample id", "Beckman Rep 1", "Beckman Rep 2", "Beckman Result Average", "AR", "Weight", "Notes", "Exclusion Notes", "Predicted_2;6.3;6.75", "Predicted_8.3;9", "Calibration AR", "Predicted_10", "Predicted_Final"};
		
		deleteExtraCols(tableName3,AssociativeArray(colsToKeep1));
		deleteExtraCols(tableNameDupe,AssociativeArray(colsToKeep2));
		
		ut assert that(Expr(Sort List(tableName3 << Get column names(string))), ut equal to(Sort List(colsToKeep1)));
		ut assert that(Expr(Sort List(tableNameDupe << Get column names(string))), ut sorted(Sort List(colsToKeep2)));
		
		crpCalUT:saveTable(tableName3,crpCalUT:savePath, "cd_t3_Removal of unecessary columns_post1.jmp",crpCalUT:saveFile);
		crpCalUT:saveTable(tableNameDupe,crpCalUT:savePath, "cd_t3_Removal of unecessary columns_post2.jmp",crpCalUT:saveFile);
		
	)
);

		/////////////////////////////////////////////////////////////
		//          Hook Calculator                                //
		/////////////////////////////////////////////////////////////

ut test(hookTests,"Hook Reurns fail and correct AR replacement",
	Expr(
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "ht_t1_Hook Reurns fail and correct AR replacement_pre_post.jmp",crpCalUT:saveFile);
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "ht_t2_Hook Reurns fail and correct AR replacement_pre_post.jmp",crpCalUT:saveFile);
		
		hookResult = hookCalc(tableName1,tableName2);
		
		ut assert that(Expr(hookResult[1]), ut equal to("Fail"));
		ut assert that(Expr(hookResult[2]), ut approx(0.969394561724073, {Relative Epsilon(1e-6)}));
	)
);

ut test(hookTests,"Hook Reurns pass and empty() AR replacement",
	Expr(
	
		crpCalUT:saveTable(tableName3,crpCalUT:savePath, "ht_t3_Hook Reurns pass and empty() AR replacement_pre_post.jmp",crpCalUT:saveFile);
		crpCalUT:saveTable(tableName2,crpCalUT:savePath, "ht_t2_Hook Reurns pass and empty() AR replacement_pre_post.jmp",crpCalUT:saveFile);
		
		hookResult = hookCalc(tableName3,tableName2);
		
		ut assert that(Expr(hookResult[1]), ut equal to("Pass"));
		ut assert that(Expr(hookResult[2]), ut missing());
	)
);

		/////////////////////////////////////////////////////////////
		//          Cell Color Checks                              //
		/////////////////////////////////////////////////////////////

ut test(cellColor,"Correct Colors Returned",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "cc_t_Correct Colors Returned_pre_post.jmp",crpCalUT:saveFile);
		
		ut assert that(Expr(get_cell_color( tableName, "None", 3 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( tableName, "One", 2 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( tableName, "One", 3 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "Many", 5 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( tableName, "Many", 7 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "Many", 9 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "All", 5 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "All", 7 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "All", 9 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "All but 1", 8 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "All but 1", 9 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( tableName, "Mixed", 5 )), ut equal to(3));
		ut assert that(Expr(get_cell_color( tableName, "Mixed", 7 )), ut equal to(-1));
		ut assert that(Expr(get_cell_color( tableName, "Mixed", 14 )), ut equal to(73));
		
	)
);

		/////////////////////////////////////////////////////////////
		//          Coefficient Table                              //
		/////////////////////////////////////////////////////////////

ut test(coeffTbl,"Creating Coefficient Table",
	Expr(
		
		crpCalUT:saveTable(tableName,crpCalUT:savePath, "ct_t_Creating Coefficient Table_pre.jmp",crpCalUT:saveFile);
	
		eqn = "0.323549033572667 + 0.180915334684467 * :Beckman Result Average + -0.0248740550801502 * :Beckman Result Average ^ 2 + 0.00132448947666073 * :Beckman Result Average ^ 3";
		table = createCoeffTable(tableName,eqn)[1];
		
		ut assert that(Expr(table << get name), ut equal to("CRP_Lot720020_Cal Coeffs"));
		ut assert that(Expr(Column(table,1)[1]), ut equal to(17));
		ut assert that(Expr(Column(table,2)[1]), ut equal to(720020));
		ut assert that(Expr(Column(table,3)[1]), ut equal to(99));
		ut assert that(Expr(Column(table,4)[1]), ut equal to(1));
		ut assert that(Expr(Column(table,5)[1]), ut approx(0.32354903,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,6)[1]), ut approx(0.18091533,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,7)[1]), ut approx(-0.0248740550801502,{Relative Epsilon(1e-6)}));
		ut assert that(Expr(Column(table,8)[1]), ut approx(0.00132449,{Relative Epsilon(1e-6)}));
		
		crpCalUT:saveTable(table,crpCalUT:savePath, "ct_t_Creating Coefficient Table_post.jmp",crpCalUT:saveFile);
		
	)
);

		/////////////////////////////////////////////////////////////
		//          ARSD Checks                                    //
		/////////////////////////////////////////////////////////////

ut test(arSD, "Pass/Fail limit tests on function_n=3",
	Expr(
		
		ut assert that(Expr(arSDtest(0.4,0.0192064558263984,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.55,0.0192064558263984,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.551,0.0192640751938776,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.65,0.0249683925743179,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.651,0.0250356151697103,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.849,0.0383456890574044,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.85,0.0384129116527968,3)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.851,0.0384129116527968,3)), ut equal to("Pass"));
		
		ut assert that(Expr(arSDtest(0.4,0.0193064558263984,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.55,0.0193064558263984,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.551,0.0193640751938776,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.65,0.0249783925743179,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.651,0.0251356151697103,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.849,0.0383556890574044,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.85,0.0384229116527968,3)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.851,0.0384229116527968,3)), ut equal to("Fail"));
	)
);

ut test(arSD, "Pass/Fail limit tests on function_n=18",
	Expr(
	
		ut assert that(Expr(arSDtest(0.4,0.0133264463118929,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.55,0.0133264463118929,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.551,0.0133664256508286,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.65,0.0173243802054608,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.651,0.0173710227675524,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.849,0.0266062500616942,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.85,0.0266528926237858,18)), ut equal to("Pass"));
		ut assert that(Expr(arSDtest(0.851,0.0266528926237858,18)), ut equal to("Pass"));
		
		ut assert that(Expr(arSDtest(0.4,0.0133265463118929,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.55,0.0133265463118929,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.551,0.0133665256508286,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.65,0.0173245802054608,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.651,0.0173715227675524,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.849,0.0266065500616942,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.85,0.0266529026237858,18)), ut equal to("Fail"));
		ut assert that(Expr(arSDtest(0.851,0.0266529026237858,18)), ut equal to("Fail"));
	)
);

		/////////////////////////////////////////////////////////////
		//          Patient Count and Cal Error                    //
		/////////////////////////////////////////////////////////////

ut test(patCountError,"Patient Counting_ignores Panel and fully excluded patients",
	Expr(
		//table has all outliers pre-removed so there are no outliers to be found
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Overall Patient Counting_pre.jmp",crpCalUT:saveFile);
		
		tableName1 << select where(:Sample id == "41") << exclude(1);
		tableName1 << select rows({20, 36, 27, 73}) << exclude(1);
		output = patientCount(tableName1);
		
		ut assert that(Expr(output), ut equal to (49));
		
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Overall Patient Counting_post.jmp",crpCalUT:saveFile);
		
	)
);

ut test(patCountError, "Three lost patients, limit 2",
	Expr(
	
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Three lost patients, limit 2_pre.jmp",crpCalUT:saveFile);
		
		tableName1 << select where(:Sample id == "50") << exclude(1);
		tableName1 << select rows({20, 36, 27, 73}) << exclude(1);
		startPat = patientCount(tableName1);
		limit = 2;
		
		closeModal = Function( {timeout},
			s=Schedule(
				timeout,
				If(current window() << get window title == "Patient Exclusion Error",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);
			);
		);
		closemodal(2);

		tableName1 << select where(:Sample id == "41" | :Sample id == "7" | :Sample id == "10") << exclude(1);		
		checkOutput = patExcludeCheck(tableName1,startPat,limit);
		log = GetLog(-1);

		ut assert that(Expr(log[1]), ut equal to("\!"Error Dialog Executed\!""));
		ut assert that(Expr(checkOutput[1]), ut equal to(3));
		ut assert that(Expr(checkOutput[2]), ut equal to(0));

		s << clear schedule;
        s << Close;
        
        crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Three lost patients, limit 2_post.jmp",crpCalUT:saveFile);
	)
);

ut test(patCountError, "Three lost patients, limit 5",
	Expr(
	
		crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Three lost patients, limit 5_pre.jmp",crpCalUT:saveFile);
		
		tableName1 << select where(:Sample id == "50") << exclude(1);
		tableName1 << select rows({20, 36, 27, 73}) << exclude(1);
		startPat = patientCount(tableName1);
		limit = 5;
		
		closeModal = Function( {timeout},
			
			s=Schedule(
				timeout,
				If(current window() << get window title == "Patient Exclusion Error",
					(current window() << xpath("//ButtonBox[text()='OK']")) << click;
					Print("Error Dialog Executed")
					,
					Print("Dialog Not Executed")
				);			
			);
			
		);
		wait(0.1);
		closemodal(.5);
		
		tableName1 << select where(:Sample id == "41" | :Sample id == "7" | :Sample id == "10") << exclude(1);
		checkOutput = patExcludeCheck(tableName1,startPat,limit);
		wait(1);
		log = GetLog(-1);
		
		ut assert that(Expr(log[1]), ut equal to("\!"Dialog Not Executed\!""));
		ut assert that(Expr(checkOutput[1]), ut equal to(3));
		ut assert that(Expr(checkOutput[2]), ut equal to(1));
		
		//s << clear schedule;
        //s << Close;
        
        crpCalUT:saveTable(tableName1,crpCalUT:savePath, "pc_t1_Three lost patients, limit 5_post.jmp",crpCalUT:saveFile);
	)
);

/////////////////////////////////////////////////////////////
//                                                         //
//          Finishing Off                                  //
//                                                         //
/////////////////////////////////////////////////////////////

Match(crpCalUT:saveFile,
	0, crpCalUT << delete,
	1, Print("now i am here");ut global reporter:save report(crpCalUT:savePath||crpCalUT:reportName); crpCalUT << delete;
);