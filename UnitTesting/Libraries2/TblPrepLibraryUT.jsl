//////Table Prep Library jslHamcrest Unit Tests//////
tpLibUT = New Namespace("TablePrepLibraryUnitTest");
tpLibUT:saveFile = 0;
tpLibUT:savePath = "C:/Users/nclark/desktop/TestUnitFiles/";
tpLibUT:reportName = "testReport.txt";

tpLibUT:toolPath = "D:\JSL Development\Official JMP Addin Working\Library Files2\AssayDev_TablePreparation2.jsl";
//baUT:toolPath = "R:\Systems_Chemistry_Engineering\Tools\Official JMP Addin Development\Official JMP Addin Working\Assay Development\Bile Acids\AR Calculator\RDBile_ARCalculation.jsl";

Match(tpLibUT:saveFile,
	1, ut global reporter = New Object("ut collecting reporter")
);

tpLibUT:tableCompare = Function({actual, expected},{default local},
	result = actual << Compare Data Tables(
		Compare with( expected ),
		Compare Table Properties,
		Compare Column Attributes and Properties,
		Compare Data,
		Show Difference Summary,
		Show Difference Plot
	);
	
	r = result << report;
	Return(r,result)
);

/////////////////////////////////////////////////////////////
//                                                         //
//          TEST CASES                                     //
//                                                         //
/////////////////////////////////////////////////////////////

nameChanges = ut test case("A_Renaming Columns")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\BasicNameChange.jmp",invisible); //needed to be invisible for the functions to work
		
	));
	
updateColNames = ut test case("B_Updating ColNames Function")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\NameChangeFunction.jmp",invisible);
	));
	
generalColumnWork = ut test case("C_General Column Work")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		
	));

wlStacking = ut test case("D_Wavelength Stack")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_All3Pairs.jmp",invisible); //needed to be invisible for the functions to work
		table2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_Only1Pair.jmp",invisible);
		table3 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_MisMatch.jmp",invisible);
		table4 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_NoCols.jmp",invisible);
		table5 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_DiffNums.jmp",invisible);
		table6 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\wl_Only2Pairs.jmp",invisible);
	));

uniqueIDs = ut test case("E_Unique Identifiers")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		table1 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\uniqueIDsSortCols1.jmp",invisible); //needed to be invisible for the functions to work
		table2 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\uniqueIDsSortCols2.jmp",invisible);
		table3 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\uniqueIDsSortCols3.jmp",invisible);
		table4 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\uniqueIDsNoCols.jmp",invisible);
		table5 = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\uniqueIDsSortWithSortCol.jmp",invisible);
	));

fullFuncionality = ut test case("F_TablePrepFunction")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		
	));
	
dateTimeTC = ut test case("G_DateTime Function")
	<<Setup(Expr(
		include(tpLibUT:toolPath);
		
	));

/////////////////////////////////////////////////////////////
//                                                         //
//          UNIT TESTS                                     //
//                                                         //
/////////////////////////////////////////////////////////////

	////////////////////////////////////////////////
	//          name change functions             //
	////////////////////////////////////////////////
tpLibUT:utGroup = "A";
tpLibUT:utGroupTest = 0;

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct1_5 TimeFromSampleDispense:sec OPS True",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Seconds from Dispense",
			"Timeseries time",
			"Timeseries Time",
			"Time :3",
			"Readings: Time Between Read and Dispense",
			"TYP3_TIME",
			"TIME_BTWN_READ_DISPENSE",
			"reads.time"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct1_5Test",
				Add Rows(3),
				New Column("placeholder",Numeric,Continuous,
					set values([0.1234598, 0.154891613461543, 1.3625484664654])
				)		
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct1_5(localTable,possCols[i],"y");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("TimeFromSampleDispense:sec"));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0.1234598, 0.154891613461543, 1.3625484664654]));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0.123460, 0.154892, 1.362548]));
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct1_5 TimeFromSampleDispense:sec OPS False",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Seconds from Dispense",
			"Timeseries time",
			"Timeseries Time",
			"Time :3",
			"Readings: Time Between Read and Dispense",
			"TYP3_TIME",
			"TIME_BTWN_READ_DISPENSE",
			"reads.time"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct1_5Test",
				Add Rows(3),
				New Column("placeholder",Numeric,Continuous,
					set values([0.1234598, 0.154891613461543, 1.3625484664654])
				)		
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct1_5(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("TimeFromSampleDispense:sec"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0.123460, 0.154892, 1.362548]));
			
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct2_7_15 15Call_CorrectRDs_withAssayCODE",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table = New Table( "funct2_7_15 15Call_CorrectRDs_withAssayCODE",
			Add Rows( 3 ),
			New Column( "Assay",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 40, 41, 42, 4] )
			),
			New Column( "Assay Type",
				Character(10),
				Set Values( {"GLU","NA","K","CL","SDMA"} )
			),
			New Column( "Response",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
			),
			private
		);
		funct2_7_15(table,"Response","y","n");
		
		ut assert that(Expr(table:ReflDens_avg[1]), ut approx(0.69897, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[2]), ut approx(137055.838, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[3]), ut approx(182741.117, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[4]), ut approx(228426.396, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[5]), ut approx(274111.67513, {Relative Epsilon( 1e-5 )} ));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct2_7_15 15Call_CorrectRDs_withAssayTYPE",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table = New Table( "funct2_7_15 15Call_CorrectRDs_withAssayTYPE",
			Add Rows( 3 ),
			New Column( "Assay Type",
				Character(10),
				Set Values( {"GLU","NA","K","CL","SDMA"} )
			),
			New Column( "Response",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
			),
			private
		);
		
		ut assert that(Expr(funct2_7_15(table,"Response","y","n")), ut log output("\!N\!"Can't convert for SDMA RD for CatOne without assay code\!""));
		
		ut assert that(Expr(table:ReflDens_avg[1]), ut approx(0.69897, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[2]), ut approx(137055.838, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[3]), ut approx(182741.117, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[4]), ut approx(228426.396, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(table:ReflDens_avg[5]), ut equal to(-999 ));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct2_7_15 yes / no, various Assay columns",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Assay",
			"Assay :2",
			"Assay :4",
			"Assay :5",
			"Assay Code",
			"ASSAY_CODE",
			"chem_code",
			"CHEMCODE",
			"TYP2_ASSAY",
			"TYP4_ASSAY"
		};
		
		For(i=1,i<=nitems(possCols),i++,
			localTable = New Table( "funct2_7_15 y-n various assay columns",
				Add Rows( 3 ),
				New Column( "placeholder",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [1, 40, 41, 42, 4] )
				),
				/*New Column( "Assay Type",
					Character(10),
					Set Values( {"GLU","NA","K","CL","SDMA"} )
				),*/
				New Column( "Response",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
				)
			);
			//funct2_7_15(table,"Response","y","n");
			localTable:"placeholder"n << set name(possCols[i]);
			ut assert that(Expr(funct2_7_15(localTable,"Response","y","n")), ut log output(""));
			ut assert that(Expr(ncol(localTable)), ut equal to(3));
			ut assert that(Expr(Column(localTable,1) << get name), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << get name), ut equal to("Normal Reflectance"));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0.2, 0.3, 0.4, 0.5, 0.6]));
			ut assert that(Expr(Column(localTable,3) << get name), ut equal to("ReflDens_avg"));
			ut assert that(Expr(Column(localTable,3)[1]), ut approx(0.69897, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[2]), ut approx(137055.838, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[3]), ut approx(182741.117, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[4]), ut approx(228426.396, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[5]), ut approx(274111.67513, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
			localTable << close window;
		);
		localTable = New Table( "funct2_7_15 y-n various assay columns",
			Add Rows( 3 ),
			New Column( "placeholder",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 40, 41, 42, 4] )
			),
			/*New Column( "Assay Type",
				Character(10),
				Set Values( {"GLU","NA","K","CL","SDMA"} )
			),*/
			New Column( "Response",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
			)
		);
		localTable:"placeholder"n << set name("notInList");
		//funct2_7_15(localTable,"Response","y","n");
		ut assert that(Expr(funct2_7_15(localTable,"Response","y","n")), ut log output("\!N\!"Can't convert without assay code\!""));
		ut assert that(Expr(ncol(localTable)), ut equal to(3));
		ut assert that(Expr(Column(localTable,1) << get name), ut equal to("notInList"));
		ut assert that(Expr(Column(localTable,2) << get name), ut equal to("Normal Reflectance"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0.2, 0.3, 0.4, 0.5, 0.6]));
		ut assert that(Expr(Column(localTable,3) << get name), ut equal to("ReflDens_avg"));
		ut assert that(Expr(Column(localTable,3)[1]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[2]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[3]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[4]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[5]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct2_7_15 yes / no, various Assay Type columns",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Assay Type",
			"ASSAY_TYPE",
			"chem_type"
		};
		
		For(i=1,i<=nitems(possCols),i++,
			localTable = New Table( "funct2_7_15 y-n various assay type columns",
				Add Rows( 3 ),
				/*New Column( "placeholder",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [1, 40, 41, 42, 4] )
				),*/
				New Column( "placeholder",
					Character(10),
					Set Values( {"GLU","NA","K","CL","SDMA"} )
				),
				New Column( "Response",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
				)
			);
			//funct2_7_15(table,"Response","y","n");
			localTable:"placeholder"n << set name(possCols[i]);
			ut assert that(Expr(funct2_7_15(localTable,"Response","y","n")), ut log output("\!N\!"Can't convert for SDMA RD for CatOne without assay code\!""));
			ut assert that(Expr(ncol(localTable)), ut equal to(3));
			ut assert that(Expr(Column(localTable,1) << get name), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << get name), ut equal to("Normal Reflectance"));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0.2, 0.3, 0.4, 0.5, 0.6]));
			ut assert that(Expr(Column(localTable,3) << get name), ut equal to("ReflDens_avg"));
			ut assert that(Expr(Column(localTable,3)[1]), ut approx(0.69897, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[2]), ut approx(137055.838, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[3]), ut approx(182741.117, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[4]), ut approx(228426.396, {Relative Epsilon( 1e-5 )} ));
			ut assert that(Expr(Column(localTable,3)[5]), ut equal to(-999 ));
			ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
			localTable << close window;
		);
		localTable = New Table( "funct2_7_15 y-n various assay type columns",
			Add Rows( 3 ),
			New Column( "placeholder",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 40, 41, 42, 4] )
			),
			/*New Column( "Assay Type",
				Character(10),
				Set Values( {"GLU","NA","K","CL","SDMA"} )
			),*/
			New Column( "Response",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
			)
		);
		localTable:"placeholder"n << set name("notInList");
		//funct2_7_15(localTable,"Response","y","n");
		ut assert that(Expr(funct2_7_15(localTable,"Response","y","n")), ut log output("\!N\!"Can't convert without assay code\!""));
		ut assert that(Expr(ncol(localTable)), ut equal to(3));
		ut assert that(Expr(Column(localTable,1) << get name), ut equal to("notInList"));
		ut assert that(Expr(Column(localTable,2) << get name), ut equal to("Normal Reflectance"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0.2, 0.3, 0.4, 0.5, 0.6]));
		ut assert that(Expr(Column(localTable,3) << get name), ut equal to("ReflDens_avg"));
		ut assert that(Expr(Column(localTable,3)[1]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[2]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[3]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[4]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3)[5]), ut approx(-999, {Relative Epsilon( 1e-5 )} ));
		ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct2_7_15 yes / no, RD column already exists",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		possCols = {
			"Reading :3",
			"Reflective Density",
			"Timeseries RD",
			"TYP3_READING"
		};
		
		For(i=1,i<=nitems(possCols),i++,
			localTable = New Table( "funct2_7_15 y-n various assay type columns",
				Add Rows( 3 ),
				New Column( "placeholder",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [1, 40, 41, 42, 4] )
				),
				New Column( "Assay Type",
					Character(10),
					Set Values( {"GLU","NA","K","CL","SDMA"} )
				),
				New Column( "Response",
					Numeric,
					"Continuous",
					Format( "Best", 12 ),
					Set Values( [0.2, 0.3, 0.4, 0.5, 0.6] )
				)
			);
			//funct2_7_15(table,"Response","y","n");
			localTable:"placeholder"n << set name(possCols[i]);
			ut assert that(Expr(funct2_7_15(localTable,"Response","y","n")), ut log output(""));
			ut assert that(Expr(ncol(localTable)), ut equal to(3));
			ut assert that(Expr(Column(localTable,1) << get name), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << get name), ut equal to("Assay Type"));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"GLU","NA","K","CL","SDMA"}));
			ut assert that(Expr(Column(localTable,3) << get name), ut equal to("Normal Reflectance"));
			ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to([0.2, 0.3, 0.4, 0.5, 0.6]));
			localTable << close window;
		);
		
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct3 Instrument Software Version",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"DEVICE_SOFTWARE_VERSION",
			"Device Software Version",
			"Cat Software Ver",
			"software_version",
			"Cat Software Version"
		};
		
		localTable = New Table("funct3Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct3(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Instrument Software Version"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct4_21 Instrument ID OPS True",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"INSTRUMENT",
			"Instrument Serial Number",
			"DEVICE_SERIAL_NUMBER",
			"INSTRUMENT_SERIAL_NUMBER",
			"instrument_id"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct4_21Test",
				Add Rows(3),
				New Column("placeholder",Character,Nominal,
					set values({"1", "2", "3"})
				)		
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct4_21(localTable,possCols[i],"y");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Instrument ID"));
			//ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Ordinal")); //not for ops = true
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"1", "2", "3"}));
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct4_21 Instrument ID OPS False",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"INSTRUMENT",
			"Instrument Serial Number",
			"DEVICE_SERIAL_NUMBER",
			"INSTRUMENT_SERIAL_NUMBER",
			"instrument_id"
		};
		
		localTable = New Table("funct4_21Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct4_21(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Instrument ID"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct6_8 Concentration OPS True",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Result Computed Concentration",
			"Concentration :5",
			"TYP5_CONCENTRATION",
			"RSLT_RESULTS_COMPUTED_CONC",
			"CONCENTRATION",
			"results.computed_conc"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct6_8Test",
				Add Rows(3),
				New Column("placeholder",Numeric,Continuous,
					set values([40, 36, 25])
				)		
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct6_8(localTable,possCols[i],"y");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Concentration Slide"));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([40, 36, 25]));
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct6_8 Concentration OPS False",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Result Computed Concentration",
			"Concentration :5",
			"TYP5_CONCENTRATION",
			"RSLT_RESULTS_COMPUTED_CONC",
			"CONCENTRATION"
		};
		
		localTable = New Table("funct6_8Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct6_8(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Concentration"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS True",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"CHEMCODE",
			"Assay :2",
			"Assay :4",
			"Assay :5",
			"TYP2_ASSAY",
			"TYP4_ASSAY",
			"ASSAY_CODE",
			"Assay Code",
			"chem_code"//,
			//"Assay" isn't possible for OPS data
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct9_13Test",
				Add Rows(3),
				New Column("placeholder",Numeric,Continuous,
					set values([40, 36, 25])
				)		
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct9_13(localTable,possCols[i],"y");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Assay"));
			//ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Ordinal")); //not for ops = true
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([40, 36, 25]));
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, col is Assay",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("Assay",Numeric,Continuous,
				set values([40, 36, 25])
			)	
		);
		
		funct9_13(localTable,"Assay");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, Assay is present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("Assay",Numeric,Continuous,
				set values([40, 36, 25])
			),
		);
		
		funct9_13(localTable,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, no assay, is type 2 assay",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("TYP2_ASSAY",Numeric,Continuous,
				set values([3, 4, 5])
			)
		);
		localTable1 = New Table("funct9_13Test1",
			Add Rows(3),
			New Column("Assay :2",Numeric,Continuous,
				set values([3, 4, 5])
			)
		);
		
		funct9_13(localTable,"TYP2_ASSAY");
		funct9_13(localTable1,"Assay :2");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable1,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable1,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable1,1) << get as matrix), ut equal to([3, 4, 5]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, type 2 assay present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("TYP2_ASSAY",Numeric,Continuous,
				set values([40, 36, 25])
			),
		);
		localTable1 = New Table("funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("Assay :2",Numeric,Continuous,
				set values([40, 36, 25])
			),
		);
		
		funct9_13(localTable,"placeholder");
		funct9_13(localTable1,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("TYP2_ASSAY"));
		ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([40, 36, 25]));
		
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable1,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable1,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable1,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("Assay :2"));
		ut assert that(Expr(Column(localTable1,2) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable1,2) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable1,2) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, no others, col is Assay :4",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("Assay :4",Numeric,Continuous,
				set values([40, 36, 25])
			)	
		);
		
		funct9_13(localTable,"Assay :4");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, no others, assay :4 present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("Assay :4",Numeric,Continuous,
				set values([40, 36, 25])
			),
		);
		
		funct9_13(localTable,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Assay :4"));
		ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([40, 36, 25]));

	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct9_13 Assay OPS false, no other key assay cols",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([40, 36, 25])
			)	
		);
		
		funct9_13(localTable,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct10 Slide Lot",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Slide Lot Number",
			"Lot :5",
			"TYP2_LOT",
			"RSLT_SLIDE_LOT",
			"SLIDE_LOT_NUMBER",
			"Chem Slide Lot Number",
			"Lot",
			"Slide Lot",
			"slide_lot"
		};
		
		localTable = New Table("funct10Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct10(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Slide Lot"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct11 DateTime",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Run Start Timestamp",
			"RUN_START_TS",
			"RUN_START_LOG_TMSTMP",
			"at"
		};
		
		localTable = New Table("funct11Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct11(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 col is Wavelength and numeric",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "Wavelength",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			private
		);
		
		funct12(table1,"Wavelength");
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table1,1) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 col is Wavelength and character",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "Wavelength",
				character,
				"nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				//set values([0, 650, 36, 501, 405])
			),
			private
		);
		
		funct12(table1,"Wavelength");
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("WL Orig"));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table1,2) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,2) << get as matrix), ut equal to([0, 650, 0, 0, 405]));
		ut assert that(Expr(Column(table1,2) << get formula), ut empty());
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 not Wavelength but Wavelength present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "placeholder",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			New Column( "Wavelength",
				character,
				"nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				//set values([0, 650, 36, 501, 405])
			),
			private
		);
		
		funct12(table1,"placeholder");
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
		ut assert that(Expr(Column(table1,2) << get as matrix), ut equal to({"", "WL_650", "WL_AEM", "0", "WL_405"}));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 col is Readings: wavelength (nm) OR READING_WAVELENGTH, no Wavelength present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "Readings: wavelength (nm)",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			private
		);
		table2 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "READING_WAVELENGTH",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			private
		);
		
		funct12(table1,"Readings: wavelength (nm)");
		funct12(table2,"READING_WAVELENGTH");
		//ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table1,1) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
		ut assert that(Expr(Column(table2,1) << getname), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table2,1) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table2,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 not key cols, Readings: wavelength (nm) OR READING_WAVELENGTH present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "placeholder",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			New Column( "Readings: wavelength (nm)",
				character,
				"nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				//set values([0, 650, 36, 501, 405])
			),
			private
		);
		table2 = New Table( "wl_asCharacter",
			Add Rows( 5 ),
			New Column( "placeholder",
				numeric,
				"continuous",
				//Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				set values([0, 650, 36, 501, 405])
			),
			New Column( "READING_WAVELENGTH",
				character,
				"nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
				//set values([0, 650, 36, 501, 405])
			),
			private
		);
		
		funct12(table1,"placeholder");
		funct12(table2,"placeholder");
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Readings: wavelength (nm)"));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
		ut assert that(Expr(Column(table1,2) << get as matrix), ut equal to({"", "WL_650", "WL_AEM", "0", "WL_405"}));
		ut assert that(Expr(ncol(table2)), ut equal to(2));
		ut assert that(Expr(Column(table2,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(table2,2) << getname), ut equal to("READING_WAVELENGTH"));
		ut assert that(Expr(Column(table2,1) << get as matrix), ut equal to([0, 650, 36, 501, 405]));
		ut assert that(Expr(Column(table2,2) << get as matrix), ut equal to({"", "WL_650", "WL_AEM", "0", "WL_405"}));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct12 Wavelength all poss cols",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Center Wavelengths1 :2",
			"TYP2_CENTER_WAVELENGTHS1",
			"Results Center Wavelengths 1",
			"RSLT_CENTER_WAVELENGTHS1",
			"READING_WAVELENGTH",
			"Readings: Wavelength (nm)",
			"wavelength",
			"Wavelength",
			"reads.wl"
		};
		
		localTable = New Table("funct12Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct12(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wavelength"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct14 Segment",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Segment :4",
			"Segment :5",
			"TYP2_SEGMENT",
			"Results: Carousel Segment",
			"RSLT_SEGMENT_VALUE",
			"segment"
		};
		
		localTable = New Table("funct14Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct14(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Segment"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct16 Species ID spp is numeric, spp name not present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct16Test_spp is numeric, spp name not present",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous,
				<< set values([0,1,2,3,4])
			)
		);
		
		funct16(localTable,"placeholder");
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Species ID"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Species Name"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0, 1, 2, 3, 4]));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"Feline", "Canine", "Equine", "Unknown", "QC"}));
		ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
		
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct16 Species ID spp is numeric, spp name present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct16Test_spp is numeric, spp name present",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous,
				<< set values([0,1,2,3,4])
			),
			New Column("Species Name",Character,Nominal,
				<< set values({"Feline", "Canine", "Equine", "Unknown", "QC"})
			)
		);
		
		funct16(localTable,"placeholder");
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Species ID"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Species Name"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0, 1, 2, 3, 4]));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"Feline", "Canine", "Equine", "Unknown", "QC"}));
		
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct16 Species ID spp is character",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct16Test_spp is character",
			Add Rows(0),
			New Column("placeholder",Character,Nominal,
				<< set values({"Feline", "Canine", "Equine", "Unknown", "QC", "somethingelse"})
			)
		);
		
		funct16(localTable,"placeholder");
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Species ID"));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Species Name"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0, 1, 2, 3, 4, 999]));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Feline", "Canine", "Equine", "Unknown", "QC", "somethingelse"}));
		ut assert that(Expr(Column(localTable,1) << get formula), ut empty());
		
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct17 Chem Type",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Assay Type",
			"ASSAY_TYPE",
			"chem_type"
		};
		
		localTable = New Table("funct17Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct17(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Chem Type"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct18 IA SampMix Event",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"SampleConjugateDispenseTime",
			"Conjugate Dispense Time :2",
			"DT: Sample Conjugate Dispense Time (1) (sec)",
			"TYP2_SAMPLE_CNJGT_DISPENSE_TM",
			"DSPNS_TIMES_SMPL_CONJUGAT_ALQ1",
			"conjugate_alq1"
		};
		
		localTable = New Table("funct18Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct18(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA SampMix Event"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct19 IA Wash Event",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"SampleDispenseTilWash1EndDeltaTime",
			"Sampdisp Tilwash1end D Time :2",
			"DT: Wash Dispense Time (1) (sec)",
			"TYP2_SAMPDISP_TILWASH1END_D_TM",
			"DSPNS_TIMES_WASH1_ALQ1",
			"wash_alq1"
		};
		
		localTable = New Table("funct19Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct19(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA Wash Event"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct20 IA Substrate Event",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"SubstrateDispenseTime",
			"Substrate Dispense Time :2",
			"DT: Substrate Dispense Time (1) (sec)",
			"TYP2_SUBSTRATE_DISPENSE_TIME",
			"DSPNS_TIMES_SUBSTRATE_ALQ1",
			"substrate_alq1"
		};
		
		localTable = New Table("funct20Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct20(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA Substrate Event"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct22 AR",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Results Analyzer Response",
			"Result :4",
			"RSLT_RESULTS_ANALYZER_RESPONSE",
			"TYP4_RESULT",
			"results.analyte_response"
		};
		
		localTable = New Table("funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct22(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("AR"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct23 IVLS Run ID",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"IVLS_RUN_ID",
			"NATIVE_IVLS_RUN_ID",
			"DB_RUN_ID",
			"DB Run ID",
			"IVLS RunID",
			"ivls_run_id"
		};
		
		localTable = New Table("funct23Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct23(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IVLS Run ID"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));
			ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct25 Patient Name",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RUN_NAME",
			"PATIENT_NAME",
			"patient_name"
		};
		
		localTable = New Table("funct25Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct25(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Patient Name"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct28 Slide Load Order",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RSLT_SLIDE_LOAD_ORDER",
			"TYP2_SLIDE_LOAD_POSITION",
			"Results: Slide Load Order",
			"Slide Load Position :4",
			"Slide Load Position :5",
			"Slide Load Position :2",
			"Slide Load Position :3",
			"slide_load_order",
			"Slide Load Order"
		};
		
		localTable = New Table("funct28Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct28(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Slide Load Order"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct29 Algorithm Status",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RSLT_RESULTS_ALGORITHM_STATUS",
			"TYP4_ALG_CALC_AR_ERROR_STATUS",
			"results.alg_status",
			"Algorithm Status"
		};
		
		localTable = New Table("funct29Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct29(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Algorithm Status"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct30 Patient Name",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Result Analyte Concentration",
			"RSLT_RESULTS_ANALYTE_CONC",
			"RESULT_VALUE",
			"Result Value",
			"results.analyte_conc"
		};
		
		localTable = New Table("funct30Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct30(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Reported Concentration"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct31 Flags with result in name",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Result Flag Value 1",
			"Results: Result Flag Value 2",
			"Results: Result Flag Value 3",
			"Results: Result Flag Value 4",
			"Results: Result Flag Value 5",
			"RSLT_RESULTS_FLAGS1",
			"RSLT_RESULTS_FLAGS2",
			"RSLT_RESULTS_FLAGS3",
			"RSLT_RESULTS_FLAGS4",
			"RSLT_RESULTS_FLAGS5"
		};
		
		localTable = New Table("funct31Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
		
			Column(localTable,1) << set name(possCols[i]);
			flagNum = Right(possCols[i],1);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct31(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Results Flag"||flagNum));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct31 Flags no result in name, type 4",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"TYP4_FLAG1",
			"TYP4_FLAG2",
			"TYP4_FLAG3",
			"DATA_4_Flag1",
			"DATA_4_Flag2",
			"DATA_4_Flag3",
			"Flag2 :4"
		};
		
		localTable = New Table("funct31Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
		
			Column(localTable,1) << set name(possCols[i]);
			flagNum = Substr(possCols[i],Contains(lowercase(possCols[i]),"flag")+4,1);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct31(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Flag"||flagNum||"_4"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct31 Flags no result in name, type 5",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"TYP5_FLAG1",
			"TYP5_FLAG2",
			"TYP5_FLAG3",
			"DATA_5_Flag1",
			"DATA_5_Flag2",
			"DATA_5_Flag3",
			"Flag2 :5"
		};
		
		localTable = New Table("funct31Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
		
			Column(localTable,1) << set name(possCols[i]);
			flagNum = Substr(possCols[i],Contains(lowercase(possCols[i]),"flag")+4,1);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct31(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Flag"||flagNum||"_5"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct31 Flags no result in name, KTS DX flag1-3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Flag 1",
			"Flag 2",
			"Flag 3"
		};
		
		localTable = New Table("funct31Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		/*these are pulled from type 4 in the log, so forcing them to type 4 covers this and makes the colums
		so they won't interfere with other functions*/
		For(i=1,i<=nitems(possCols),i++,
		
			Column(localTable,1) << set name(possCols[i]);
			flagNum = Right(possCols[i],1);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct31(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Flag"||flagNum||"_4"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct32 Dilution Parts_make Dilution Factor",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "funct32 Dilution Parts_make Dilution Factor",
			Add Rows( 3 ),
			New Column( "Dilution Parts",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 2, 4] )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table2 = New Table( "funct32 Dilution Parts_make Dilution Factor 2",
			Add Rows( 3 ),
			New Column( "DILUTION_PARTS",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 2, 4] )
			),
			New Column( "Dilution Factor",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table3 = New Table( "funct32 Dilution Parts_make Dilution Factor 3",
			Add Rows( 3 ),
			New Column( "Dilution Parts :5",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 2, 4] )
			),
			New Column( "RUN_DILUTION_FACTOR",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table4 = New Table( "funct32 Dilution Parts_make Dilution Factor 4",
			Add Rows( 3 ),
			New Column( "TYP5_DILUTION_PARTS",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1, 2, 4] )
			),
			New Column( "Dilution Factor",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		
		funct32(table1,"Dilution Parts");
		ut assert that(Expr(ncol(table1)), ut equal to(3));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Dilution Parts"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Dilution Factor"));
		ut assert that(Expr(Column(table1,3) << get as matrix), ut equal to([2,3,5]));
		ut assert that(Expr(Column(table1,3) << get formula), ut empty());
		
		funct32(table2,"DILUTION_PARTS");
		ut assert that(Expr(ncol(table2)), ut equal to(2));
		ut assert that(Expr(Column(table2,1) << getname), ut equal to("Dilution Parts"));
		ut assert that(Expr(Column(table2,2) << getname), ut equal to("Dilution Factor"));
		ut assert that(Expr(Column(table2,2) << get as matrix), ut equal to([0.2, 0.3, 0.4]));
		
		funct32(table3,"Dilution Parts :5");
		ut assert that(Expr(ncol(table3)), ut equal to(2));
		ut assert that(Expr(Column(table3,1) << getname), ut equal to("Dilution Parts"));
		ut assert that(Expr(Column(table3,2) << getname), ut equal to("RUN_DILUTION_FACTOR"));
		ut assert that(Expr(Column(table3,2) << get as matrix), ut equal to([0.2, 0.3, 0.4]));
		
		funct32(table4,"TYP5_DILUTION_PARTS");
		ut assert that(Expr(ncol(table4)), ut equal to(2));
		ut assert that(Expr(Column(table4,1) << getname), ut equal to("Dilution Parts"));
		ut assert that(Expr(Column(table4,2) << getname), ut equal to("Dilution Factor"));
		ut assert that(Expr(Column(table4,2) << get as matrix), ut equal to([0.2, 0.3, 0.4]));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct32 Dilution Parts_make Dilution Factor, DP is empty character",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "funct32 Dilution Parts_make Dilution Factor",
			Add Rows( 3 ),
			New Column( "Dilution Parts",
				Character,
				"Nominal"
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
				
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to({"", "", ""}));
		
		funct32(table1,"Dilution Parts");
		ut assert that(Expr(ncol(table1)), ut equal to(3));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Dilution Parts"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Dilution Factor"));
		ut assert that(Expr(Column(table1,1) << get as matrix), ut equal to([., ., .]));
		ut assert that(Expr(Column(table1,3) << get as matrix), ut equal to([., ., .]));
		ut assert that(Expr(Column(table1,3) << get formula), ut empty());
		
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct33 Dilution Type",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "funct33 Dilution Type",
			Add Rows( 3 ),
			New Column( "Dilution Type",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0, 1, 2] )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table2 = New Table( "funct32 Dilution Factor 2",
			Add Rows( 3 ),
			New Column( "Dilution Type :5",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0, 1, 2] )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table3 = New Table( "funct32 Dilution Factor 3",
			Add Rows( 3 ),
			New Column( "DILUTION_TYPE",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0, 1, 2] )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table4 = New Table( "funct33 Dilution Type 4",
			Add Rows( 3 ),
			New Column( "TYP5_DILUTION_TYPE",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0, 1, 2] )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table5 = New Table( "funct33 Dilution Type 5",
			Add Rows( 3 ),
			New Column( "RUN_DILUTION_TYPE",
				Character(10),
				Set Values( {"NONE","AUTOMATIC","MANUAL"} )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		table6 = New Table( "funct33 Dilution Type 5",
			Add Rows( 3 ),
			New Column( "Dilution Type",
				Character(10),
				Set Values( {"NONE","AUTOMATIC","MANUAL"} )
			),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [0.2, 0.3, 0.4] )
			),
			private
		);
		
		funct33(table1,"Dilution Type");
		ut assert that(Expr(ncol(table1)), ut equal to(3));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Dilution Type Orig"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(table1,3) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
		ut assert that(Expr(Column(table1,3) << get formula), ut empty());
			
		funct33(table2,"Dilution Type :5");
		ut assert that(Expr(ncol(table2)), ut equal to(3));
		ut assert that(Expr(Column(table2,1) << getname), ut equal to("Dilution Type Orig"));
		ut assert that(Expr(Column(table2,3) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(table2,3) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
		ut assert that(Expr(Column(table2,3) << get formula), ut empty());
		
		funct33(table3,"DILUTION_TYPE");
		ut assert that(Expr(ncol(table3)), ut equal to(3));
		ut assert that(Expr(Column(table3,1) << getname), ut equal to("Dilution Type Orig"));
		ut assert that(Expr(Column(table3,3) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(table3,3) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
		ut assert that(Expr(Column(table3,3) << get formula), ut empty());
		
		funct33(table4,"TYP5_DILUTION_TYPE");
		ut assert that(Expr(ncol(table4)), ut equal to(3));
		ut assert that(Expr(Column(table4,1) << getname), ut equal to("Dilution Type Orig"));
		ut assert that(Expr(Column(table4,3) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(table4,3) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
		ut assert that(Expr(Column(table3,3) << get formula), ut empty());
		
		funct33(table5,"RUN_DILUTION_TYPE");
		ut assert that(Expr(ncol(table5)), ut equal to(2));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Dilution Type"));
		
		funct33(table6,"Dilution Type");
		ut assert that(Expr(ncol(table6)), ut equal to(2));
		ut assert that(Expr(Column(table6,1) << getname), ut equal to("Dilution Type"));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct33 Dilution Type, DT is present and non-numeric",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct33Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("Dilution Type",Character, Nominal,
				set values({"NONE","AUTO","AUTO"})
			),
		);
		
		funct33(localTable,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Character"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"NONE","AUTO","AUTO"}));
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct33 Dilution Type, DT is present and numeric",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("funct33Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([3, 4, 5])
			),
			New Column("Dilution Type",Numeric, Continuous,
				set values([0, 1, 2])
			),
		);
		
		funct33(localTable,"placeholder");
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("placeholder"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Dilution Type Orig"));
		ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to([0, 1, 2]));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("Dilution Type"));
		ut assert that(Expr(Column(localTable,3) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,3) << get data type), ut equal to("Character"));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
		ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct33 Dilution Type, DT not present, col numeric",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Dilution Type :5",
			"TYP5_DILUTION_TYPE",
			"DILUTION_TYPE",
			"RUN_DILUTION_TYPE",
			"Dilution Type",
			"dilution_type"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct33Test",
				Add Rows(3),
				New Column("placeholder",Numeric,Continuous,
					set values([0, 1, 2])
				)
			);
		
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct33(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dilution Type Orig"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
			ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0, 1, 2]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Dilution Type"));
			ut assert that(Expr(Column(localTable,2) << get modeling type), ut equal to("Nominal"));
			ut assert that(Expr(Column(localTable,2) << get data type), ut equal to("Character"));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct33 Dilution Type, DT not present, col non-numeric",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Dilution Type :5",
			"TYP5_DILUTION_TYPE",
			"DILUTION_TYPE",
			"RUN_DILUTION_TYPE",
			"Dilution Type",
			"dilution_type"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct33Test",
				Add Rows(3),
				New Column("placeholder",Character,Nominal,
					set values({"NONE","MANUAL","AUTOMATIC"})
				)
			);
		
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct33(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dilution Type"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
			ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Character"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"NONE","MANUAL","AUTOMATIC"}));
			
			localTable << close window;
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct36 Curve Version",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"CURVE_VERSION",
			"TYP5_CURVES_VERSION",
			"Curve Version",
			"Results: Curve Version",
			"Curves Version :5",
			"curve_version",
			"Curve File Version"
		};
		
		localTable = New Table("funct36Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct36(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Curve Version"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct37 Sample Type",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"SAMPLE_TYPE",
			"Sample Type",
			"SAMPLE_TYPE_NAME",
			"Sample Type Name"
		};
		
		localTable = New Table("funct37Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct37(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Sample Type"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct38 Sample Cup",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"DC_WBS_SAMPLECUP",
			"Sample Type (WBS or Sample Cup)",
			"container_location"
		};
		
		localTable = New Table("funct38Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct38(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Sample Cup"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct40 Wet Cadence Interrupted, WCI not present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RSLT_CADENCE_INTERRUPTED_WET",
			"TYP2_CADENCE_INTRRPTD_WET_FLAG",
			"Cadence_interrupted_wet",
			"Results: Cadence Interrupted Wet",
			"Cadence Interrupted Wet :2",
			"cadence_interrupted_wet"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct40Test_WCI not present",
				Add Rows(0),
				New Column("placeholder",Character,Nominal,
					<< Set values( {"Y","FALSE","TRUE","N"})
				)
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct40(localTable,possCols[i]);
			ut assert that(Expr(ncol(localTable)), ut equal to(2));
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wet Cadence Orig"));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Wet Cadence Interrupted"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Y","FALSE","TRUE","N"}));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"true","false","true","false"}));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			
			localTable << close window;
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct40 Wet Cadence Interrupted, WCI present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RSLT_CADENCE_INTERRUPTED_WET",
			"TYP2_CADENCE_INTRRPTD_WET_FLAG",
			"Cadence_interrupted_wet",
			"Results: Cadence Interrupted Wet",
			"Cadence Interrupted Wet :2",
			"cadence_interrupted_wet"
		};
		
		For(i=1,i<=nitems(possCols),i++,
		
			localTable = New Table("funct40Test_WCI present",
				Add Rows(0),
				New Column("placeholder",Character,Nominal,
					<< Set values( {"Y","FALSE","TRUE","N"})
				),
				New Column("Wet Cadence Interrupted",Character,Nominal,
					<< Set values( {"true","false","Yes","No"})
				)
			);
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct40(localTable,possCols[i]);
			ut assert that(Expr(ncol(localTable)), ut equal to(2));
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Wet Cadence Interrupted"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Y","FALSE","TRUE","N"}));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"true","false","Yes","No"}));
			//ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			
			localTable << close window;
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct41_ReflDens_avg_2",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		//done to test the name can be changed in 1st last or middle positions
		funct41(table1,"Test");
		funct41(table1,"Test 2");
		funct41(table1,"Test 3");
		
		ut assert that(Expr(Column(table1,1)<<get name), ut equal to("ReflDens_avg_2"));
		ut assert that(Expr(Column(table1,2)<<get name), ut equal to("ReflDens_avg_2 2"));
		ut assert that(Expr(Column(table1,3)<<get name), ut equal to("ReflDens_avg_2 3"));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct42_ReflDens_avg_3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		//done to test the name can be changed in 1st last or middle positions
		funct42(table1,"Test");
		funct42(table1,"Test 2");
		funct42(table1,"Test 3");
		
		ut assert that(Expr(Column(table1,1)<<get name), ut equal to("ReflDens_avg_3"));
		ut assert that(Expr(Column(table1,2)<<get name), ut equal to("ReflDens_avg_3 2"));
		ut assert that(Expr(Column(table1,3)<<get name), ut equal to("ReflDens_avg_3 3"));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct43_Wavelength_2",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		//done to test the name can be changed in 1st last or middle positions
		funct43(table1,"Test");
		funct43(table1,"Test 2");
		funct43(table1,"Test 3");
		
		ut assert that(Expr(Column(table1,1)<<get name), ut equal to("Wavelength_2"));
		ut assert that(Expr(Column(table1,2)<<get name), ut equal to("Wavelength_2 2"));
		ut assert that(Expr(Column(table1,3)<<get name), ut equal to("Wavelength_2 3"));
		ut assert that(Expr(Column(table1,1)<<get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,2)<<get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,3)<<get modeling type), ut equal to("Ordinal"));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct43 Wavelength2 as Character",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl2_asCharacter",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Wavelength2",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		
		funct43(table1,"Wavelength2");
		ut assert that(Expr(ncol(table1)), ut equal to(3));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("WL2 Orig"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Wavelength_2"));
		ut assert that(Expr(Column(table1,3) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,3) << get as matrix), ut equal to([0, 650, 0, 0, 405]));
		ut assert that(Expr(Column(table1,3) << get formula), ut empty());
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct44_Wavelength_3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		//done to test the name can be changed in 1st last or middle positions
		funct44(table1,"Test");
		funct44(table1,"Test 2");
		funct44(table1,"Test 3");
		
		ut assert that(Expr(Column(table1,1)<<get name), ut equal to("Wavelength_3"));
		ut assert that(Expr(Column(table1,2)<<get name), ut equal to("Wavelength_3 2"));
		ut assert that(Expr(Column(table1,3)<<get name), ut equal to("Wavelength_3 3"));
		ut assert that(Expr(Column(table1,1)<<get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,2)<<get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,3)<<get modeling type), ut equal to("Ordinal"));
	
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct44 Wavelength3 as Character",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "wl3_asCharacter",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Wavelength3",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		
		funct44(table1,"Wavelength3");
		ut assert that(Expr(ncol(table1)), ut equal to(3));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("WL3 Orig"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Wavelength_3"));
		ut assert that(Expr(Column(table1,3) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(table1,3) << get as matrix), ut equal to([0, 650, 0, 0, 405]));
		ut assert that(Expr(Column(table1,3) << get formula), ut empty());
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct45 Dilution Factor",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"RUN_DILUTION_FACTOR",
			"DILUTION_FACTOR",
			"dilution_factor"
		};
		
		localTable = New Table("funct45Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct45(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dilution Factor"));
			
		);
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct46 Sample id",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "Samp id",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Sample ID",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table2 = New Table( "Samp Id",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Sample Id",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		
		funct46(table1,"Sample ID");
		funct46(table2,"Sample Id");
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Sample id"));
		ut assert that(Expr(ncol(table2)), ut equal to(2));
		ut assert that(Expr(Column(table2,2) << getname), ut equal to("Sample id"));
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct47 Barcode",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Barcode String :2",
			"TYP2_BARCODE_STRING",
			"barcode"
		};
		
		localTable = New Table("funct47Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct47(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Barcode"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct48 Slide Sublot _if conditions",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		table1 = New Table( "TYP2 SbL",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "TYP2_SLIDE_SUBLOT",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table2 = New Table( "SbL :2",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Sublot :2",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table3 = New Table( "SbL :5",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Sublot :5",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table4 = New Table( "SbL :2&:5",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Sublot :5",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			New Column( "Sublot :2",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table5 = New Table( "RSLT SbL",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "RSLT_SLIDE_SUBLOT",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		table6 = New Table( "Results SbL",
			Add Rows( 5 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [4, 1, 0.45, 15, 36] )
			),
			New Column( "Results: Sublot",
				Character,
				"Nominal",
				Set Values( {"", "WL_650", "WL_AEM", "0", "WL_405"} )
			),
			private
		);
		
		funct48(table1,"TYP2_SLIDE_SUBLOT");
		funct48(table2,"Sublot :2");
		funct48(table3,"Sublot :5");
		funct48(table4,"Sublot :5");
		funct48(table5,"RSLT_SLIDE_SUBLOT");
		funct48(table6,"Results: Sublot");
		ut assert that(Expr(ncol(table1)), ut equal to(2));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table1,"Slide Sublot") << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(table1,"Slide Sublot") << get modeling type), ut equal to("Ordinal"));
		
		ut assert that(Expr(ncol(table2)), ut equal to(2));
		ut assert that(Expr(Column(table2,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table2,"Slide Sublot") << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(table2,"Slide Sublot") << get modeling type), ut equal to("Ordinal"));
		
		ut assert that(Expr(ncol(table3)), ut equal to(2));
		ut assert that(Expr(Column(table3,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table3,"Slide Sublot") << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(table3,"Slide Sublot") << get modeling type), ut equal to("Ordinal"));
		
		ut assert that(Expr(ncol(table4)), ut equal to(3));
		ut assert that(Expr(Column(table4,2) << getname), ut equal to("Sublot :5"));
		ut assert that(Expr(Column(table4,3) << getname), ut equal to("Sublot :2"));
		
		ut assert that(Expr(ncol(table5)), ut equal to(2));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get modeling type), ut equal to("Ordinal"));
		
		ut assert that(Expr(ncol(table6)), ut equal to(2));
		ut assert that(Expr(Column(table6,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table6,"Slide Sublot") << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(table6,"Slide Sublot") << get modeling type), ut equal to("Ordinal"));	
			
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct48 Slide Sublot",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Sublot :2",
			"Sublot :5",
			"TYP2_SLIDE_SUBLOT",
			"Results: Sublot",
			"Sub Lot",
			"Slide Sublot",
			"sublot",
			"Sublot"
		};
		
		localTable = New Table("funct48Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct48(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Slide Sublot"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct49 Timeseries Pt",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"reads.index",
			"random name" //just to show that we can rename any column effectively
		};
		
		localTable = New Table("funct49Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct49(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Timeseries Pt"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct50 False Light",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"false_light",
			"ulfalse_light"
		};
		
		localTable = New Table("funct49Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct50(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("False Light"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct51 Assay Gain",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Assay Gain",
			"Gain Applied :4",
			"Assay Gain :30",
			"assay_gain",
			"Gain Applied"
		};
		
		localTable = New Table("funct51Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct51(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay Gain"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct52 Assay Offset",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Results: Assay Offset",
			"Offset Applied :4",
			"Assay Offset :30",
			"assay_offset",
			"Offset Applied"
		};
		
		localTable = New Table("funct52Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct52(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay Offset"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct53 Scalar",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Lytes Scalar",
			"Scalar :50",
			"scalar",
			"fscalar"
		};
		
		localTable = New Table("funct53Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct53(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Scalar"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct54 Dry Read Start",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Lytes Dry Read Start",
			"Dry Avg Start :30",
			"dry_read_start",
			"Dry_Read_Start"
		};
		
		localTable = New Table("funct54Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct54(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dry Read Start"));
			
		);
	)
);

ut test(nameChanges, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_funct55 Dry Read End",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		possCols = {
			"Lytes Dry Read Start",
			"Dry Avg Start :30",
			"dry_read_start",
			"Dry_Read_Start"
		};
		
		localTable = New Table("funct55Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1,i<=nitems(possCols),i++,
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			funct55(localTable,possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dry Read End"));
			
		);
	)
);

	////////////////////////////////////////////////
	//          updateColNames functions          //
	////////////////////////////////////////////////
tpLibUT:utGroup = "B";
tpLibUT:utGroupTest = 0;

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Concentration_callFunction6_8",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			//"Seconds from Dispense",
			"Timeseries time",
			"Timeseries Time",
			"Time :3",
			"Readings: Time Between Read and Dispense",
			"TYP3_TIME",
			"TIME_BTWN_READ_DISPENSE",
			"reads.time"
		};
		
		localTable = New Table("updateCol_funct1_5Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous,
				set values([0.1234598, 0.154891613461543, 1.3625484664654])
			)
		);
		localTable1 = New Table("updateCol_funct1_5Test1",
			Add Rows(0),
			New Column("Seconds from Dispense",Numeric,Continuous,
				set values([0.1234598, 0.154891613461543, 1.3625484664654])
			)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("TimeFromSampleDispense:sec"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0.123460, 0.154892, 1.362548]));

		);
		
		updateColNames(localTable1);
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("Seconds from Dispense"));
		ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable1,2) << get formula), ut empty());
		ut assert that(Expr(Column(localTable1,1) << get as matrix), ut equal to([0.1234598, 0.154891613461543, 1.3625484664654]));
		ut assert that(Expr(Column(localTable1,2) << get as matrix), ut equal to([0.123460, 0.154892, 1.362548]));
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_updateColNames_funct",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		updateColNames(table1);
		expected = {"Slide Sublot",
			"Barcode",
			"Sample id",
			"ReflDens_avg",
			"Instrument Software Version", 
			"Instrument",
			"Seconds from Dispense",
			"Concentration",
			"Reflective Density",
			"CONCENTRATION",
			"CHEMCODE",
			"Slide Lot",
			"DateTime",
			"Wavelength",
			"Assay",
			"Assay :5",
			"Segment",
			"Flag1_4",
			"Patient ID",
			"Curve Version",
			"No Change",
			"ReflDens_avg_2",
			"ReflDens_avg_3",
			"Wavelength_2",
			"Wavelength_3",
			"Assay 2",
			"Concentration Slide",
			"Instrument ID",
			"ReflDens_avg 2",
			"TimeFromSampleDispense:sec",
			"TimeFromSampleDispense:sec 2"
		};
		actual = table1 << get column names (string);
		
		For(i=1,i<=nitems(expected),i++,
			ut assert that(Expr(actual[i]), ut equal to(expected[i]));
		);
	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_ReflDens_avg&Normal Reflectance_callFunction2_7_15",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColsRDFunc2 = {
			"Reading :3",
			"Timeseries RD",
			"TYP3_READING",
			"reads.rd"
		};
		
		possColsNRFunc15 = {
			"READING_NORM_REFLECTANCE",
			"Readings: Normal Reflectance",
			"reads.norm_refl"
		};
		
		localTable = New Table("updateCol_funct2_7_15TestFunc2",
			Add Rows(3),
			New Column("placeholder",Numeric, Continuous,
				set values([0.2, 0.6, 0.8])
			)	
		);
		localTable1 = New Table("updateCol_funct2_7_15TestFunc15",
			Add Rows(3),
			New Column("placeholder",Numeric, Continuous,
				set values([0.2, 0.6, 0.8])
			),
			New Column("Assay",Numeric, Continuous,
				set values([40, 0, 25])
			)
		);
		localTable2 = New Table("updateCol_funct2_7_15TestFunc7",
			Add Rows(3),
			New Column("Reflective Density",Numeric, Continuous,
				set values([0.2, 0.6, 0.8])
			)	
		);
		
		For(i=1, i<=nitems(possColsRDFunc2),i++,
			
			Column(localTable,1) << set name(possColsRDFunc2[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possColsRDFunc2[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(ncol(localTable)), ut equal to(1));
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("ReflDens_avg"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0.2, 0.6, 0.8]));

		);

		For(i=1, i<=nitems(possColsNRFunc15),i++,
			
			Column(localTable1,1) << set name(possColsNRFunc15[i]);
			ut assert that(Expr(Column(localTable1,1) << getname), ut equal to(possColsNRFunc15[i]));
			
			updateColNames(localTable1);
			
			ut assert that(Expr(ncol(localTable1)), ut equal to(3));
			ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("Normal Reflectance"));
			ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("Assay"));
			ut assert that(Expr(Column(localTable1,3) << getname), ut equal to("ReflDens_avg"));
			ut assert that(Expr(Column(localTable1,3) << get formula), ut empty());
			ut assert that(Expr(Column(localTable1,3) << get data type), ut equal to("Numeric"));
			ut assert that(Expr(Column(localTable1,1) << get as matrix), ut equal to([0.2, 0.6, 0.8]));
			ut assert that(Expr(Round(Column(localTable1,3) << get as matrix,6)), ut equal to([91370.558376, 0.221849, 0.096910]));

		);

		updateColNames(localTable2);
		ut assert that(Expr(ncol(localTable2)), ut equal to(2));
		ut assert that(Expr(Column(localTable2,1) << getname), ut equal to("Reflective Density"));
		ut assert that(Expr(Column(localTable2,2) << getname), ut equal to("ReflDens_avg"));
		ut assert that(Expr(Column(localTable2,1) << get as matrix), ut equal to([0.2, 0.6, 0.8]));
		ut assert that(Expr(Column(localTable2,2) << get formula), ut empty());
		ut assert that(Expr(Column(localTable2,2) << get as matrix), ut equal to([0.2, 0.6, 0.8]));
		
	)
);


ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Instrument Software Version_callFunction3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"DEVICE_SOFTWARE_VERSION",
			"Device Software Version",
			"Cat Software Ver",
			"software_version",
			"Cat Software Version"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Instrument Software Version"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Instrument ID_callFunction4_21",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Instrument Serial Number",
			"DEVICE_SERIAL_NUMBER",
			"INSTRUMENT_SERIAL_NUMBER",
			"instrument_id"
		};
		
		localTable = New Table("updateCol_funct4_21Test",
			Add Rows(3),
			New Column("placeholder",Character,Nominal,
				set values({"1", "2", "3"})
			)	
		);
		localTable1 = New Table("updateCol_funct4_21Test1",
			Add Rows(3),
			New Column("Instrument",Character,Nominal,
				set values({"1", "2", "3"})
			)	
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Instrument ID"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"1", "2", "3"}));

		);
		
		updateColNames(localTable1);
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("Instrument"));
		ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("Instrument ID"));
		ut assert that(Expr(Column(localTable1,2) << get formula), ut empty());
		ut assert that(Expr(Column(localTable1,2) << get as matrix), ut equal to({"1", "2", "3"}));
		
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Concentration_callFunction6_8",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Results: Result Computed Concentration",
			"Concentration :5",
			"TYP5_CONCENTRATION",
			"RSLT_RESULTS_COMPUTED_CONC",
			"results.computed_conc"
		};
		
		localTable = New Table("updateCol_funct6_8Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		localTable1 = New Table("updateCol_funct6_8Test1",
			Add Rows(0),
			New Column("CONCENTRATION",Numeric,Continuous,
				set values([40, 36, 25])
			)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Concentration"));

		);
		
		updateColNames(localTable1);
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("CONCENTRATION"));
		ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("Concentration Slide"));
		ut assert that(Expr(Column(localTable1,2) << get formula), ut empty());
		ut assert that(Expr(Column(localTable1,2) << get as matrix), ut equal to([40, 36, 25]));
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Assay_callFunction9_13",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Assay :2",
			"Assay :4",
			"Assay :5",
			"TYP2_ASSAY",
			"TYP4_ASSAY",
			"ASSAY_CODE",
			"Assay Code",
			"chem_code",
			"Assay"
		};
		
		localTable = New Table("updateCol_funct9_13Test",
			Add Rows(3),
			New Column("placeholder",Numeric,Continuous,
				set values([40, 36, 25])
			)	
		);
		localTable1 = New Table("updateCol_funct9_13Test",
			Add Rows(3),
			New Column("CHEMCODE",Numeric,Continuous,
				set values([40, 36, 25])
			)	
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]) << set data type("numeric") << set modeling type("Continuous");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Assay"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
			ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([40, 36, 25]));

		);
		
		updateColNames(localTable1);
		ut assert that(Expr(Column(localTable1,1) << getname), ut equal to("CHEMCODE"));
		ut assert that(Expr(Column(localTable1,2) << getname), ut equal to("Assay"));
		ut assert that(Expr(Column(localTable1,2) << get formula), ut empty());
		ut assert that(Expr(Column(localTable1,2) << get as matrix), ut equal to([40, 36, 25]));
		
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Slide Load Order_callFunction10",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Results: Slide Lot Number",
			"Lot :5",
			"TYP2_LOT",
			"RSLT_SLIDE_LOT",
			"SLIDE_LOT_NUMBER",
			"Chem Slide Lot Number",
			"Lot",
			"Slide Lot",
			"slide_lot"
		};
		
		localTable = New Table("updateCol_funct10Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]) << set modeling type("Continuous");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Slide Lot"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DateTime_callFunction11",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Run Start Timestamp",
			"RUN_START_TS",
			"RUN_START_LOG_TMSTMP",
			"at"
		};
		
		localTable = New Table("updateCol_funct10Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Wavelength_callFunction12",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Center Wavelengths1 :2",
			"TYP2_CENTER_WAVELENGTHS1",
			"Results Center Wavelengths 1",
			"RSLT_CENTER_WAVELENGTHS1",
			"READING_WAVELENGTH",
			"Readings: Wavelength (nm)",
			"wavelength",
			"Wavelength",
			"reads.wl"
		};
		
		localTable = New Table("updateCol_funct12Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wavelength"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Segment_callFunction14",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Segment :4",
			"Segment :5",
			"TYP2_SEGMENT",
			"Results: Carousel Segment",
			"RSLT_SEGMENT_VALUE",
			"segment"
		};
		
		localTable = New Table("updateCol_funct14Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Segment"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Species ID&Species Name_callFunction16",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		//currently the only occurrances of 'Species Name' are correct and character so don't need to be checked
		//also only need to check that the proper function is called, so no need for numeric/name present, etc
		possCols = {
			"Species",
			"SPECIES_NAME",
			"SPECIES",
			"species",
			"species_id"
		};
		localTable = New Table("funct16Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous,
				<< set values([0,1,2,3,4])
			)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Species ID"));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Species Name"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([0, 1, 2, 3, 4]));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"Feline", "Canine", "Equine", "Unknown", "QC"}));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			
		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Chem Type_callFunction17",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Assay Type",
			"ASSAY_TYPE",
			"chem_type"
		};
		localTable = New Table("funct17Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Chem Type"));
			
		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_IA SampMix Event_callFunction18",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"SampleConjugateDispenseTime",
			"Conjugate Dispense Time :2",
			"DT: Sample Conjugate Dispense Time (1) (sec)",
			"TYP2_SAMPLE_CNJGT_DISPENSE_TM",
			"DSPNS_TIMES_SMPL_CONJUGAT_ALQ1",
			"conjugate_alq1"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA SampMix Event"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_IA Wash Event_callFunction19",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"SampleDispenseTilWash1EndDeltaTime",
			"Sampdisp Tilwash1end D Time :2",
			"DT: Wash Dispense Time (1) (sec)",
			"TYP2_SAMPDISP_TILWASH1END_D_TM",
			"DSPNS_TIMES_WASH1_ALQ1",
			"wash_alq1"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA Wash Event"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_IA Substrate Event_callFunction20",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"SubstrateDispenseTime",
			"Substrate Dispense Time :2",
			"DT: Substrate Dispense Time (1) (sec)",
			"TYP2_SUBSTRATE_DISPENSE_TIME",
			"DSPNS_TIMES_SUBSTRATE_ALQ1",
			"substrate_alq1"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IA Substrate Event"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_AR_callFunction22",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Results: Results Analyzer Response",
			"Result :4",
			"RSLT_RESULTS_ANALYZER_RESPONSE",
			"TYP4_RESULT",
			"results.analyte_response"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("AR"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_IVLS Run ID_callFunction23",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"IVLS_RUN_ID",
			"NATIVE_IVLS_RUN_ID",
			"DB_RUN_ID",
			"DB Run ID",
			"IVLS RunID",
			"ivls_run_id",
			"IvlsRunId"
		};
		
		localTable = New Table("updateCol_funct23Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("IVLS Run ID"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));
			ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Patient Name_callFunction25",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"RUN_NAME",
			"PATIENT_NAME",
			"patient_name"
		};
		
		localTable = New Table("updateCol_funct23Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Patient Name"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Slide Load Order_callFunction28",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"RSLT_SLIDE_LOAD_ORDER",
			"TYP2_SLIDE_LOAD_POSITION",
			"Results: Slide Load Order",
			"Slide Load Position :4",
			"Slide Load Position :5",
			"Slide Load Position :2",
			"Slide Load Position :3",
			"slide_load_order",
			"Slide Load Order"
		};
		
		localTable = New Table("updateCol_funct28Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]) << set modeling type("Continuous");
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Slide Load Order"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Algorithm Status_callFunction29",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"RSLT_RESULTS_ALGORITHM_STATUS",
			"TYP4_ALG_CALC_AR_ERROR_STATUS",
			"results.alg_status",
			"Algorithm Status"
		};
		
		localTable = New Table("updateCol_funct29Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Algorithm Status"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Reported Concentration_callFunction30",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Results: Result Analyte Concentration",
			"RSLT_RESULTS_ANALYTE_CONC",
			"RESULT_VALUE",
			"Result Value",
			"results.analyte_conc"
		};
		
		localTable = New Table("updateCol_funct30Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Reported Concentration"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Flagging_callFunction31",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Results: Result Flag Value 1",
			"Results: Result Flag Value 2",
			"Results: Result Flag Value 3",
			"Results: Result Flag Value 4",
			"Results: Result Flag Value 5",
			"RSLT_RESULTS_FLAGS1",
			"RSLT_RESULTS_FLAGS2",
			"RSLT_RESULTS_FLAGS3",
			"RSLT_RESULTS_FLAGS4",
			"RSLT_RESULTS_FLAGS5",
			"TYP5_FLAG1",
			"TYP5_FLAG2",
			"TYP5_FLAG3",
			"DATA_5_Flag1",
			"DATA_5_Flag2",
			"DATA_5_Flag3",
			"Flag2 :5",
			"Flag 1",
			"Flag 2",
			"Flag 3"
		};
		
		localTable = New Table("updateCol_funct31Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1, i<=nitems(possCols),i++,
		
			If(
				Contains(lowercase(possCols[i]),"result"),
				flagValue = Right(possCols[i],1);
				finalName = "Results Flag"||flagValue;
				,
				If(
					Contains(possCols[i],"4") | Contains(possCols[i],"5"),
						flagValue = Substr(possCols[i],Contains(lowercase(possCols[i]),"flag")+4,1);
						If(
							Contains(possCols[i],"4"), flagType = "4"
						,
							Contains(possCols[i],"5"), flagType = "5"
						);
						finalName = "Flag"||flagValue||"_"||flagType;
					,
					flagValue = Right(possCols[i],1);
					finalName = "Flag"||flagValue||"_4";
				)
			);		
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(finalName));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Dilution Type_callFunction33",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Dilution Type :5",
			"TYP5_DILUTION_TYPE",
			"DILUTION_TYPE",
			"RUN_DILUTION_TYPE",
			"Dilution Type",
			"dilution_type"
		};
		
		localTable = New Table("updateCol_funct33Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dilution Type"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Curve Version_callFunction36",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"CURVE_VERSION",
			"TYP5_CURVES_VERSION",
			"Curve Version",
			"Results: Curve Version",
			"Curves Version :5",
			"curve_version",
			"Curve File Version"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Curve Version"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sample Type_callFunction37",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"SAMPLE_TYPE",
			"Sample Type",
			"SAMPLE_TYPE_NAME",
			"Sample Type Name"
		};
		table2 = New Table( "sampletype_funct37Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Sample Type"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sample Cup_callFunction38",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"DC_WBS_SAMPLECUP",
			"Sample Type (WBS or Sample Cup)",
			"container_location"
		};
		table2 = New Table( "samplecup_funct38Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Sample Cup"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Wet Cadence Interrupted_callFunction40",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"RSLT_CADENCE_INTERRUPTED_WET",
			"TYP2_CADENCE_INTRRPTD_WET_FLAG",
			"Cadence_interrupted_wet",
			"Results: Cadence Interrupted Wet",
			"Cadence Interrupted Wet :2",
			"cadence_interrupted_wet",
			"CadenceInterruptedWet"
		};
		
		For(i=1, i<=nitems(possCols),i++,
			localTable = New Table( "wetcadenceinterrupted_funct40Test",
				Add Rows( 4 ),
				New Column("placeholder",Character,Nominal,
					<< Set values( {"Y","FALSE","TRUE","N"})
				),
				private
			);
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			updateColNames(localTable);
			ut assert that(Expr(ncol(localTable)), ut equal to(2));
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wet Cadence Orig"));
			ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Wet Cadence Interrupted"));
			ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Y","FALSE","TRUE","N"}));
			ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to({"true","false","true","false"}));
			ut assert that(Expr(Column(localTable,2) << get formula), ut empty());
			Close(localTable,nosave);	
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Wavelength_2_callFunction43",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Center Wavelengths2 :2",
			"TYP2_CENTER_WAVELENGTHS2",
			"Wavelength2"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wavelength_2"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Wavelength_3_callFunction44",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Center Wavelengths3 :2",
			"TYP2_CENTER_WAVELENGTHS3",
			"Wavelength3"
		};
		
		localTable = New Table("updateCol_funct22Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Wavelength_3"));
			ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Ordinal"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Dilution Factor_callFunction45",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"RUN_DILUTION_FACTOR",
			"DILUTION_FACTOR",
			"dilution_factor"
		};
		
		localTable = New Table("updateCol_funct45Test",
			Add Rows(0),
			New Column("placeholder",Numeric,Continuous)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Dilution Factor"));

		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Barcode_callFunction47",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possCols = {
			"Barcode String :2",
			"TYP2_BARCODE_STRING",
			"barcode"
		};
		localTable = New Table("funct47Test",
			Add Rows(0),
			New Column("placeholder",Character,Nominal)
		);
		
		For(i=1, i<=nitems(possCols),i++,
			
			Column(localTable,1) << set name(possCols[i]);
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to(possCols[i]));
			
			updateColNames(localTable);
			
			ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Barcode"));
			
		)	
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Slide Sublot_callFunction48",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Sublot :2",
			"Sublot :5",
			"TYP2_SLIDE_SUBLOT",
			"RSLT_SLIDE_SUBLOT",
			"Results: Sublot",
			"Sub Lot",
			"Slide Sublot",
			"sublot",
			"Sublot"
		};
		table2 = New Table( "SublotRenames",
			Add Rows( 5 ),
			New Column( "Random Column",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			Column(table2,1) << set data type(Character);
			Column(table2,1) << set modeling type(Nominal);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Slide Sublot"));
			ut assert that(Expr(Column(table2,1) << get data type), ut equal to("Numeric"));
			ut assert that(Expr(Column(table2,1) << get modeling type), ut equal to("Ordinal"));
			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Timeseries Pt_callFunction49",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"reads.index"
		};
		table2 = New Table( "timeseriespt_funct49Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Timeseries Pt"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_False Light_callFunction50",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"false_light",
			"ulfalse_light",
			"Lytes False Light",
			"False Light :30"
		};
		table2 = New Table( "falselight_funct50Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("False Light"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Assay Gain_callFunction51",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Results: Assay Gain",
			"Gain Applied :4",
			"Assay Gain :30",
			"assay_gain",
			"Gain Applied"
		};
		table2 = New Table( "assaygain_funct51Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Assay Gain"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Assay Offset_callFunction52",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Results: Assay Offset",
			"Offset Applied :4",
			"Assay Offset :30",
			"assay_offset",
			"Offset Applied"
		};
		table2 = New Table( "assayoffset_funct52Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Assay Offset"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Scalar_callFunction53",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Lytes Scalar",
			"Scalar :50",
			"scalar",
			"fscalar"
		};
		table2 = New Table( "assayoffset_funct52Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Scalar"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Dry Read Start_callFunction54",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Lytes Dry Read Start",
			"Dry Avg Start :30",
			"dry_read_start",
			"Dry_Read_Start"
		};
		table2 = New Table( "dryreadstart_funct54Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Dry Read Start"));			
		)
				
	)
);

ut test(updateColNames, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Dry Read End_callFunction55",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		possColList = {
			"Lytes Dry Read End",
			"Dry Avg End :30",
			"dry_read_end",
			"Dry_Read_Finish"
		};
		table2 = New Table( "dryreadend_funct55Test",
			Add Rows( 5 ),
			New Column( "placeholder",
				Character,
				"Nominal"
			),
			private
		);
		
		For(i=1, i<=nitems(possColList),i++,
			
			Column(table2,1) << set name(possColList[i]);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to(possColList[i]));
			updateColNames(table2);
			ut assert that(Expr(Column(table2,1) << getname), ut equal to("Dry Read End"));			
		)
				
	)
);

	////////////////////////////////////////////////
	//         Lot Extractions (Foil, Sublot, etc)//
	////////////////////////////////////////////////
tpLibUT:utGroup = "C";
tpLibUT:utGroupTest = 0;

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_111",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table1 = New Table( "111",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [32,52, 21] )
			),
			private
		);

		lotExtractions(table1);
		ut assert that(Expr(ncol(table1)), ut equal to(4));
		ut assert that(Expr(Column(table1,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table1,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table1,"Foil") << get formula), ut empty());
		
	)
);

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_011",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table2 = New Table( "011",
			Add Rows( 3 ),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [32,52, 21] )
			),
			private
		);

		lotExtractions(table2);
		
		ut assert that(Expr(ncol(table2)), ut equal to(3));
		ut assert that(Expr(Column(table2,3) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table2,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table2,"Foil") << get formula), ut empty());
		
	)
);
	
ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_000",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table3 = New Table( "000",
			Add Rows( 3 ),
			New Column( "Random Column",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			private
		);

		lotExtractions(table3);
		
		ut assert that(Expr(ncol(table3)), ut equal to(4));
		ut assert that(Expr(Column(table3,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table3,3) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table3,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table3,"Slide Lot") << get as matrix ), ut equal to([-99, -99, -99]));
		ut assert that(Expr(Column(table3,"Slide Sublot") << get as matrix ), ut equal to([-99, -99, -99]));
		ut assert that(Expr(Column(table3,"Foil") << get as matrix ), ut equal to([-99, -99, -99]));
		
	)
);
	
ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_100",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table4 = New Table( "100",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216, 5316845212, 5988452134] )
			),
			private
		);

		lotExtractions(table4);
		
		ut assert that(Expr(ncol(table4)), ut equal to(4));
		ut assert that(Expr(Column(table4,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table4,3) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table4,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table4,"Slide Lot") << get as matrix ), ut equal to([152621, 531684, 598845]));
		ut assert that(Expr(Column(table4,"Slide Sublot") << get as matrix ), ut equal to([32, 52, 21]));
		ut assert that(Expr(Column(table4,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table4,"Slide Lot") << get formula), ut empty());
		ut assert that(Expr(Column(table4,"Slide Sublot") << get formula), ut empty());
		ut assert that(Expr(Column(table4,"Foil") << get formula), ut empty());
		
	)
);
	
ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_010",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table5 = New Table( "010",
			Add Rows( 3 ),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			private
		);
		
		lotExtractions(table5);
		
		ut assert that(Expr(ncol(table5)), ut equal to(3));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,3) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table5,"Slide Lot") << get as matrix ), ut equal to([152621, 531684, 598845]));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get as matrix ), ut equal to([-99, -99, -99]));
		ut assert that(Expr(Column(table5,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table5,"Slide Lot") << get formula), ut empty());
		ut assert that(Expr(Column(table5,"Slide Sublot") << get formula), ut empty());
		ut assert that(Expr(Column(table5,"Foil") << get formula), ut empty());
		
	)
);

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_001",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table5 = New Table( "001",
			Add Rows( 3 ),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			private
		);
		
		lotExtractions(table5);
		
		ut assert that(Expr(ncol(table5)), ut equal to(3));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table5,3) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table5,"Slide Lot") << get as matrix ), ut equal to([-99, -99, -99]));
		ut assert that(Expr(Column(table5,"Foil") << get as matrix ), ut equal to([-99, -99, -99]));
		
		
	)
);

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_110",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table5 = New Table( "110",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			private
		);
		
		lotExtractions(table5);
		
		ut assert that(Expr(ncol(table5)), ut equal to(4));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table5,3) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get as matrix ), ut equal to([32, 52, 21]));
		ut assert that(Expr(Column(table5,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get formula), ut empty());
		ut assert that(Expr(Column(table5,"Foil") << get formula), ut empty());
		
		
	)
);

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Foil, Sublot, Lot Extraction_101",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table5 = New Table( "101",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [32,52, 21] )
			),
			private
		);
		
		lotExtractions(table5);
		
		ut assert that(Expr(ncol(table5)), ut equal to(4));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,3) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table5,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table5,"Slide Sublot") << get as matrix ), ut equal to([32, 52, 21]));
		ut assert that(Expr(Column(table5,"Foil") << get as matrix ), ut equal to([21, 84, 45]));
		ut assert that(Expr(Column(table5,"Slide Lot") << get formula), ut empty());
		ut assert that(Expr(Column(table5,"Foil") << get formula), ut empty());
		
	)
);

ut test(generalColumnWork, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Lot Extraction_Foil already present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		/*Reference
		XXXXYYZZCC.
		X is lot
		Y is foil
		Z is sublot
		C is chem code*/
		
		table1 = New Table( "111 / 011",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [32,52, 21] )
			),
			New Column( "Foil",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [88, 88, 88] )
			),
			private
		);
		table2 = New Table( "100",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216, 5316845212, 5988452134] )
			),
			New Column( "Foil",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [88, 88, 88] )
			),
			private
		);
		table3 = New Table( "010",
			Add Rows( 3 ),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			New Column( "Foil",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [88, 88, 88] )
			),
			private
		);
		table4 = New Table( "110",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Lot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [152621,531684, 598845] )
			),
			New Column( "Foil",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [88, 88, 88] )
			),
			private
		);
		table5 = New Table( "101",
			Add Rows( 3 ),
			New Column( "Barcode",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [1526213216,5316845212, 5988452134] )
			),
			New Column( "Slide Sublot",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [32,52, 21] )
			),
			New Column( "Foil",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [88, 88, 88] )
			),
			private
		);
		
		lotExtractions(table1);
		lotExtractions(table2);
		lotExtractions(table3);
		lotExtractions(table4);
		lotExtractions(table5);
		
		ut assert that(Expr(ncol(table1)), ut equal to(4));
		ut assert that(Expr(Column(table1,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table1,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table1,3) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table1,4) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table1,"Foil") << get as matrix ), ut equal to([88, 88, 88]));
		ut assert that(Expr(Column(table1,"Foil") << get formula), ut empty());
		
		ut assert that(Expr(ncol(table2)), ut equal to(4));
		ut assert that(Expr(Column(table2,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table2,2) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table2,3) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table2,4) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table2,"Foil") << get as matrix ), ut equal to([88, 88, 88]));
		ut assert that(Expr(Column(table2,"Foil") << get formula), ut empty());
		
		ut assert that(Expr(ncol(table3)), ut equal to(3));
		ut assert that(Expr(Column(table3,1) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table3,2) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table3,3) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table3,"Foil") << get as matrix ), ut equal to([88, 88, 88]));
		ut assert that(Expr(Column(table3,"Foil") << get formula), ut empty());
		
		ut assert that(Expr(ncol(table4)), ut equal to(4));
		ut assert that(Expr(Column(table4,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table4,2) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table4,3) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table4,4) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table4,"Foil") << get as matrix ), ut equal to([88, 88, 88]));
		ut assert that(Expr(Column(table4,"Foil") << get formula), ut empty());
		
		ut assert that(Expr(ncol(table5)), ut equal to(4));
		ut assert that(Expr(Column(table5,1) << getname), ut equal to("Barcode"));
		ut assert that(Expr(Column(table5,2) << getname), ut equal to("Slide Sublot"));
		ut assert that(Expr(Column(table5,3) << getname), ut equal to("Foil"));
		ut assert that(Expr(Column(table5,4) << getname), ut equal to("Slide Lot"));
		ut assert that(Expr(Column(table5,"Foil") << get as matrix ), ut equal to([88, 88, 88]));
		ut assert that(Expr(Column(table5,"Foil") << get formula), ut empty());
		
	)
);
	
	////////////////////////////////////////////////
	//           wl Stacking Functions            //
	////////////////////////////////////////////////
tpLibUT:utGroup = "D";
tpLibUT:utGroupTest = 0;

ut test(wlStacking, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Column Identification",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;	
		ut assert that(Expr(rdwlIdent(table1)[1]), ut equal to({"ReflDens_avg","ReflDens_avg_2","ReflDens_avg_3"}));
		ut assert that(Expr(rdwlIdent(table1)[2]), ut equal to({"Wavelength","Wavelength_2","Wavelength_3"}));
		
		ut assert that(Expr(rdwlIdent(table2)[1]), ut equal to({"ReflDens_avg_2"}));
		ut assert that(Expr(rdwlIdent(table2)[2]), ut equal to({"Wavelength_2"}));
		
		ut assert that(Expr(rdwlIdent(table3)[1]), ut equal to({"ReflDens_avg","ReflDens_avg_2"}));
		ut assert that(Expr(rdwlIdent(table3)[2]), ut equal to({"Wavelength_2","Wavelength_3"}));
		
		ut assert that(Expr(rdwlIdent(table4)[1]), ut equal to({}));
		ut assert that(Expr(rdwlIdent(table4)[2]), ut equal to({}));
		
		ut assert that(Expr(rdwlIdent(table5)[1]), ut equal to({"ReflDens_avg","ReflDens_avg_2"}));
		ut assert that(Expr(rdwlIdent(table5)[2]), ut equal to({"Wavelength","Wavelength_2", "Wavelength_3"}));
	
	)
);

ut test(wlStacking, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Pairs checking & Errors",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		rd1 = {"ReflDens_avg","ReflDens_avg_2","ReflDens_avg_3"};
		wl1 = {"Wavelength","Wavelength_2","Wavelength_3"};
		
		rd2 = {"ReflDens_avg_2"};
		wl2 = {"Wavelength_2"};
		
		rd3 = {"ReflDens_avg","ReflDens_avg_2"};
		wl3 = {"Wavelength_2","Wavelength_3"};
		
		rd4 = {};
		wl4 = {};
		
		rd5 = {"ReflDens_avg","ReflDens_avg_2"};
		wl5 = wl1;
		
		
		ut assert that(Expr(rdwlPairsCheck(rd1,wl1)), ut equal to(1));
		ut assert that(Expr(rdwlPairsCheck(rd1,wl1)), ut log output(""));
		
		ut assert that(Expr(rdwlPairsCheck(rd2,wl2)), ut equal to(0));
		ut assert that(Expr(rdwlPairsCheck(rd2,wl2)), ut log output("\!N\!"Only one RD and Wavelength Column\!""));
		
		ut assert that(Expr(rdwlPairsCheck(rd3,wl3)), ut equal to(0));
		ut assert that(Expr(rdwlPairsCheck(rd3,wl3)), ut log output("\!N\!"RD and WL columns not present in matching pairs\!""));
		
		ut assert that(Expr(rdwlPairsCheck(rd4,wl4)), ut equal to(0));
		ut assert that(Expr(rdwlPairsCheck(rd4,wl4)), ut log output("\!N\!"No RD or WL Columns Present\!""));
		
		ut assert that(Expr(rdwlPairsCheck(rd5,wl5)), ut equal to(0));
		ut assert that(Expr(rdwlPairsCheck(rd5,wl5)), ut log output("\!N\!"Differing number of RD and WL Columns\!""));
	
	)
);
 
ut test(wlStacking, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Stacking Cols_3 pairs",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		rdCols = {"ReflDens_avg","ReflDens_avg_2","ReflDens_avg_3"};
		wlCols = {"Wavelength","Wavelength_2","Wavelength_3"};
		
		table = wlStack(table1,rdCols,wlCols);
		Summarize(table,a=By(:Wavelength));
		
		ut assert that(Expr(nrow(table)), ut equal to(2909));
		ut assert that(Expr(Column(table,9)<<get name), ut equal to("ReflDens_avg"));
		ut assert that(Expr(Column(table,10)<<get name), ut equal to("Wavelength"));
		ut assert that(Expr(Column(table,10)<<get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(a), ut equal to({".", "365.73", "367.58", "405.92", "406.7", "406.83", "465.78", "467.94", "559.08", "559.32", "588.81", "588.86", "589.21", "648.89", "649.14", "659", "676.75", "678.11"}));
		
	)
);

ut test(wlStacking, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Stacking Cols_2 pairs",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		rdCols = {"ReflDens_avg","ReflDens_avg_2"};
		wlCols = {"Wavelength","Wavelength_2"};
		
		table = wlStack(table6,rdCols,wlCols);
		
		ut assert that(Expr(nrow(table)), ut equal to(1614));
		ut assert that(Expr(Column(table,9)<<get name), ut equal to("ReflDens_avg"));
		ut assert that(Expr(Column(table,10)<<get name), ut equal to("Wavelength"));
	)
);

//Need add test for function(s) within tablePrepFunction

	////////////////////////////////////////////////
	//       Unique Identifier Functions          //
	////////////////////////////////////////////////
tpLibUT:utGroup = "E";
tpLibUT:utGroupTest = 0;
//do a few tables of random column names
ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Identifier_RandCols1",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table1,"Sort");
		
		ut assert that(Expr(table1:uniqueSort[1]), ut equal to("3680857916.000_CTDX003571"));
		ut assert that(Expr(table1:uniqueSort[2]), ut equal to("3680857916.000_CTDX003573"));
		ut assert that(Expr(table1:uniqueSort[3]), ut equal to("3680857916.000_CTDX003572"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Identifier_RandCols2",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table2,"Sort");
		
		ut assert that(Expr(table2:uniqueSort[1]), ut equal to("WL_560_BA_12542_Tue Oct 16 2012_CTDX003571_2012OCT16_173324_1_63204.000"));
		ut assert that(Expr(table2:uniqueSort[2]), ut equal to("WL_587_BA_12542_Tue Oct 16 2012_CTDX003571_2012OCT16_173324_1_63204.000"));
		ut assert that(Expr(table2:uniqueSort[3]), ut equal to("WL_405_BA_12542_Tue Oct 16 2012_CTDX003571_2012OCT16_173324_1_63204.000"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Identifier_RandCols3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table3,"Sort");
		
		ut assert that(Expr(table3:uniqueSort[1]), ut equal to("WL_560_BA_12542_Tue Oct 16 2012_3680092352.000_CTDX003571_2012OCT16_173324_12_V4635135_1_3_63204.000"));
		ut assert that(Expr(table3:uniqueSort[2]), ut equal to("WL_587_BA_12542_Tue Oct 16 2012_3680092352.000_CTDX003571_2012OCT16_173324_12_V4635135_2_2_63204.000"));
		ut assert that(Expr(table3:uniqueSort[3]), ut equal to("WL_405_BA_12542_Tue Oct 16 2012_3680092352.000_CTDX003571_2012OCT16_173324_12_V4635135_3_1_63204.000"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Identifier_NoSortCols",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		ut assert that(Expr(uniqueIDs(table4,"Sort")), ut log output("\!N\!"No columns for sorting\!""));
		ut assert that(Expr(table4:uniqueSort[1]), ut equal to("1"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Identifier_Column already there",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table5,"Sort");
		
		ut assert that(Expr(table5:uniqueSort 2[1]), ut throws(ut anything()));
		
		ut assert that(Expr(table5:uniqueSort[1]), ut equal to("3680857916_CTDX003571"));
		ut assert that(Expr(table5:uniqueSort[2]), ut equal to("3680857916_CTDX003576"));
		ut assert that(Expr(table5:uniqueSort[3]), ut equal to("3680857916_CTDX003574"));
		
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_IDs Identifier_RandCols3",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table3,"IDs");
		
		ut assert that(Expr(table3:uniqueRunID[1]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204"));
		ut assert that(Expr(table3:uniqueRunID[2]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204"));
		ut assert that(Expr(table3:uniqueRunID[3]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204"));
		
		ut assert that(Expr(table3:uniqueAssayID[1]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_1_3"));
		ut assert that(Expr(table3:uniqueAssayID[2]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_2_2"));
		ut assert that(Expr(table3:uniqueAssayID[3]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_3_1"));
		
		ut assert that(Expr(table3:uniqueCurveID[1]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_1_3_WL_560"));
		ut assert that(Expr(table3:uniqueCurveID[2]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_2_2_WL_587"));
		ut assert that(Expr(table3:uniqueCurveID[3]), ut equal to("12542_CTDX003571_2012OCT16_173324_12_V4635135_63204_BA_3_1_WL_405"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Run Identifier_RandCols1",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		uniqueIDs(table1,"Sort");
		
		ut assert that(Expr(table1:uniqueRun[1]), ut equal to("CTDX003571_LOWC"));
		ut assert that(Expr(table1:uniqueRun[2]), ut equal to("CTDX003573_LOWC"));
		ut assert that(Expr(table1:uniqueRun[3]), ut equal to("CTDX003572_LOWC"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Run Identifier_1 col 1 value",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		table1 << delete columns("Instrument ID");
		uniqueIDs(table1,"Sort");
		
		ut assert that(Expr(table1:uniqueRun[1]), ut equal to("1"));
		ut assert that(Expr(table1:uniqueRun[2]), ut equal to("1"));
		ut assert that(Expr(table1:uniqueRun[3]), ut equal to("1"));
			
	)
);

ut test(uniqueIDs, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_Sorting Run Identifier_1 col >1 value",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		table1 << delete columns("Sample id");
		uniqueIDs(table1,"Sort");
		
		ut assert that(Expr(table1:uniqueRun[1]), ut equal to("CTDX003571"));
		ut assert that(Expr(table1:uniqueRun[2]), ut equal to("CTDX003573"));
		ut assert that(Expr(table1:uniqueRun[3]), ut equal to("CTDX003572"));
			
	)
);

	////////////////////////////////////////////////
	//       TablePrep Full Function              //
	////////////////////////////////////////////////
tpLibUT:utGroup = "F";
tpLibUT:utGroupTest = 0;

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_C1_SAS_base",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_c1_SAS.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_c1_SAS.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_C1_SAS_base_multWL",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_c1_SAS_multWL.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_c1_SAS_multWL.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_C1_SAS_Base with Sublot",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\c1Base_withSublot.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\c1Prepped_withSublot.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_SAS_base",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_SAS.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_SAS.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_SAS_multWL",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_SAS_multWL.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_SAS_multWL.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_SAS_multWL_wlNotMissing",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_SAS_notMissingWL2.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_SAS_notMissingWL2.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_SAS_Base with Sublot",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\cdxBase_withSublot.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\cdxPrepped_withSublot.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_oldParser_base",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_Parser.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_Parser.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_DX_oldParser_multWL",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_Parser_multWL.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_Parser_multWL.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);

////////TESTS WITH BI DATA
/*
ut test(fullFuncionality, "DX_BI",
	Expr(
		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_SAS.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_SAS.jmp",invisible);
		
		tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		
		ut assert that(Expr(r["Data"][textbox(1)] << get text), ut equal to("There is no difference in data"));
		ut assert that(Expr(r["Table Properties"][textbox(1)] << get text), ut equal to("There is no difference in table variables or table scripts."));
		ut assert that(Expr(r["Column Attributes and Properties"][textbox(1)] << get text), ut equal to("There is no difference in columns' attributes or properties."));
		
		ut assert that(Expr(r["Tables Info"][2][TextBox(1)] << get text), ut equal to(""));// usually "" but some major differences may make this have a value
		ut assert that(Expr(r["Tables Info"][ListBox(4)] << child), ut empty());// not empty if unmatched cols present
		ut assert that(Expr(r["Tables Info"][ListBox(5)] << child), ut empty());// empty unless some levels of difference found
		
	)
);
*/
/*
ut test(fullFuncionality, "C1_BI",
	Expr(
		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Base_dx_SAS.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\Prepped_dx_SAS.jmp",invisible);
		
		tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		
		ut assert that(Expr(r["Data"][textbox(1)] << get text), ut equal to("There is no difference in data"));
		ut assert that(Expr(r["Table Properties"][textbox(1)] << get text), ut equal to("There is no difference in table variables or table scripts."));
		ut assert that(Expr(r["Column Attributes and Properties"][textbox(1)] << get text), ut equal to("There is no difference in columns' attributes or properties."));
		
		ut assert that(Expr(r["Tables Info"][2][TextBox(1)] << get text), ut equal to(""));// usually "" but some major differences may make this have a value
		ut assert that(Expr(r["Tables Info"][ListBox(4)] << child), ut empty());// not empty if unmatched cols present
		ut assert that(Expr(r["Tables Info"][ListBox(5)] << child), ut empty());// empty unless some levels of difference found
		
	)
);
*/

ut test(fullFuncionality, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_C1_BA uniqueSort_WL first",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;		
		base = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\C1_BA_newSort.jmp",invisible);
		expected = Open("D:\JSL Development\Official JMP Addin Working\UnitTesting\Libraries2\Files\tblPrep\C1_BA_newSort_correct.jmp",invisible);
		expCols = expected << get column names( string );
		base = tablePrep(base);
		comp = tpLibUT:tableCompare(base,expected);
		baseCols = base << get column names( string );
		
		ut assert that(Expr(comp[2] << Are Data Different), ut equal to(0));
		ut assert that(Expr(comp[2] << Get columns properties differences), ut empty());
		ut assert that(Expr(comp[2] << Get columns attributes differences), ut empty());
		ut assert that(Expr(comp[2] << Get unmatched columns list), ut empty());
		ut assert that(Expr(comp[2] << Get Columns List( "Mismatched Data Type" )), ut empty());
	)
);


//C1 old parser??
//KTS parsers

	////////////////////////////////////////////////
	//       DateTime Function                    //
	////////////////////////////////////////////////
tpLibUT:utGroup = "G";
tpLibUT:utGroupTest = 0;

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of None",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod None",
			Add Rows(3),
			New Column("DateTime",Numeric,Continuous,
				set values([3, 4, 5])
			)
		);
		
		dateTimeModification(localTable,"None");
		
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));
		ut assert that(Expr(ncol(localTable)), ut equal to(1));
		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3, 4, 5]));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of OPS",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod OPS",
			Add Rows(6),
			New Column("Date/Time",Numeric,Continuous,
				Format( "ddMonyyyy h:m:s", 22, 0 ),
				Input Format( "ddMonyyyy h:m:s", 0 ),
				Set Values( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, -1, 0, 1] )
			)
		);
		
		dateTimeModification(localTable,"OPS");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(5));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date/Time"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894]));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to([3610256698, 3610256698, 3610256698, 36102556698, 36102556698, 36102556698]));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to([3610256698, 3610256698, 3610256698, 36102556698, 36102556698, 36102556698]));
		ut assert that(Expr(Column(localTable,5) << get as matrix), ut equal to({"05/27/2018", "05/27/2018", "05/27/2018", "01/16/3048", "01/16/3048", "01/16/3048"}));
		
		ut assert that(Expr(Column(localTable,1) << get format), ut expression matches(Expr(Format( "ddMonyyyy h:m:s", 22, 0 ))));
		ut assert that(Expr(Column(localTable,3) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,4) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,5) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,3) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,4) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of ISL",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod ISL",
			Add Rows(6),
			New Column("Date",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}
				)
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, 1, 0, -1] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"ISL");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(8));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date-orig"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time-orig"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("IVLS Run ID"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("DateTime"));
		ut assert that(Expr(Column(localTable,6) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,7) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,8) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004"}));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [846, 846, 846, 1353, 1353, 1353]));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to([-1, 0, 1, -1, 0, 1]));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to([145, 145, 145, 154, 154, 154]));
		ut assert that(Expr(Column(localTable,5) << get as matrix), ut equal to([3602103246, 3602103246, 3602103246, 3156711753, 3156711753, 3156711753]));
		ut assert that(Expr(Column(localTable,6) << get as matrix), ut equal to([3602103246, 3602103246, 3602103246, 3156711753, 3156711753, 3156711753]));
		ut assert that(Expr(Column(localTable,7) << get as matrix), ut equal to([3602103246, 3602103246, 3602103246, 3156711753, 3156711753, 3156711753]));
		ut assert that(Expr(Column(localTable,8) << get as matrix), ut equal to({"02/22/2018", "02/22/2018", "02/22/2018", "01/12/2004", "01/12/2004", "01/12/2004"}));
		
		ut assert that(Expr(Column(localTable,5) << get format), ut expression matches(Expr(Format( "y/m/d h:m:s", 22, 0 ))));
		ut assert that(Expr(Column(localTable,6) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,7) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,8) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,6) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,7) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,8) << get formula), ut empty());
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of ISL, Date-orig present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod ISL_date orig present",
			Add Rows(6),
			New Column("Date-orig",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}
				)
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, 1, 0, -1] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"ISL");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(4));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date-orig"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("IVLS Run ID"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to([-1, 0, 1, 1, 0, -1]));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to([154, 154, 154, 145, 145, 145]));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of sysSW, Date present",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod sysSW_ Date present",
			Add Rows(6),
			New Column("Date",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}
				)
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),

		);
		
		dateTimeModification(localTable,"sysSW");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_creating Char_Date, no Date present, instMethod is None",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		// used None to bypass the bulk of the code and focus on the Try()s around creating Char_Date
		
		localTable = New Table("datetime instMethod None_ no Date present",
			Add Rows(6),
			New Column("Date-orig",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}
				)
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),

		);
		
		dateTimeModification(localTable,"None");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date-orig"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_creating Char_Date, Date present and nonNumeric, instMethod is None",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		// used None to bypass the bulk of the code and focus on the Try()s around creating Char_Date
		
		localTable = New Table("datetime instMethod None_ Date present nonNumeric",
			Add Rows(6),
			New Column("Date",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}
				)
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),

		);
		
		dateTimeModification(localTable,"None");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(2));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to({"Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Jan 12 2004", "Ran Feb 22 2018", "Ran Feb 22 2018", "Ran Feb 22 2018"}));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_creating Char_Date, Date present and Numeric, instMethod is None",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		// used None to bypass the bulk of the code and focus on the Try()s around creating Char_Date
		
		localTable = New Table("datetime instMethod None_ Date present Numeric",
			Add Rows(6),
			New Column("Date",Numeric,Continuous,
				Format( "ddMonyyyy h:m:s", 22, 0 ),
				Input Format( "ddMonyyyy h:m:s", 0 ),
				Set Values( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),

		);
		
		dateTimeModification(localTable,"None");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(3));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894]));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to({"05/27/2018", "09/24/2019", "08/04/2015", "01/16/3048", "09/24/2019", "08/04/2015"}));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_creating Char_Date, Date present, Numeric but Char_Date present, instMethod is None",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		// used None to bypass the bulk of the code and focus on the Try()s around creating Char_Date
		
		localTable = New Table("datetime instMethod None_ Date present Numeric Char_Date Present",
			Add Rows(6),
			New Column("Date",Numeric,Continuous,
				Format( "ddMonyyyy h:m:s", 22, 0 ),
				Input Format( "ddMonyyyy h:m:s", 0 ),
				Set Values( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column("Char_Date",Numeric,Continuous,
				Character,
				"Nominal",
				Set Values(
					{"05/27/2018", "09/24/2019", "08/04/2015", "01/16/3048", "09/24/2019", "08/04/2015"}
				)
			),

		);
		
		dateTimeModification(localTable,"None");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(3));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to([3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894]));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846]));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to( {"05/27/2018", "09/24/2019", "08/04/2015", "01/16/3048", "09/24/2019", "08/04/2015"}));
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of sysSW, No Date, No TimeFromSampleDispense:sec",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod sysSW_ No Date_ No TimeFromSampleDispense:sec",
			Add Rows(6),
			New Column("DateTime",Numeric,Continuous,
				Format( "ddMonyyyy h:m:s", 22, 0 ),
				Input Format( "ddMonyyyy h:m:s", 0 ),
				Set Values( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"sysSW");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(6));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("GMTime"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("IVLS Run ID"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,6) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] ));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [1353, 1353, 1353, 846, 846, 846] ));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to( [154, 154, 154, 145, 145, 145] ));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] ));
		ut assert that(Expr(Column(localTable,5) << get as matrix), ut equal to( [3610256698, 3652155463, 3521556894, 36102556698, 3652155463, 3521556894] ));
		ut assert that(Expr(Column(localTable,6) << get as matrix), ut equal to( {"05/27/2018", "09/24/2019", "08/04/2015", "01/16/3048", "09/24/2019", "08/04/2015"} ));
		
		ut assert that(Expr(Column(localTable,4) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,5) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,6) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,4) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,6) << get formula), ut empty());
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of sysSW, No Date, Yes TimeFromSampleDispense:sec, Numeric DateTime",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod sysSW_ No Date_ Yes TimeFromSampleDispense:sec",
			Add Rows(6),
			New Column("DateTime",Numeric,Continuous,
				Format( "ddMonyyyy h:m:s", 22, 0 ),
				Input Format( "ddMonyyyy h:m:s", 0 ),
				Set Values( [3610256698, 3610256698, 3610256698, 36102556698, 36102556698, 36102556698] )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, 1, 0, -1] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"sysSW");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(7));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("GMTime"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("IVLS Run ID"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,6) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,7) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to( [36102556698, 36102556698, 36102556698, 3610256698, 3610256698, 3610256698] ));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [846, 846, 846, 1353, 1353, 1353] ));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to( [-1, 0, 1, -1, 0, 1] ));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to( [145, 145, 145, 154, 154, 154] ));
		ut assert that(Expr(Column(localTable,5) << get as matrix), ut equal to( [36102556698, 36102556698, 36102556698, 3610256698, 3610256698, 3610256698] ));
		ut assert that(Expr(Column(localTable,6) << get as matrix), ut equal to( [36102556698, 36102556698, 36102556698, 3610256698, 3610256698, 3610256698] ));
		ut assert that(Expr(Column(localTable,7) << get as matrix), ut equal to( {"01/16/3048", "01/16/3048", "01/16/3048", "05/27/2018", "05/27/2018", "05/27/2018"} ));
		
		ut assert that(Expr(Column(localTable,5) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,6) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,7) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,4) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,6) << get formula), ut empty());
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of sysSW, No Date, Yes TimeFromSampleDispense:sec, convertable Char DateTime",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod sysSW_ No Date_ Yes TimeFromSampleDispense:sec char_num_Datetime",
			Add Rows(6),
			New Column("DateTime",Numeric,Continuous,
				Character,
				Nominal,
				Set Values( {"19AUG2020:11:53:55.727377","19AUG2020:11:53:55.727377","19AUG2020:11:53:55.727377","22AUG2020:11:53:55.727377","22AUG2020:11:53:55.727377","22AUG2020:11:53:55.727377"} )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, 1, 0, -1] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"sysSW");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(7));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("GMTime"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("IVLS Run ID"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,6) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,7) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Round(Column(localTable,1) << get as matrix,5)), ut equal to( [3680942035.72738, 3680942035.72738, 3680942035.72738, 3680682835.72738, 3680682835.72738, 3680682835.72738] ));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [846, 846, 846, 1353, 1353, 1353] ));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to( [-1, 0, 1, -1, 0, 1] ));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to( [145, 145, 145, 154, 154, 154] ));
		ut assert that(Expr(Round(Column(localTable,5) << get as matrix,5)), ut equal to( [3680942035.72738, 3680942035.72738, 3680942035.72738, 3680682835.72738, 3680682835.72738, 3680682835.72738] ));
		ut assert that(Expr(Round(Column(localTable,6) << get as matrix,5)), ut equal to( [3680942035.72738, 3680942035.72738, 3680942035.72738, 3680682835.72738, 3680682835.72738, 3680682835.72738] ));
		ut assert that(Expr(Column(localTable,7) << get as matrix), ut equal to( {"08/22/2020", "08/22/2020", "08/22/2020", "08/19/2020", "08/19/2020", "08/19/2020"} ));
		
		ut assert that(Expr(Column(localTable,1) << get format), ut expression matches(Expr(Format( "ddMonyyyy h:m:s", 22, 0 ))));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Continuous"));
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Numeric"));
		ut assert that(Expr(Column(localTable,5) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,6) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,7) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,4) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,6) << get formula), ut empty());
		
	)
);

ut test(dateTimeTC, tpLibUT:utGroup||Char(tpLibUT:utGroupTest+1)||"_instMethod of sysSW, No Date, Yes TimeFromSampleDispense:sec, nonconvertable Char DateTime",
	Expr(
		tpLibUT:utGroupTest = tpLibUT:utGroupTest + 1;
		
		localTable = New Table("datetime instMethod sysSW_ No Date_ Yes TimeFromSampleDispense:sec char_num_Datetime",
			Add Rows(6),
			New Column("DateTime",Numeric,Continuous,
				Character,
				Nominal,
				Set Values( {"2021.11.19T05:52:23.197 -0500","2021.11.19T05:52:23.197 -0500","2021.11.19T05:52:23.197 -0500","2020.01.16T03:52:21.197 -0700","2020.01.16T03:52:21.197 -0700","2020.01.16T03:52:21.197 -0700"} )
			),
			New Column("Time",Numeric,Continuous,
				Numeric,
				"Continuous",
				Format( "h:m:s", 12, 0 ),
				Input Format( "h:m:s", 0 ),
				Set Selected,
				Set Values( [1353, 1353, 1353, 846, 846, 846] )
			),
			New Column( "TimeFromSampleDispense:sec",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [-1, 0, 1, 1, 0, -1] )
			),
			New Column( "IVLS Run ID",
				Numeric,
				"Continuous",
				Format( "Best", 12 ),
				Set Values( [154, 154, 154, 145, 145, 145] )
			),
		);
		
		dateTimeModification(localTable,"sysSW");
		
		ut assert that(Expr(ncol(localTable)), ut equal to(9));
		ut assert that(Expr(Column(localTable,1) << getname), ut equal to("DateTime-orig"));
		ut assert that(Expr(Column(localTable,2) << getname), ut equal to("GMTime"));
		ut assert that(Expr(Column(localTable,3) << getname), ut equal to("TimeFromSampleDispense:sec"));
		ut assert that(Expr(Column(localTable,4) << getname), ut equal to("IVLS Run ID"));
		ut assert that(Expr(Column(localTable,5) << getname), ut equal to("DateTime"));
		ut assert that(Expr(Column(localTable,6) << getname), ut equal to("Time Zone Adjustment(h)"));
		ut assert that(Expr(Column(localTable,7) << getname), ut equal to("Date"));
		ut assert that(Expr(Column(localTable,8) << getname), ut equal to("Time"));
		ut assert that(Expr(Column(localTable,9) << getname), ut equal to("Char_Date"));

		ut assert that(Expr(Column(localTable,1) << get as matrix), ut equal to( {"2020.01.16T03:52:21.197 -0700","2020.01.16T03:52:21.197 -0700","2020.01.16T03:52:21.197 -0700","2021.11.19T05:52:23.197 -0500","2021.11.19T05:52:23.197 -0500","2021.11.19T05:52:23.197 -0500"} ));
		ut assert that(Expr(Column(localTable,2) << get as matrix), ut equal to( [846, 846, 846, 1353, 1353, 1353] ));
		ut assert that(Expr(Column(localTable,3) << get as matrix), ut equal to( [-1, 0, 1, -1, 0, 1] ));
		ut assert that(Expr(Column(localTable,4) << get as matrix), ut equal to( [145, 145, 145, 154, 154, 154] ));
		ut assert that(Expr(Round(Column(localTable,5) << get as matrix,3)), ut equal to( [3661991541.197, 3661991541.197, 3661991541.197, 3720145943.197, 3720145943.197, 3720145943.197] ));
		ut assert that(Expr(Column(localTable,6) << get as matrix), ut equal to( [-7, -7, -7, -5, -5, -5] ));
		ut assert that(Expr(Round(Column(localTable,7) << get as matrix,3)), ut equal to( [3661991541.197, 3661991541.197, 3661991541.197, 3720145943.197, 3720145943.197, 3720145943.197] ));
		ut assert that(Expr(Round(Column(localTable,8) << get as matrix,3)), ut equal to( [3661991541.197, 3661991541.197, 3661991541.197, 3720145943.197, 3720145943.197, 3720145943.197] ));
		ut assert that(Expr(Column(localTable,9) << get as matrix), ut equal to( {"01/16/2020", "01/16/2020", "01/16/2020", "11/19/2021", "11/19/2021", "11/19/2021"} ));
		
		ut assert that(Expr(Column(localTable,1) << get data type), ut equal to("Character"));
		ut assert that(Expr(Column(localTable,1) << get modeling type), ut equal to("Nominal"));
		ut assert that(Expr(Column(localTable,5) << get format), ut expression matches(Expr(Format( "ddMonyyyy h:m:s", 22, 0 ))));
		ut assert that(Expr(Column(localTable,6) << get modeling type), ut equal to("Ordinal"));
		ut assert that(Expr(Column(localTable,7) << get format), ut expression matches(Expr(Format( "m/d/y", 10 ))));
		ut assert that(Expr(Column(localTable,8) << get format), ut expression matches(Expr(Format( "h:m:s", 11, 0 ))));
		ut assert that(Expr(Column(localTable,9) << get data type), ut equal to("Character"));
		
		ut assert that(Expr(Column(localTable,5) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,6) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,7) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,8) << get formula), ut empty());
		ut assert that(Expr(Column(localTable,9) << get formula), ut empty());
		
	)
);

///Reported test result formula from Jesse
///Dilution / Dilution type rename for CatOne
///DIlution type match for CatDx?
///


/////////////////////////////////////////////////////////////
//                                                         //
//          Finishing Off                                  //
//                                                         //
/////////////////////////////////////////////////////////////

Match(tpLibUT:saveFile,
	0, tpLibUT << delete,
	1, ut global reporter:save report(tpLibUT:savePath||tpLibUT:reportName); tpLibUT << delete;
);