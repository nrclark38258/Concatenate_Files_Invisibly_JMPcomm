//////GenericBeckman jslHamcrest Unit Tests//////
beckUT = New Namespace("GenBeckmanUnitTest");
beckUT:saveFile = 0;
beckUT:savePath = "C:/Users/nclark/desktop/TestUnitFiles/";
beckUT:reportName = "testReport.txt";

beckUT:toolPath = "R:\Systems_Chemistry_Engineering\Tools\Official JMP Addin Development\Official JMP Addin Working\Assay Development\Generic\Beckman Processing\BeckmanProcessingTool.jsl";
//baUT:toolPath = "R:\Systems_Chemistry_Engineering\Tools\Official JMP Addin Development\Official JMP Addin Working\Assay Development\Bile Acids\AR Calculator\RDBile_ARCalculation.jsl";

Match(beckUT:saveFile,
	1, ut global reporter = New Object("ut collecting reporter")
);

/////////////////////////////////////////////////////////////
//                                                         //
//          TEST CASES                                     //
//                                                         //
/////////////////////////////////////////////////////////////

uniqueIDs = ut test case("New Unique IDs")
	<<Setup(Expr(
		include(beckUT:toolPath);
		fileID = {"/R:/Systems_Chemistry_Engineering/Tools/Official JMP Addin Development/Official JMP Addin Working/UnitTesting/Assay Development_UT/GenericUT/BeckmanProcessingUT/Files/CysBbeckTestFile.csv"};
	
		splitName = fileProcessing(fileID);
	));
	
makingJustResults = ut test case("Make justResults")
	<<Setup(Expr(
		include(beckUT:toolPath);
		fileID = {"/R:/Systems_Chemistry_Engineering/Tools/Official JMP Addin Development/Official JMP Addin Working/UnitTesting/Assay Development_UT/GenericUT/BeckmanProcessingUT/Files/CysBbeckTestFile.csv"};
	
		splitName = fileProcessing(fileID);
		tableList = finalProcessing(splitName);
		progCurves = tableList[2];
		justRslts = tableList[3];
	));


/////////////////////////////////////////////////////////////
//                                                         //
//          UNIT TESTS                                     //
//                                                         //
/////////////////////////////////////////////////////////////

ut test(uniqueIDs, "UniqueCurveID", Expr(
	
	colList = splitName << get column names (string);

	ut assert that(Expr(splitName:UniqueCurveID[1]), ut equal to("IDX-Internal_01/10/2020 10:42_3661496613_1_87.YZ_1_340nm"));
	ut assert that(Expr(contains(colList,"UniqueCurveID")), ut equal to(3));
	
));

ut test(uniqueIDs, "UniqueRunID", Expr(
	
	ut assert that(Expr(splitName:UniqueRunID[1]), ut equal to("IDX-Internal_01/10/2020 10:42_3661496613_1_87.YZ_1"));
	
));

ut test(makingJustResults, "Button Exists", Expr(
	
	tblScript = progCurves << Get Table Script Names;

	ut assert that(Expr(Contains(tblScript,"Make justResults")), ut greater than (0));
	
));

ut test(makingJustResults, "Button Works", Expr(
	
	justRslts << close window;
	tblList1 = {};
	tblList2 = {};

	for(i=1,i<=ntable(),i++,
		insertinto(tblList1,datatable(i)<<getname)
	);
	progCurves << Run Script("Make justResults");
	for(i=1,i<=ntable(),i++,
		insertinto(tblList2,datatable(i)<<getname)
	);
	for(i=1,i<=nitems(tblList1),i++,
		a = Contains(tblList2,tblList1[i]);
		RemoveFrom(tblList2,a);
	);
	
	ut assert that(Expr(Word(3,tblList2[1],"_")), ut equal to ("justResults"));
	
));

ut test(makingJustResults, "justResults Table Correct", Expr(
	
	justRslts << close window;
	tblList1 = {};
	tblList2 = {};

	for(i=1,i<=ntable(),i++,
		insertinto(tblList1,datatable(i)<<getname)
	);
	progCurves << Run Script("Make justResults");
	for(i=1,i<=ntable(),i++,
		insertinto(tblList2,datatable(i)<<getname)
	);
	for(i=1,i<=nitems(tblList1),i++,
		a = Contains(tblList2,tblList1[i]);
		RemoveFrom(tblList2,a);
	);
	Summarize(Datatable(tblList2[1]),numRuns = by(:Name("UniqueRunID")));
	
	ut assert that(Expr(nrow(Datatable(tblList2[1]))), ut equal to (624));
	ut assert that(Expr(nitems(numRuns)), ut equal to (48));
	
));

/////////////////////////////////////////////////////////////
//                                                         //
//          Finishing Off                                  //
//                                                         //
/////////////////////////////////////////////////////////////

Match(beckUT:saveFile,
	0, beckUT << delete,
	1, ut global reporter:save report(beckUT:savePath||beckUT:reportName); beckUT << delete;
);