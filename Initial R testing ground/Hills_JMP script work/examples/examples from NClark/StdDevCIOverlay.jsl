// Launch Window for SD analysis with CI lines

//Author:
//Nathan Clark
//IDEXX Laborabories, Inc.
//Westbrook, ME
//nathan-clark@idexx.com

//------------------Revision History for both script and Help File--
//
//	2.5 NClark 101615
//		-> No script change. Menu structure change
//	2.4 NClark 092915
//		-> Updated com.idexx.FIVEXTools with com.idexx.nclark.SDCI
//	2.3 NClark 102414
//		-> Updated 'NewdtSD' to be made as Private instead of Invisible in JMP11
//			-> Fixes 'phantom' table that remains invisible even after graph made and closed - supposed to be unseen by user.
//				JMP10 does not operate correctly and this fixes issue with JMP11 operating 
//		-> Created If statement that opens Invisible if JMP10 being use and Private if anything but JMP10 is being used
//	2.2 NClark 101714
//		-> Updated dialog so help button works
//	2.1-beta NClark - Changed "Stock" to "Interval" to get horizontal lines on CI lines 
//	2.0-beta NClark - Several things to be added:
//		092513-checkbox for showing SD/CI table -- done
//		092513-variable setup for above checkbox -- done
//		092513-IF statment to setup invisible/not invisible for SD/CI table -- done
//		100913-Create 4th column list for "Group X" option in Graph Builder -- done
//		Change graphical output to Graph Builder (like ExactBinom jsl) -- in progress
//		100913-Maintain Value Ordering from Original Table to SD/CI table (X, By) -- done
//		100913-Maintain Value Ordering from Original Table to SD/CI table (Group X) -- done
//		101013-added 'BEtA' to all global variables... to be removed when taken off BETA
//		101113-Adjust math for a correct CI on %CV?	-- done
//	1.6 NClark 082712 - Updated Help file to include note that alterations to default platform preferences may alter how graphics appear.
//	1.5 NClark 080912 - Added "About" Button and variable for easy location of currennt version and author information. And removed version information from Help File
// 1.4 NClark 062212
//			-> Updated dialog window for choosing graphs... rescripted for better H and V list arrangement
//			-> Added globals for graph checkboxes (Mean, Std Dev, and CV)
//			-> Recall correctly working for checkboxes
//			-> Created cases for each iteration that will delete rows of undesired parameters
//			-> Fixed issue when only one graph selected
//			-> Updated Help file for ability to choose graphs
// 1.3 NClark 062112
//			-> Updated Help file to warn about commas in Column name of X or BY
// 1.2 NClark 062112
//			-> Changed Dispatch to add major and minor grid lines on x-axis
// 1.1 NClark 061412
//			-> Added lines to close intermediate tables
//			-> Added line to "Clear Symbols" for last table so it would automatically close when the chart was closed
// 1.0 NClark 0611312
//			-> First offical release
// B8 NClark 061212
//			-> Updated to work with "Here" namespace yet keep globals for recall
//			-> Added Variable List
// B7 NClark 060712
//			-> removed variable from Remove feature that is no longer in the script
//			-> changed marker/color for Upper and Lower CI to black dashes
//			-> Added reference for Help button
// B6 NClark 053012
//			-> Adjusted Y-Axis to read Mean, Std Dev, or CV, depending on the graph
// B5 NClark 053012
//			-> Added CV to parameter list (several table manipulations)
//				->(SD, UCI & LCI each divided by the Mean) * 100
//			-> Labeled Legend with Alpha value
//			-> Cleaned up so only original data table and final chart show
// B4 NClark 053012
//			-> Made additional changes for Recall button to recall previous 1-alpha
// B3 NClark 052912
//			-> Reorganized code for cleaner interface (switched to using some Exp() functions)
// 			-> Implemented working Recall button for Columns only! (not for 1-alpha vlaues... yet)
// B2 NClark 052512
//			-> Updated to require a Y and X as well as limit X to two slections
// B1 NClark 052512 - First Beta released(B1)
//------------------------------------------------------------------

//------------------Variable List-----------------------------------
//
// Global
//		globalList
//			ba1List, ba2List, ba3List (colListY, colListL, colListB)
//		globalVar
//			ba1Var, ba2Var (lbVar in Here Namespace)
//		globalVar1
//			ba2Var1, ba2Var1, ba3Var1, ba4Var1 (means, deviation, coeffVar, showTable)
//		lbList
//			colListY, colListL, colListB (Y Columns, X Columns, By)
//		recallItems
//		comboObj
//		textObj
// Here Namespace
//		dt, nc, lbWidth
//		notImplemented
//		Help
//		About
//		jmpVer
//		lbVar
//			comboSet
//			NewCI
//		colList, nextList, lb
//		runOK
//		glVar, glVar1
//		CI
//		Dist, rDist, dtSD, splitSD, cvSD, NewdtSD
//		exprCancel
//		chrt
//		Name
//		varianceDlg
//		colListData
//------------------------------------------------------------------


//ClearGlobals();
dt = currentDataTable();
If(IsEmpty(dt),dt=open());
nc = ncol(dt);
lbWidth = 130;
notImplemented = expr(New Window("Feature Not Available",<<Modal,TextBox("This feature has not been implemented yet."),ButtonBox("OK")));
Help = expr(Open( "$ADDIN_HOME(com.idexx.nclark.SDCI)\StdDevCIOverlay_Help.pdf" ));
About = Expr(Dialog(
	VList("Std Dev CI Overlay v2.5",
		"",
		"Nathan Clark",
		"IDEXX Laboratories, Inc.",
		"Westbrook, ME 04092",
		"nathan-clark@idexx.com"
	)
));
jmpVer = JMPVersion();

::globalListBEtA = {::ba1ListBEtA,::ba2ListBEtA,::ba4ListBEtA,::ba3ListBEtA};
::globalVarBEtA = {::ba1VarBEtA,::ba2VarBEtA};
::globalVar1BEtA = {::ba1Var1BEtA,::ba2Var1BEtA,::ba3Var1BEtA,::ba4Var1BEtA};

::lbListBEtA = Expr({::colListYBEtA,::colListLBEtA,::colListGBEtA,::colListBBEtA });
lbVar = Expr({comboSet,NewCI});
::lbVar1BEtA = Expr({::meansBEtA,::deviationBEtA,::coeffVarBEtA,::showTableBEtA});

::recallItemsBEtA = Expr(
//Is List will produce error if ba1List is not declared
//If error, declare vars, otherwise get vars
	colList = dt << Get Column Names(String);
	Try(
		For(i=1,i<=N Items(::globalListBEtA),i++,
			nextList = ::globalListBEtA[i];
			For(j=1,j<=N Items(nextList),j++,
				If(N Row(Loc(colList,nextList[j])) > 0,
					Eval(
						Substitute(
							Expr(lb << Append(item)),
							Expr(lb),::lbListBEtA[i],
							Expr(item),nextList[j]
						)
					)
				)
			)
		),
		Print("No columns to recall.")
	);
	Try(
		::comboObjBEtA<<set(Num(::ba1VarBEtA))
	);
	Try(
		::textObjBEtA<<settext(::ba2VarBEtA);
		NewCI=::ba2VarBEtA
	);
	Try(
		If(::ba1Var1BEtA == 1,,
			::meansBEtA<<set(1)
		)
	);
	Try(
		If(::ba2Var1BEtA == 1,,
			::deviationBEtA<<set(1)
		)
	);
	Try(
		If(::ba3Var1BEtA == 1,,
			::coeffVarBEtA<<set(1)
		)
	);
	Try(
		If(::ba4Var1BEtA == 0,,
			::showTableBEtA<<set(1)
		)
	);
);

runOK = Expr(
//Setting up to specify graphs to make and ensuring at least one graph is checked
	graphics=Char(::meansBEtA<<get) || Char(::deviationBEtA<<get) || Char(::coeffVarBEtA<<Get);
	graphicsCond = Match(Graphics,
		"111",1,
		"110",2,
		"100",3,
		"101",4,
		"001",5,
		"011",6,
		"010",7,
		"000",8
	);
	If(graphicsCond == 8,
		Dialog("Must Choose one of the Desired Graphs");throw()
	);
//Populate global variables for Recall
	For(i=1,i<=N Items(::globalListBEtA),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar);
					glVar = lb << Get Items;
					Lock Globals(glVar);
				),
				Expr(lb),::lbListBEtA[i],
				Expr(glVar),Name Expr(::globalListBEtA[i])
			)
		);
	);
	NewCI=::textObjBEtA<<get text;
	If( Is Missing( Num(NewCI) ) == 0,
		CI = Num( NewCI );
		comboSet = Char(::comboObjBEtA<<get),
		NewCI="";
		comboSet = Char(::comboObjBEtA<<get);
		Match( comboSet,
			"1", CI = 0.90,
			"2", CI = 0.95,
			"3", CI = 0.99//,
			//4, CI=Num(NewCI)
		)
	);
	For(i=1,i<=N Items(::globalVarBEtA),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar1);
					glVar1 = lb;
					Lock Globals(glVar1);
				),
				Expr(lb),lbVar[i],
				Expr(glVar1),Name Expr(::globalVarBEtA[i])
			)
		);
	);
	For(i=1,i<=N Items(::globalVar1BEtA),i++,
		Eval(
			Substitute(
				Expr(
					Unlock Globals(glVar2);
					glVar2 = lb << Get;
					Lock Globals(glVar2);
				),
				Expr(lb),::lbVar1BEtA[i],
				Expr(glVar2),Name Expr(::globalVar1BEtA[i])
			)
		);
	);
	//show(::ba1List, ::ba2List, ::ba3List, ::ba1Var, ::ba2Var, ::ba1Var1, ::ba2Var1,::ba3Var1,::ba4Var1);
	Eval(exprCancel);

//Grabs value ordering from X, Columns and BY columns
	valOrder = {};
	For(i=1, i<=nitems(::ba3ListBEtA),i++,
		valOrder[i] = Column(dt,::ba3ListBEtA[i])<<Get Property(Value Ordering);
	);
	valOrder1 = {};
	For(i=1, i<=nitems(::ba2ListBEtA),i++,
		valOrder1[i] = Column(dt,::ba2ListBEtA[i])<<Get Property(Value Ordering);
	);
	valOrder2 = {};
	For(i=1, i<=nitems(::ba4ListBEtA),i++,
		valOrder2[i] = Column(dt,::ba4ListBEtA[i])<<Get Property(Value Ordering);
	);
	
//Distribution to obtain correct CI values
	Dist = Distribution( 
		Y( ::colListYBEtA << Get Items ), 
		Confidence Interval( CI ), 
		by( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems, ::colListGBEtA << GetItems ), 
		invisible );
	rDist = Dist << report;
	dtSD = rDist[1][Table Box( 3 )] << make combined data table;
	dtSD1 = rDist[1][Table Box( 2 )] << make combined data table;
	dtSD << minimize window( 1 );
	dtSD1 << minimize window( 1 );
	
	dtSD1 << Select Where(:Column 1 != "N")<<Delete Rows();
	dtSD1 << Delete Columns({"Column 1", "Y"});
	Column(dtSD1, "Column 2") << Set Name("N");
	Dist << closewindow;
	//varianceDlg << closeWindow;
	Show( CI );
	splitSD = dtSD << Split(
		Split By( :Parameter ),
		Split( :Estimate, :Lower CI, :Upper CI ),
		Group( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems, ::colListGBEtA << GetItems, :Y ),
		Invisible
	);
	Close(dtSD,nosave);
	//JOIN NEW COMBINED TABLE WITH "N"... join by row???? Only if == # rows...
	splitSD << Sort(
		By(::colListBBEtA << Get Items, ::colListLBEtA << Get Items, ::colListGBEtA << Get Items),
		Replace Table
	);
	dtSD1 << Sort(
		By(::colListBBEtA << Get Items, ::colListLBEtA << Get Items, ::colListGBEtA << Get Items),
		Replace Table
	);
	splitSD1 = splitSD << Join(
		With( dtSD1 ),
		Merge Same Name Columns,
		By Row Number
	);
	Close(dtSD1,nosave);
	Close(splitSD,nosave);
	
	splitSD1 << New Column("Estimate CV",Numeric,Continuous,
		Formula((:Estimate Std Dev / :Estimate Mean) * 100)
	);
	splitSD1 << New Column("Lower CI CV",Numeric,Continuous,
		Formula((Root( :N - 1, Empty() ) * :Estimate CV) / Root(
			ChiSquare Quantile( 1-((1-CI)/2), :N - 1 ),Empty())
		)
	);
	splitSD1 << New Column("Upper CI CV",Numeric,Continuous,
		Formula((Root( :N - 1, Empty() ) * :Estimate CV) / Root(
			ChiSquare Quantile( (1-CI)/2, :N - 1 ),Empty())
		)
	);
	cvSD = splitSD1 << Stack(
		columns(
			:Estimate Mean,
			:Estimate Std Dev,
			:Lower CI Mean,
			:Lower CI Std Dev,
			:Upper CI Mean,
			:Upper CI Std Dev,
			:Estimate CV,
			:Lower CI CV,
			:Upper CI CV
		),
		Source Label Column( "Label" ),
		Stacked Data Column( "Data" ),
		Invisible
	);
	cvSD << New Column("Parameter",Character,
		Formula(If(
			Contains( :Label, "Mean" ) > 0, "Mean",
			Contains( :Label, "Std Dev" ) > 0, "Std Dev",
			Contains( :Label, "CV" ) > 0, "CV"
			)
		)
	);
	cvSD << New Column("Value",Charcter,
		Formula(If(
			Contains( :Label, "Estimate" ) > 0, "Estimate",
			Contains( :Label, "Lower CI" ) > 0, "Lower CI",
			Contains( :Label, "Upper CI" ) > 0, "Upper CI"
			)
		)
	);
	Match(graphicsCond,
		1,,
		2,cvSD<<selectwhere(:Parameter == "CV")<<deleterows,
		3,cvSD<<selectwhere(:Parameter == "Std Dev" | :Parameter == "CV")<<deleterows,
		4,cvSD<<selectwhere(:Parameter == "Std Dev")<<deleterows,
		5,cvSD<<selectwhere(:Parameter == "Mean" | :Parameter == "Std Dev")<<deleterows,
		6,cvSD<<selectwhere(:Parameter == "Mean")<<deleterows,
		7,cvSD<<selectwhere(:Parameter == "Mean" | :Parameter == "CV")<<deleterows
	);
	If(Contains(jmpVer,"10")!=0,
		If(::ba4Var1BEtA == 0,
			NewdtSD = cvSD << Split(
				Split By( :Value ),
				Split( :Data ),
				Group( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems,::colListGBEtA << GetItems, :Y, :Parameter ),
				Invisible
			),
			NewdtSD = cvSD << Split(
				Split By( :Value ),
				Split( :Data ),
				Group( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems,::colListGBEtA << GetItems, :Y, :Parameter ),
				//Invisible
			)
		),
		If(::ba4Var1BEtA == 0,
			NewdtSD = cvSD << Split(
				Split By( :Value ),
				Split( :Data ),
				Group( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems,::colListGBEtA << GetItems, :Y, :Parameter ),
				Private
			),
			NewdtSD = cvSD << Split(
				Split By( :Value ),
				Split( :Data ),
				Group( ::colListBBEtA << Get Items, ::colListLBEtA << GetItems,::colListGBEtA << GetItems, :Y, :Parameter ),
				//Invisible
			)
		);
	);
	Column(NewdtSD,"Parameter") << Delete Formula;
	Column(NewdtSD,"Parameter") << Set Property("Value Ordering",{"Mean", "Std Dev", "CV"});
	NewdtSD << Delete Columns("Label");
	
	//Adjusts Value Ordering for X, Columns, Group X columns and BY columns
	For(i=1,i<=nitems(::ba3ListBEtA),i++,
		order = valOrder[i];
		If(order == Empty(),,
			Column(NewdtSD,::ba3ListBEtA[i])<<Set Property("Value Ordering",order)
		)
	);	
	For(i=1,i<=nitems(::ba2ListBEtA),i++,
		order = valOrder1[i];
		If(order == Empty(),,
			Column(NewdtSD,::ba2ListBEtA[i])<<Set Property("Value Ordering",order)
		)
	);
	For(i=1,i<=nitems(::ba4ListBEtA),i++,
		order = valOrder2[i];
		If(order == Empty(),,
			Column(NewdtSD,::ba4ListBEtA[i])<<Set Property("Value Ordering",order)
		)
	);
	
	Eval(ChartMaker);
	//Graphs result with Chart Platform
	/*chrt = NewdtSD << Chart(
		X( ::colListL << getitems ),
		Y( :Estimate, :Lower CI, :Upper CI ),
		Range Chart( 1 ),
		Y[1] << {Show Points( 1 ), Overlay Color( 0 ), Overlay Marker( 0 )},
		Y[2] << {Show Points( 0 ), Overlay Color( 0 ), Overlay Marker( 29 )},
		Y[3] << {Show Points( 0 ), Overlay Color( 0 ), Overlay Marker( 29 )},
		BY( ::colListB << Get Items, :Y, :Parameter ),
		SendToReport( 
			Dispatch( {}, "", LegendBox, {Set Title( "Alpha = "||Char(1-CI) )} ),
			Dispatch({}, "108", ScaleBox, {Show Major Grid( 1 ), Show Minor Grid( 1 ), Rotated Labels( "Horizontal" )}
			)
		)
	);
	Close(splitSD,nosave);
	Close(cvSD,nosave);
	Clear Symbols( NewdtSD ); 
	Name=Expr(report(chrt[i])[outline box(1)] << get title);
	Name1=Expr(report(chrt)[outline box(1)] << get title);
	IF(IsEmpty(chrt[2]), 
		For( i = 1, i < 2, i++,
			If( 
				Contains( Eval( name1 ), "Parameter=Mean" ) != 0,
					chrt << SendToReport(
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Mean" )} )
					),
				Contains( Eval( name1 ), "Parameter=Std Dev" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Std Dev" )} ) 
					),
				Contains( Eval( name1 ), "Parameter=CV" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "CV" )} ) 
					)
			)
		),
		For( i = 1, i <= Nitems(chrt), i++,
			If( 
				Contains( Eval( name ), "Parameter=Mean" ) != 0,
					chrt[i] << SendToReport(
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Mean" )} )
					),
				Contains( Eval( name ), "Parameter=Std Dev" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Std Dev" )} ) 
					),
				Contains( Eval( name ), "Parameter=CV" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "CV" )} ) 
					)
			)
		)
	)*/
);

//---------------Sub graphMaker-------------------------------------------------
ChartMaker = Expr(
	//Graphs result with Chart Platform
	/*chrt = NewdtSD << Chart(
		X( ::colListL << getitems ),
		Y( :Estimate, :Lower CI, :Upper CI ),
		Range Chart( 1 ),
		Y[1] << {Show Points( 1 ), Overlay Color( 0 ), Overlay Marker( 0 )},
		Y[2] << {Show Points( 0 ), Overlay Color( 0 ), Overlay Marker( 29 )},
		Y[3] << {Show Points( 0 ), Overlay Color( 0 ), Overlay Marker( 29 )},
		BY( ::colListB << Get Items, :Y, :Parameter ),
		SendToReport( 
			Dispatch( {}, "", LegendBox, {Set Title( "Alpha = "||Char(1-CI) )} ),
			Dispatch({}, "108", ScaleBox, {Show Major Grid( 1 ), Show Minor Grid( 1 ), Rotated Labels( "Horizontal" )}
			)
		)
	);
	Close(splitSD,nosave);
	Close(cvSD,nosave);
	Clear Symbols( NewdtSD ); 
	Name=Expr(report(chrt[i])[outline box(1)] << get title);
	Name1=Expr(report(chrt)[outline box(1)] << get title);
	IF(IsEmpty(chrt[2]), 
		For( i = 1, i < 2, i++,
			If( 
				Contains( Eval( name1 ), "Parameter=Mean" ) != 0,
					chrt << SendToReport(
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Mean" )} )
					),
				Contains( Eval( name1 ), "Parameter=Std Dev" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Std Dev" )} ) 
					),
				Contains( Eval( name1 ), "Parameter=CV" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "CV" )} ) 
					)
			)
		),
		For( i = 1, i <= Nitems(chrt), i++,
			If( 
				Contains( Eval( name ), "Parameter=Mean" ) != 0,
					chrt[i] << SendToReport(
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Mean" )} )
					),
				Contains( Eval( name ), "Parameter=Std Dev" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "Std Dev" )} ) 
					),
				Contains( Eval( name ), "Parameter=CV" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y", TextEditBox, {Set Text( "CV" )} ) 
					)
			)
		)
	)*/
	
	//Makes chart with Graph Builder
	varList = ::colListLBEtA<<getitems;
	varList1 = ::colListGBEtA<<getitems;
	xExpr = Expr( 
		Variables( Y( :Lower CI ), 
		Y( :Estimate, Position( 1 ) ), 
		Y( :Upper CI, Position( 1 ) ) ) 
	);

	For( i = N Items( varList ), i >= 1, i--,
		varExpr = Expr( X() );
		Insert Into( varExpr, Column( varList[i] ) );
		Insert Into( varExpr, Name Expr( Position( 1 ) ) );
		Insert Into( xExpr, Name Expr( varExpr ), 1 );
	);
	For( i = N Items( varList1 ), i >= 1, i--,
		varExpr1 = Expr( Group X() );
		Insert Into( varExpr1, Column( varList1[i] ) );
		//Insert Into( varExpr1, Name Expr( Position( 1 ) ) );
		Insert Into( xExpr, Name Expr( varExpr1 ), 1 );
		//Show(xExpr)
	);

	Eval(
		  Substitute(
					  Expr(
							chrt = NewdtSD << Graph Builder(
								  Show Control Panel( 0 ),
								  Xvars,
								  Elements(
										Points( X( 1 ), Y( 2 ), Legend( 1 ), Jitter( 0 ) ),
										Bar(
											  X( 1 ),
											  Y( 1 ),
											  Y( 3 ),
											  Legend( 2 ),
											  Bar Style( "Interval" ),
											  Summary Statistic( "Mean" )
										)
								  ),
								  BY( ::colListBBEtA << Get Items, :Y, :Parameter ),
								  
							)
					  ),
				Expr( xVars ), Name Expr( xExpr )
		  )
	);
	
	Close(splitSD1,nosave);
	Close(cvSD,nosave);
	Clear Symbols( NewdtSD );
	
	Name=Expr(report(chrt[i])[outline box(1)] << get title);
	Name1=Expr(report(chrt)[outline box(1)] << get title);
	IF(IsEmpty(chrt[2]), 
		For( i = 1, i < 2, i++,
			If( 
				Contains( Eval( name1 ), "Parameter=Mean" ) != 0,
					chrt << SendToReport(
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "Mean" )} )
					),
				Contains( Eval( name1 ), "Parameter=Std Dev" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "Std Dev" )} ) 
					),
				Contains( Eval( name1 ), "Parameter=CV" ) != 0,
					chrt << SendToReport( 
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "CV" )} ) 
					)
			);
			chrt << SendToReport(
				Dispatch({},"graph title",TextEditBox,{Set Text( "Exact Binomial Graph, Alpha = "||Char(1-CI) )}),
				Dispatch( {}, "400", LegendBox, {Set Title( "Alpha = "||Char(1-CI) )} )
			)
		),
		For( i = 1, i <= Nitems(chrt), i++,
			If( 
				Contains( Eval( name ), "Parameter=Mean" ) != 0,
					chrt[i] << SendToReport(
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "Mean" )} ),
					Dispatch({},"graph title",TextEditBox,{Set Text( "Mean +/- "||Char(CI*100)||" %CI" )})
					),
				Contains( Eval( name ), "Parameter=Std Dev" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "Std Dev" )} ),
					Dispatch({},"graph title",TextEditBox,{Set Text( "Standard Deviation +/- "||Char(CI*100)||" %CI" )}) 
					),
				Contains( Eval( name ), "Parameter=CV" ) != 0,
					chrt[i] << SendToReport( 
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "CV" )} ),
					Dispatch({},"graph title",TextEditBox,{Set Text( "Coefficient of Variation +/- "||Char(CI*100)||" %CI" )}) 
					)
			);
			chrt << SendToReport(
				//Dispatch({},"graph title",TextEditBox,{Set Text( "Exact Binomial Graph, Alpha = "||Char(1-CI) )}),
				Dispatch( {}, "400", LegendBox, {Set Title( "Alpha = "||Char(1-CI) )} )
			)
		)
	);	
);
//------------------End Sub graphMaker---------------------------------------

varianceDlg = New Window( "Confidence Intervals",
	Border Box( Left( 3 ), top( 2 ),
		V List Box(
			Text Box( "Listing Variation with Correct Confidence Intervals" ),
			H List Box(
				V List Box(
					Panel Box( "Select Columns",
						colListData = Col List Box(
							All,
							width( lbWidth ),
							nLines( Min( nc, 10 ) )
						)
					),
				),
				Panel Box( "Cast Selected Columns into Roles",
					Lineup Box( N Col( 2 ), Spacing( 3 ),
						Button Box( "Y, Columns",
							::colListYBEtA << Append( colListData << GetSelected )
						),
						::colListYBEtA = Col List Box( width( lbWidth ), minitems(1), nLines( 5 ), numeric ),
						Button Box( "X, Columns", ::colListLBEtA << Append( colListData << GetSelected ) ),
						::colListLBEtA = Col List Box( width( lbWidth ), minitems(1), nLines( 2 ) ),
						Button Box( "Group X", ::colListGBEtA << Append( colListData << GetSelected ) ),
						::colListGBEtA = Col List Box( width( lbWidth ), nLines( 2 ) ),
						Button Box( "By", ::colListBBEtA << Append( colListData << GetSelected ) ),
						::colListBBEtA = Col List Box( width( lbWidth ), nLines( 1 ) )
					)
				),
				Panel Box( "Action",
					Lineup Box( N Col( 1 ),
						Button Box( "OK", Eval(runOK)),
						Button Box( "Cancel", Eval(exprCancel) ),
						Text Box( " " ),
						Button Box( "Remove",
							::colListYBEtA << RemoveSelected;
							::colListLBEtA << RemoveSelected;
							::colListBBEtA << RemoveSelected;
							::colListGBEtA << RemoveSelected;
						),
						Button Box( "Recall", Eval(::recallItemsBEtA) ),
						Button Box( "Help", Eval(Help) ),
						Button Box( "About", Eval(About) )
					)
				)
			),
			H List Box(
				Panel Box( "Confidence",
					H List Box(
						V List Box(
							TextBox("Select Confidence Interval"),
							H List Box(
								::comboObjBEtA = Combo Box( {"0.90", "0.95", "0.99"}, <<Set( 2 ) ),
								TextBox("   or")
							),
							H List Box(
								TextBox("Enter Desired 1-Alpha "),
								::textObjBEtA = Text Edit Box("",<<Script(NewCI=::textObj<<GetText))
							)
						)
					)
				),
				Panel Box( "Desired Graphs",
					V List Box(
						::meansBEtA = checkbox("Mean",<<Set(1)),
						::deviationBEtA = checkbox("Std Dev",<<Set(1)),
						::coeffVarBEtA = checkbox("CV",<<Set(1))
					)
				),
				Panel Box( "Show SD/CI Table",
					V List Box(
						::showTableBEtA = checkbox("Show Table",<<Set(0)),
					)
				)
			)
		)
	)
);

exprCancel = Expr(varianceDlg << Close Window);
