Names Default to here(1);

//Lytes AR Algorithm with a drift column
LytesARcalcanddrift = Function({tablename}, {default local},
	//tablename = current data table();
	
	if(:"Chem Type"n[1] == "CL",
		tablename << New Column("Dry Mean 9-10",
			formula( Mean( :Name( "33" ), :Name( "34" ) )
		));
		tablename << New Column("Dry Mean 9-10-11",
			formula( Mean( :Name( "33" ), :Name( "34" ), :Name( "35" ) )
		));
		tablename << New Column("Dry Mean 10-11",
			formula( Mean( :Name( "34" ), :Name( "35" ) )
		));
		tablename << New Column("Wet Mean", 
			formula( Mean( :"54"n, :"55"n ))
		);
		tablename << New Column("Dry Mean 9-10 AR",
			formula((:Wet Mean - :False Light) / (:Scalar * (:"Dry Mean 9-10"n - :False Light))
		));
		tablename << New Column("Dry Mean 9-10-11 AR",
			formula((:Wet Mean - :False Light) / (:Scalar * (:"Dry Mean 9-10-11"n - :False Light))
		));
		tablename << New Column("Dry Mean 10-11 AR",
			formula((:Wet Mean - :False Light) / (:Scalar * (:"Dry Mean 9-10-11"n - :False Light))
		))
		,
		tablename << New Column("Dry Mean", 
			formula( Match( :Chem Type,
				"K", Mean( :Name( "30" ), :Name( "31" ) ),
				"NA", Mean( :Name( "30" ), :Name( "31" ) )
			))
		);
		tablename << New Column("Wet Mean", 
			formula( Match( :Chem Type,
				"K", Mean( :Name( "54" ), :Name( "55" ) ),
				"NA", Mean( :Name( "44" ), :Name( "45" ) )
			))
		);
		tablename << New Column("AR",
			formula(
				(:Wet Mean - :False Light) / (:Scalar * (:Dry Mean - :False Light))
			)
		)
	);
	
	tablename << New Column("Sample Drift",
		formula(
			T24 = 24;
			T25 = 25;
			T26 = 26;
			T27 = 27;
			T28 = 28;
			T29 = 29;
			T30 = 30;
			T31 = 31;
			I24 = :Name( "53" );
			I25 = :Name( "54" );
			I26 = :Name( "55" );
			I27 = :Name( "56" );
			I28 = :Name( "57" );
			I29 = :Name( "58" );
			I30 = :Name( "59" );
			I31 = :Name( "60" );
			Xbar = Mean( T24, T25, T26, T27, T28, T29, T30, T31 );
			Ybar = Mean( I24, I25, I26, I27, I28, I29, I30, I31 );
			XY = (T24 - Xbar) * (I24 - Ybar) + (T25 - Xbar) * (I25 - Ybar) + (T26 - Xbar) * (I26 - Ybar) + (T27 - Xbar) * (I27 - Ybar) + (T28 - Xbar)
			 * (I28 - Ybar) + (T29 - Xbar) * (I29 - Ybar) + (T30 - Xbar) * (I30 - Ybar) + (T31 - Xbar) * (I31 - Ybar);
			XSqrd = (T24 - Xbar) ^ 2 + (T25 - Xbar) ^ 2 + (T26 - Xbar) ^ 2 + (T27 - Xbar) ^ 2 + (T28 - Xbar) ^ 2 + (T29 - Xbar) ^ 2 + (T30 - Xbar) ^ 2
			 + (T31 - Xbar) ^ 2;
			SDrift1 = ((XY / XSqrd) / Ybar) * 100 * 4;
			Slope1 = XY / XSqrd;
			Int1 = Ybar - Slope1 * Xbar;
			SDrift1;
		)
	)	
);

//calculate slope/intercepts
LoopQualSlopeInt = Function({tablename, dosecol, ARcol, sublotcol, chemtypecol}, {default local},
	//tablename = current data table();
	/*example inputs for each input
	dosecol = "Dose";
	ARcol = "AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";*/

	//show(dosecol, ARcol, sublotcol, chemtypecol);

	parse_dose = Parse( Eval Insert( "^tableName^:\!"^dosecol^\!"n" ) );
	parse_AR = Parse( Eval Insert( "^tableName^:\!"^ARcol^\!"n" ) );
	parse_sublot = Parse( Eval Insert( "^tableName^:\!"^sublotcol^\!"n" ) );
	parse_chemtype = Parse( Eval Insert( "^tableName^:\!"^chemtypecol^\!"n" ) );

	colNamedose = Eval Insert( "^tableName^:\!"^dosecol^\!"n" );
	colNameAR = Eval Insert( "^tableName^:\!"^ARcol^\!"n" );
	colNamesublot = Eval Insert( "^tableName^:\!"^sublotcol^\!"n" );
	colNamechemtype = Eval Insert( "^tableName^:\!"^chemtypecol^\!"n" );


	//show(parse_dose, parse_AR, parse_sublot, parse_chemtype);
	//show(colNamedose, colNameAR, colNamesublot, colNamechemtype);

	sumbysub = tablename << Summary(
		Group( parse_dose , parse_sublot, parse_chemtype  ),
		Mean( parse_AR  ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 ),
		output table name( "Summary_Mean AR by Dose and Sub Lot" ),
		private
	);

	sumlist = sumbysub << get column names;

	//show(sumlist);

	//create the Mean AR string
	Mean_AR_variable = "Mean("||ARcol||")";
	Eval_Mean_AR = Eval Insert(":name(\!"^Mean_AR_variable^\!" )");

	//need to fix the Y axis column name to be dynamic! stuck on this. :(
	Bivar = sumbysub << Bivariate( 
			Y( parse(Eval_Mean_AR) ), 
			X( parse(colNamedose) ), 
			Fit Line( {Line Color( {212, 73, 88} )} ), 
			By( parse(colNamesublot), parse(colNamechemtype) ),
			invisible
		);

	//combined data table for slope and intercepts. Throws if there's no second dose.
	slopeintmid = Try(
		Report( Bivar[1] )[Outline Box( "Linear Fit" )][Outline Box( "Parameter Estimates" )][Table Box( 1 )] << Make Combined Data Table(private(1));
		,
		Report( Bivar )[Outline Box( "Linear Fit" )][Outline Box( "Parameter Estimates" )][Table Box( 1 )] << Make Combined Data Table(private(1));
	);

	//delete rows if a second level wasn't evaluated.
	slopeintmidlist = slopeintmid << get column names;
	slopeintmid << select where(:"~Bias" == " Biased" | :"~Bias" == " Zeroed");
	slopeintmid << Delete Rows;

	//extracts the dry read information from the "Y" column which has the metric in the combined data table
	//if Y is Mean(AR) it means just K or NA is the assay and dry read AR values aren't necessary
	temp = slopeintmid << New Column("Dry Reads Used", Character,
		Formula(
			if(:"Y"n == "Mean(AR)", "not applicable", Word(3,:"Y"n))
		)
	);
	temp << delete formula;

	//split the slope and intercepts so they are columns.
	slopeint1 = slopeintmid << Split(
		Split By( :Term ),
		Split( :Estimate ),
		Group( parse_chemtype, parse_sublot, :"Dry Reads Used"n ),
		Remaining Columns( Drop All ),
		Sort by Column Property,
		private
	);

	slopeint1list = slopeint1 << get column names;

	//gather the average slope and intercept from loop qual.
	slopeintavg = slopeint1 << Summary(
		invisible,
		Group( parse_chemtype, :"Dry Reads Used"n ),
		Mean( parse_dose ),
		Mean( Column( slopeint1, "Intercept" ) ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 ),
		output table name( "Loop Qual Average Slope and Intercept" )
	);

	slopeintavglist = slopeintavg << get column names;
	//show(slopeintavglist);

	//create the Mean Dose string
	Mean_dose_variable = "Mean("||dosecol||")";
	mean_dose = Eval Insert(":name(\!"^Mean_dose_variable^\!" )");

	//rename columns for clarity.
	Column( slopeintavg,  parse(mean_dose) ) << set name( "Average Slope" );
	Column( slopeintavg, "Mean(Intercept)" ) << set name( "Average Intercept" );

	slopeintavg << delete columns ("N Rows");
	
	//close unnecessary tables.
	Close( slopeintmid, nosave );
	Close( sumbysub, nosave );
	Close( slopeint1, nosave );
	Close( Bivar, nosave );
	
	//return average slope and intercept for future step
	Return(slopeintavg);
);

//calculate within ARSD. Carries forward added info for the loop dose report.
LoopQualARSD = Function({tablename, dosecol, ARcol, sublotcol, chemtypecol, foilcol, instrumentcol, looplotcol, panellotcol}, {default local},
	//tablename = current data table();
	/*example inputs for each input
	dosecol = "Dose";
	ARcol = "Dry Mean 9-10 AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";
	foilcol = "Foil_LQ";
	instrumentcol = "InstrumentSerial";
	looplotcol = "Loop Lot_LQ";
	panellotcol = "Buffer Lot";*/
	
	/* QSDMA example:
	dosecol = "Panel Dose";
	ARcol = "Corrected AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";
	foilcol = "Foil_LQ";
	instrumentcol = "Instrument ID";
	looplotcol = "Loop Lot";
	panellotcol = "Panel Lot";
	
	*/

	//show(dosecol, ARcol, sublotcol, chemtypecol, foilcol, instrumentcol);

	parse_dose = Parse( Eval Insert( ":\!"^dosecol^\!"n" ) );
	parse_AR = Parse( Eval Insert( ":\!"^ARcol^\!"n" ) );
	parse_sublot = Parse( Eval Insert( ":\!"^sublotcol^\!"n" ) );
	parse_chemtype = Parse( Eval Insert( ":\!"^chemtypecol^\!"n" ) );
	parse_foil = Parse( Eval Insert( ":\!"^foilcol^\!"n" ) );
	parse_instrument = Parse( Eval Insert( ":\!"^instrumentcol^\!"n" ) );
	parse_looplot = Parse( Eval Insert( ":\!"^looplotcol^\!"n" ) );
	parse_panellot = Parse( Eval Insert( ":\!"^panellotcol^\!"n" ) );

	colNamedose = Eval Insert( ":name(\!"^dosecol^\!" )" );
	colNameAR = Eval Insert( ":name(\!"^ARcol^\!" )" );
	colNamesublot = Eval Insert( ":name(\!"^sublotcol^\!" )" );
	colNamechemtype = Eval Insert( ":name(\!"^chemtypecol^\!" )" );
	colNamefoil = Eval Insert( ":name(\!"^foilcol^\!" )" );
	colNameinstrument = Eval Insert( ":\!"^instrumentcol^\!"n" );
	colNamelooplot = Eval Insert( ":\!"^looplotcol^\!"n" );
	colNamepanellot = Eval Insert( ":\!"^panellotcol^\!"n" );
	
	collist = tablename << get column names(string);

	AR_col_CW = ARcol || " - Cross Web Corrected";
	AR_col_loop = ARcol || " - Full Loop Analysis";

	if(!contains(collist, "Cross Web Corrections"),
		tablename << New Column("Cross Web Corrections", 
			Numeric, 
			Continuous, 
			formula( 
				Col Mean(
					AsColumn(ARcol) - Col Mean( 
						AsColumn(ARcol),
						AsColumn(foilcol),
						AsColumn(dosecol), 
						AsColumn(chemtypecol), 
						AsColumn(looplotcol), 
						:"Exclusion Rationale"n
					),
					AsColumn(dosecol),
					AsColumn(sublotcol),
					AsColumn(chemtypecol),
					AsColumn(looplotcol),
					:"Exclusion Rationale"n
				)
			)
		);
	);
	
	if(!contains(collist, AR_col_CW),
		tablename << New Column(AR_col_CW, 
			Numeric, 
			Continuous, 
			formula( parse_AR - :"Cross Web Corrections"n )
		);
	);
	
	if(!contains(collist, AR_col_loop),
		tablename << New Column(AR_col_loop, 
			Numeric, 
			Continuous, 
			formula(
				Col Mean( 
					AsColumn(AR_col_CW) - Col Mean(
						AsColumn(AR_col_CW), 
						AsColumn(dosecol), 
						AsColumn(chemtypecol), 
						AsColumn(looplotcol), 
						:"Exclusion Rationale"n
					), 
					AsColumn(foilcol), 
					AsColumn(dosecol), 
					AsColumn(chemtypecol), 
					AsColumn(instrumentcol), 
					AsColumn(looplotcol), 
					:"Exclusion Rationale"n
				); 
			);
		);
	);
	
	
	tablename:"Cross Web Corrections"n << delete property(Formula);
	tablename:AR_col_CW << delete property(Formula);
	tablename:AR_col_loop << delete property(Formula);
	
	
	//Summarize to get the assay type for different types of summaries.
	Summarize(tablename, a = by(tablename:"Assay"n));
	
	If(a == 4,
		looplotsum = tablename << Summary(
			Group(parse_chemtype, parse_looplot, parse_dose, :"Assay"n, parse_panellot),
			Std Dev(AR_col_loop),
			Freq("None"),
			Weight("None"),
			Link to original data table(0)
		),
		looplotsum = tablename << Summary(
			Group( parse(colNamechemtype), :"Assay"n, parse(colNamelooplot), parse(colNamedose), :"Fiber Lot"n, :"Buffer"n, parse(colNamepanellot) ),
			Std Dev(AR_col_loop),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		)
	);
	
	ARSDcol = "Std Dev("||AR_col_loop||")";
	print(ARSDcol);
	
	looplotsum:ARSDcol << Set Name("Within ARSD");
	
	//gather table for n of excluded runs due to instrument flags or NDEs. If 0, will create a table to carry forward.
	tablename << select where( :"Exclusion Rationale"n == "NDE - Grubb's" | :"Exclusion Rationale"n == "Instrument Flag");
	row = tablename << get rows where(Selected());

	if( nitems(row) > 0,
		Excluded_Subset = tablename << Subset(
			Output Table("Exclusion Subset"),
			Selected Rows( 1 ),
			Selected Columns( 0 ),
			Linked to Original Data Table( 0 )
		);
		Excluded_Subset << Clear Row States;
		Exclusion_Count_Total_Dose_Sum = Excluded_Subset << Summary(
			Group(parse(colNamechemtype), parse(colNamedose), :"Exclusion Rationale"n),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		Exclusion_Count_Total_Dose = Exclusion_Count_Total_Dose_Sum << Split(
			Split By(:"Exclusion Rationale"n),
			Split(:"N Rows"n),
			Group(parse(colNamechemtype), parse(colNamedose)),
			Link to original data table( 0 )
		);
		close( Excluded_Subset, nosave);
		close( Exclusion_Count_Total_Dose_Sum, nosave);
		,
		Exclusion_Count_Total_Dose = tablename << Summary(
			Group(parse(colNamechemtype), parse(colNamedose)),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 )
		);
		Exclusion_Count_Total_Dose << New Column("NDE - Grubb's", set each value(0));
		Exclusion_Count_Total_Dose:"N Rows"n << Set Selected;
		Exclusion_Count_Total_Dose << Delete Columns();
	);
	
	//join to create the final table to pass through.
	eval(
		evalExpr(
			looplotfinal = looplotsum << Join(
				With( Exclusion_Count_Total_Dose ),
				Merge Same Name Columns,
				Match Flag( 0 ),
				By Matching Columns( 
					expr(parse(colNamechemtype)) = expr(parse(colNamechemtype)), expr(parse(colNamedose)) = expr(parse(colNamedose))
				),
				Drop multiples( 0, 0 ),
				Include Nonmatches( 1, 1 ),
				Preserve main table order( 1 )
			)
		)
	);
	
	Close(looplotsum, nosave);
	Close(Exclusion_Count_Total_Dose, nosave);
	
	looplotfinal << Set Name("Loop Lot Summary Information");
	
	Return(looplotfinal);
);

//Add Columns for Sublot and Foil Blocking for visualization and outlier pass.
SublotFoilBlocking = Function({tablename, dosecol, ARcol, sublotcol, chemtypecol, foilcol}, {default local},

	//tablename = current data table();
	/*example inputs for each input
	dosecol = "Dose";
	ARcol = "AR";
	sublotcol = "Cross Web";
	chemtypecol = "Chem Type";
	foilcol = "Foil";
	instrumentcol = "InstrumentSerial";*/
	
	/* QSDMA example:
	dosecol = "Panel Dose";
	ARcol = "Corrected AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";
	foilcol = "Foil_LQ";
	instrumentcol = "Instrument ID";*/

	//show(dosecol, ARcol, sublotcol, chemtypecol, foilcol, instrumentcol);

	parse_dose = Parse( Eval Insert( ":\!"^dosecol^\!"n" ) );
	parse_AR = Parse( Eval Insert( ":\!"^ARcol^\!"n" ) );
	parse_sublot = Parse( Eval Insert( ":\!"^sublotcol^\!"n" ) );
	parse_chemtype = Parse( Eval Insert( ":\!"^chemtypecol^\!"n" ) );
	parse_foil = Parse( Eval Insert( ":\!"^foilcol^\!"n" ) );

	colNamedose = Eval Insert( ":name(\!"^dosecol^\!" )" );
	colNameAR = Eval Insert( ":name(\!"^ARcol^\!" )" );
	colNamesublot = Eval Insert( ":name(\!"^sublotcol^\!" )" );
	colNamechemtype = Eval Insert( ":name(\!"^chemtypecol^\!" )" );
	colNamefoil = Eval Insert( ":name(\!"^foilcol^\!" )" );	
	
	collist = tablename << get column names(string);
	//show(collist);
	
	AR_col_variable_sublot = ARcol || " - Blocked by Sublot";
	AR_col_variable_foil = ARcol || " - Blocked by Foil";
	
	//show(AR_col_variable_sublot, AR_col_variable_foil);

	if(!contains(collist, AR_col_variable_sublot),
		tablename << New Column(AR_col_variable_sublot, 
			Numeric, 
			Continuous, 
			formula( AsColumn(ARcol) - Col Median( AsColumn(ARcol), AsColumn(dosecol), AsColumn(sublotcol), AsColumn(chemtypecol)))
		);
	);
	
	if(!contains(collist, AR_col_variable_foil),
		tablename << New Column(AR_col_variable_foil, 
			Numeric, 
			Continuous, 
			formula( AsColumn(ARcol) - Col Median( AsColumn(ARcol), AsColumn(dosecol), AsColumn(foilcol), AsColumn(chemtypecol)))
		);
	);
	
	//delete formulas
	tablename:AR_col_variable_sublot << delete property(Formula);
	tablename:AR_col_variable_foil << delete property(Formula);
	
	Return(tablename);

);

//creates the total loop report
//NOTE, DOES NOT APPEAR TO NEED ARCOL, sublotcol, foilcol, loop lot col, instrument col, panellotcol????
//may have to do with updates yet to be fully coded
TotalLoopReport = Function({slopeinttable, ARSDtable, dosecol, ARcol, chemtypecol, sublotcol, foilcol, looplotcol, instrumentcol, panellotcol}, {default local},
	//dosereport = current data table();
	/*example inputs for each input
	dosecol = "Dose";
	ARcol = "AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";
	foilcol = "Foil_LQ";
	looplotcol = "Loop Lot_LQ";
	instrumentcol = "InstrumentSerial";
	panellotcol = "Buffer Lot";*/

	/* QSDMA example:
	dosecol = "Panel Dose";
	ARcol = "Corrected AR";
	sublotcol = "Crossweb_LQ";
	chemtypecol = "Chem Type";
	foilcol = "Foil_LQ";
	instrumentcol = "Instrument ID";
	looplotcol = "Loop Lot";
	panellotcol = "Panel Lot";
	*/
	
	//parse column variables
	parse_dose = Parse( Eval Insert( ":\!"^dosecol^\!"n" ) );
	parse_AR = Parse( Eval Insert( ":\!"^ARcol^\!"n" ) );
	parse_sublot = Parse( Eval Insert( ":\!"^sublotcol^\!"n" ) );
	parse_chemtype = Parse( Eval Insert( ":\!"^chemtypecol^\!"n" ) );
	parse_foil = Parse( Eval Insert( ":\!"^foilcol^\!"n" ) );
	parse_instrument = Parse( Eval Insert( ":\!"^instrumentcol^\!"n" ) );
	parse_looplot = Parse( Eval Insert( ":\!"^looplotcol^\!"n" ) );
	parse_panellot = Parse( Eval Insert( ":\!"^panellotcol^\!"n" ) );

	colNamedose = Eval Insert( ":name(\!"^dosecol^\!" )" );
	colNameAR = Eval Insert( ":name(\!"^ARcol^\!" )" );
	colNamesublot = Eval Insert( ":name(\!"^sublotcol^\!" )" );
	colNamechemtype = Eval Insert( ":name(\!"^chemtypecol^\!" )" );
	colNamefoil = Eval Insert( ":name(\!"^foilcol^\!" )" );
	colNameinstrument = Eval Insert( ":\!"^instrumentcol^\!"n" );
	colNamelooplot = Eval Insert( ":\!"^looplotcol^\!"n" );
	colNamepanellot = Eval Insert( ":\!"^panellotcol^\!"n" );
	
	
	//join slope/intercept table with ARSD table to get two rows for each dose.
	dosereport = ARSDtable << Join(
		With( slopeinttable ),
		Merge Same Name Columns,
		Match Flag(0),
		By Matching Columns( chemtypecol = chemtypecol ),
		Drop multiples( 0, 0 ),
		Include Nonmatches( 0, 0),
		Preserve main table order( 1 )
	);
	
	dosereport << Set Name("Loop Qualification Summary Report");
	
	//close unnecessary tables
	close(slopeinttable, nosave);
	close(ARSDtable, nosave);

	//gather information from chemistry array related to alpha, Gain SD and Offset SD.
	chem_info = chemistry_information();
	Summarize(dosereport, b = by("Assay"));
	assay_code_tested = num(b[1]);

	requirement = productReqsFunc(dosereport, dosecol, chemtypecol, "N Rows", num(chem_info[assay_code_tested]["Alpha"]) );

	//add gain, offset SDs, spec limit and pass/fail status.
	dosereport << New Column("Gain SD", set each value(chem_info[assay_code_tested]["Gain SD"]));
	dosereport << New Column("Offset SD", set each value(chem_info[assay_code_tested]["Offset SD"]));
	dosereport << New Column("Mean AR", formula( parse_dose * :Average Slope + :Average Intercept ));
	dosereport << New Column("Between ARSD", formula( Sqrt( (Tan( :Gain SD ) * Abs( :Mean AR)) ^ 2 + :Offset SD ^ 2 ) ));
	dosereport << New Column("Total ARSD", formula( Sqrt( :Within ARSD ^ 2 + :Between ARSD ^ 2 )));
	dosereport << New Column("Total Loop Outlier Threshold", set each value(chem_info[assay_code_tested]["Outlier Threshold - Loop"]));
	dosereport << New Column("Outlier Status for Loop", 
		formula(
			If( Col Sum( :Name( "NDE - Grubb's" ) ) > :Total Loop Outlier Threshold,
				"Exceeds Threshold",
				"Acceptable"
			)
		)
	);
	dosereport << New Column("Loop Dose SD", 
		Format( "Fixed Dec", 2), 
		formula(Abs((1 / :Average Slope) * (Sqrt( :Within ARSD ^ 2 + :Between ARSD ^ 2 ))) ) 
	);
	dosereport:"Requirement"n << Set Name("Assay Precision Requirement");
	dosereport:"Req Upper CI"n << Set Name("Loop Qual Specification Value");
	dosereport << New Column( "Pass/Fail Status", 
		character, 
		formula( 
			If( :Loop Dose SD < :Loop Qual Specification Value,
			"Pass",
			"Fail"
			)
		)
	);
	dosereport:"N Rows"n << Set Name("Replicates");
	
	//color the pass/fail column by color for status
	for each row(
		If(dosereport:"Pass/Fail Status"n[1] == "Pass", 
		dosereport:"Pass/Fail Status"n << color cells("Green", row()), 
		dosereport:"Pass/Fail Status"n << color cells ("Red", Row())	
		)
	);
	
	//delete formulas
	dosereport:"Mean AR"n << delete property(Formula);
	dosereport:"Between ARSD"n << delete property(Formula);
	dosereport:"Total ARSD"n << delete property(Formula);
	dosereport:"Loop Dose SD"n << delete property(Formula);
	dosereport:"Pass/Fail Status"n << delete property(Formula);
	
	return(dosereport);
	
);
