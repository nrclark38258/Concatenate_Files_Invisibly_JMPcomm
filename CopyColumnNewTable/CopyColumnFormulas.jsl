// Launch Window to Copy Colummns from one Table to Another

//Author:
//Nathan Clark
//IDEXX Laborabories, Inc.
//Westbrook, ME
//nathan-clark@idexx.com

//------------------Revision History for both script and Help File--
//
//	3.1 NClark 082019
//		-> Fixed utilities pathway
//		-> revamped copy/paste of values with << get script, then just evaluate on next table
//			-> gets attributes/data/formula/etc
//	3.0 NClark 081519
//		-> Full update to tool using newer functions to transfer attributes and properties
//		-> Added auto updates and tracking
//		-> Shifted over to functions over expressions
//	2.4 NClark 042516
//		-> No script change, updated Addin Menu Structure
//	2.3 NClark 101714
//		-> Changed another spot in Dialog to reference copy columns and not confidence intervals
//	2.2 NClark 101614
//		-> Changed Dialog from "Confidence Intervals" to "Copy Columns"
//	2.1 NClark 092914
//		-> Declared colMtrx as list with the large group of other list variables
//	2.0 NClark 092114
//		-> Updated to work with columns with formulas OR data
//		-> Default 'Ignore errors' not viable with JMP in this fashion
//		-> Updated variable list
//
//------------------------------------------------------------------
Names Default To Here( 1 );

If( !Namespace Exists( "copyCols" ), New Namespace( "copyCols" ) );
cc = Namespace("copyCols");

//-----------Variable Declarations (above Main for easy access)--
	
	If(HostIs("Mac"),
		u = Get Environment Variable("USER");
		//defaultsLocale = Convert File Path("/Users/"||u||"/Library/Application Support/JMP/NRCaddinVars/",unix);
		,
		u = Get Environment Variable("username");
		//defaultsLocale = Convert File Path(Get Environment Variable("APPDATA")||"/SAS/NRCaddinVars/",windows);
	);
	addinID = "com.idexx.nclark.copyColumnFormulas";
	updateIDs = {"com.idexx.nclark.copyColumnFormulas"};
	
	minJMPver = "14";
	
	//version now tied to currently installed addin version
	//MAY NOT BE CORRECT WHEN TESTING
	Try(
		addinVer = Char( Get Addin( addinID ) << version )
		,
		Print( "Addin not installed yet" );
		addinVer = "999";
	);
	
	//globals for 'get items': col lists
	globalGetItems = {cc:copyColList,cc:copyTblList};
	lbListGetItems = {copyColList,copyTblList};


//-----------/Variable Declarations-----------------------

include("$ADDIN_HOME(com.idexx.nclark.copyColumnFormulas)\Utilities\utilities.jsl");

exprCancel = Function( {source, window},{default local},
	window << close window;
	//sdmaCal << delete // deletes sdmacal namespace
	source1 = Match(uppercase(source),
		"OK", 1
		,
		"CANCEL", 2
	);
	Return(source1)
);

about = Function({tool,version},{default local},
	New Window( tool,
		<<Modal,
		Text Box( tool ||" v"||version, <<setfontstyle( "bold" ), <<setfontsize( 11 ) ),
		Text Box( "Nathan Clark\!nIDEXX Laboratories, Inc.\!nWestbrook, ME 04092\!nnathan-clark@idexx.com"),
		Text Box( "" ), 
		Button Box( "OK" ),
	)	
);

notImplemented = Function({},{},
	New Window("Feature Not Available",<<Modal,TextBox("This feature has not been implemented yet."),ButtonBox("OK"))
);

checkVersion = Function({minVer},{default local},
	version = Num(substitute(minVer,".",""));
	If(Num(Word(1,jmpversion(),".")) < version, a = 0, a = 1);
	Return(a)
);

help = Function({addin,filename},{},
	Open( "$ADDIN_HOME("||addin||")\"||filename )
);

wrongVer = Function({maxVer},{Default Local},
	New Window( "Requires JMP "||char(maxVer), <<Modal, Text Box( "This addin requires the used of JMP "||char(maxVer)||"+" ), Button Box( "OK" ));
);

missingItems = Function({type},{default local},
	Match(uppercase(type),
		"COLS", text = "at least one column selected"
		,
		"TBL", text = "at least one table selected"
		,
		"BOTH", text = "at least one column and one table selected"		
	);
	New Window( "Missing Information",
		<<Modal,
		Text Box( "Platform needs "||text||" to operate."),
		Text Box( "" ), 
		Button Box( "OK" ),
	);
);

checkItems = Function({colList,tblList},{default local},
	//show(nitems(colList << get items));
	//show(nitems(tblList << get items));
	
	selCols = nitems(colList << get items);
	selTbls = nitems(tblList << get items);
	
	If(
		selCols == 0 & selTbls == 0, missingItems("Both");Return(0)
		,
		selCols == 0, missingItems("Cols");Return(0)
		,
		selTbls == 0, missingItems("Tbl");Return(0)
	);
	Return(1)
);
///// Functions for populating globals of differing variable types///////
//get items like Col List boxes
populateGetItems = Function( {globalList, localList, namespace=.}, 

	For( i = 1, i <= N Items( globalList ), i++, 
	//show(nitems(globalList));
		Eval(
			Substitute(
					Expr(
						If(IsEmpty(ns),
							Unlock Globals( glVar )
						,
							ns << unlock;
						);
						Try( glVar = lb << Get Items
						, 
							Try( glVar = lb << get
							, 
								glVar = lb ) ;
						);
						If(IsEmpty(ns),
							Lock Globals( glVar )
						,
							ns << lock;
						);
					),
				Expr( lb ), Name Expr( localList[i] ),
				Expr( glVar ), Name Expr( globalList[i] ),
				Expr( ns ), Name Expr(namespace)
			)
		)
	);

	//Show( evalList(globalList), evalList(localList) );
	Return( 1 );
);
///////////////////////////////////////////////////////////////////////////////


recallItems = Function( {dtName,globalVarLists,varNameLists,colListDoublet,enableListDoublet = {}}, {default local},
	//dtName = currentdatatable();
	//globalVarLists = {globalGet,globalText,globalGetSel};
	//varNameLists = {lbListGet,lbListText,lbListGetSel};
	//colListDoublet = {globalGetItems,lbListGetItems};
	//enableListDoublet = {globalEnable,lbListEnable};
	
	If(nitems(evalList(globalVarLists)) != nitems(evalList(varNameLists)),
		Print("var list sizes don't match");
		Return(0)
		,
		Print("right number of var list items");
	);
	If(nitems(evalList(colListDoublet)) != 2,
		Print("Col List Doublet not complete");
		Return(0);
		,
		Print("Col Lists fine");
	);
	If(nitems(evalList(enableListDoublet)) == 2 | evalList(enableListDoublet) == {},
		Print("Enable Doublet fine");
		,
		Print("Enable doublets not complete");
		Return(0);
	);
	
	For(i=1,i<=nitems(globalVarLists),i++,
		list = evalList(globalVarLists)[i];
		//show(list);
		For(j=1,j<=nitems(list),j++,
			Try(
				If(isList(eval(list[j])) & nitems(eval(list[j])) == 0,
					eval(evalList(varNameLists)[i][j]) << set(1,0)
					,
					isList(eval(list[j])) & nitems(eval(list[j])) !=0,
					eval(evalList(varNameLists)[i][j]) << set(1,1)
					,
					eval(evalList(varNameLists)[i][j]) << set(eval(list[j]))
				)
				,
				print("cant do "||char(varNameLists[i][j]))
			)
		)
	);
	
	Try(list2 = evalList(enableListDoublet[1]));
	For(i=1,i<=nitems(list2),i++,
		//show(eval(enableListDoublet[1][i]),enableListDoublet[2],list2[i]);
		Try(eval(evalList(enableListDoublet)[2][i]) << enable(eval(list2[i])),print("cant do "||char(enableListDoublet[2][i])))
	);
	
	colList = dtName << Get Column Names( String );
	dtnames={};
	For( k = 1, k <= N Table(), k++,
		Insert Into( dtnames, Data Table( k ) << get name );
	);
	Try(
		For( i = 1, i <= N Items( evalList(colListDoublet)[1] ), i++,
			nextList = evalList(colListDoublet)[1][i];
			For( j = 1, j <= N Items( nextList ), j++,
				//checks to see if item is in column list, then checks table list
				If( N Row( Loc( colList, nextList[j] ) ) > 0,
					Eval( 
						Substitute( 
							Expr( lb << Append( item ) ), Expr( lb ), evalList(colListDoublet)[2][i], Expr( item ), nextList[j] 
						) 
					),					
					If( N Row( Loc( dtnames, nextList[j] ) ) > 0,
						Eval( 
							Substitute( 
								Expr( lb << Append( item ) ), Expr( lb ), evalList(colListDoublet)[2][i], Expr( item ), nextList[j] 
							) 
						)
					)
				)
			);
		)
	,
		Print( "No columns to recall." )
	);
	Return(1);
	
);

copyColumns = Function({datatable},{default local},
	datatable = currentdatatable();
	
	colScriptStr = "";
	For(i=1,i<=Length(cc:copyColList),i++,
	 
	   colScriptStr = colScriptStr || 
	   "
	   " ||
	   char(Column(datatable,cc:copyColList[i]) << Get Script) || ";";
	 
	);
	
	//loops through new tables and columns and sets properties/attributes
	For(i=1,i<=nitems(cc:copyTblList),i++,
		
		currentdatatable(DataTable(cc:copyTblList[i]));//ensures the correct table is current
		Eval(Parse(colScriptStr)); //evaluates the saved script(s) from above
	);
	
	Return(1);
);

//-------------------Platform Dialog------------------------------------------
startDialog = Function({datatable},
	//show(datatable);
	dtnames={};
	For( k = 1, k <= N Table(), k++,
		Insert Into( dtnames, Data Table( k ) << get name );
	);
	nc = N Col( datatable );
	nt = N Table();
	lbWidth = 150;
	copyColDiag = New Window( "Copy Columns",
		Border Box( Left( 3 ), top( 2 ),
			V List Box(
				Text Box( "Copy Columns from one Table to Another" ),
				H List Box(
					V List Box(
						Panel Box( "Select Columns to be Copied",
							colListData = Col List Box(
								All,
								width( lbWidth ),
								nLines( Min( nc, 10 ) )
							)
						),
						Panel Box( "Select Data Table to be Copied to",
							tblListData = List Box(
								dtnames,
								nLines( Min( nt, 10 ) )
							)
						),
					),
					Panel Box( "Cast Selected Columns into Roles",
						Lineup Box( N Col( 2 ), Spacing( 3 ),
							Button Box( "Copied Columns",
								copyColList << Append( colListData << GetSelected )
							),
							copyColList = Col List Box( width( lbWidth ), minitems(1), nLines( 5 ) ),
							Button Box( "Copy to Table", 
								copyTblList << Append( tblListData << GetSelected ) 
							),
							copyTblList = List Box( )
						)
					),
					Panel Box( "Action",
						Lineup Box( N Col( 1 ),
							Button Box( "OK", 
								If(checkItems(copyColList,copyTblList) == 1,
									populateGetItems(globalGetItems,lbListGetItems,cc);
									copyColumns(dt_start);
									exprCancel("OK",copyColDiag)
								);
							),
							Button Box( "Cancel", exprCancel("Cancel",copyColDiag) ),
							Text Box( " " ),
							Button Box( "Remove",
								copyColList << RemoveSelected;
								copyTblList << RemoveSelected;
							),
							Button Box( "Recall",
								recallItems(
									dt_start,
									{},
									{},
									{globalGetItems,lbListGetItems},
									{}
								)
							),
							Button Box( "Help", notImplemented()),//Help() ),
							Button Box( "About", about("Copy Columns",addinVer ) )
						)
					)
				)
			)
		)
	);
);

//-------------------------------------------------------------------------


////////////////////////////////////////
//                                    //
//              Main                  //
//                                    //
////////////////////////////////////////


If(Length(Include File List()) == 1,
	//batchUpdateChk(updateIDs);
	//trackUsage(u,addinID);
	//Gets data table if non opened
	If(Ntable()==0,
		Try(dt_start = Open(), Throw()),
		dt_start = currentdatatable()
	);
	startdialog(dt_start);
	,
	print("script was included from another source");
);