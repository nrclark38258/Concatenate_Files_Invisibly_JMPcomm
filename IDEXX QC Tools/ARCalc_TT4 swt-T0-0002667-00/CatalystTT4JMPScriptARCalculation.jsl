//Author(s)
//DPelletier, NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

//Script created from "TT4 Angle AR Algorithm, 0.5 Sec Read Interval, Rev. 7.0 BETA 2.jsl"
Names Default To Here( 1 );
Clear Globals();

	//Script Version
	JMPscriptVersion = "v4.2.0.1";

//-----------------Revision History for both script and Help File--
//
//	4.2.0.1 NClark 050919
//		-> Updated 'jmpscriptversion' to 4.2.0.1
//		-> Updated 'includes' to find files in utilties folder (linked version of original lib files)
//	4.2 NClark 050919
//		-> Updated 'jmpscriptversion' to 4.2
//		-> Updated sample conjugate/dry time to -120 from -116
//		-> Updated wash time to -43 from -39
//	4.1 NClark 040418
//		-> Fixed flagging bug with flag 85 (nonsuppress)
//	4.0 NClark 072417
//		-> Updated to work with both TT4 and TT4_combo
//		-> Add logic to recognize if data is from "Old" or "New" data format and then works with Assay #
//		-> separate flagging thresholds for combo and tt4
//	3.1 NClark 011017
//		-> Updated "B1" of m1b1m2b2 to be -0.0157 from -0.019
//	3.0 NClark 091015
//		-> Sample id moved in after Dried Conjugate Mfg. ID
//		-> QC Sample ID # moved to last (In Try())
//		-> Sheet # becomes Roll #
//		-> Flag_nums and flag after AR
//		-> Barcode after flags
//		-> Add version column "TT4 AR Calc Script Version"
//		-> Updated Slope (10-60s) to 'real' version that interpolates to 10 and 60s
//		-> Removes duplicate data once the sort is complete
//		-> Added a 50-60s slope column for new '87' flag
//		-> Added Names Default To Here for variable control
//		-> Created new flag variable (flagLimit7) based on slope 50-60s (column already exists)
//		-> Removed lower threshold for flagLimit4 (Dry Read Flag)
//		-> Updated Flag colummn to add new flag (87) and asterisk suppression flags
//			-> flags 77, 78, 79, and 87 (80, 82, and 86 already asterisked)
//		-> Update Flag column to only reference one limit for dry read flag (77)
//		-> Added formula columns to calculate Dry Read, Sample+Conj, Wash, and Substrate w/o need for any 'flagCols' tables
//		-> Added lines to make above formula evaluate ensuring formula propagation
//		-> Removed code creating and using flagCols or splitFlagCols tables
//		-> Added lines to make dt_joinProgCurve to equal dt_algorithm to minimize code changes later in script
//		-> Updated Flag column to use object dt_joinProgCurve instead of dt_splitFlagCols
//		-> Added Flag_nums column to mimic the Flag column with just numbers, no additional text
//		-> Added lines to evaluate Flag and Flag_nums columns ensuring full formula propagation
//		-> Updated AR formula to suppress for 7 flag conditions
//		-> Added the 6 columns to calculate the metrics used in flagging
//------------------------------------------------------------------

//useful for troubleshooting if making updates
//include("$ADDIN_HOME(com.idexx.assayDevLibraries)\AssayDev_FunctionLibrary.jsl");
//include("$ADDIN_HOME(com.idexx.assayDevLibraries)\AssayDev_ChemCodes.jsl");
//tablePrep = Expr(include("$ADDIN_HOME(com.idexx.assayDevLibraries)\AssayDev_TablePreparation.jsl"));

//WILL NEED TO ADD TO FINAL ADDIN
include("$ADDIN_HOME(com.idexx.IDEXXQCTools)\Utilities\AssayDev_FunctionLibrary.jsl");
include("$ADDIN_HOME(com.idexx.IDEXXQCTools)\Utilities\AssayDev_ChemCodes.jsl");
tablePrep = Expr(include("$ADDIN_HOME(com.idexx.IDEXXQCTools)\Utilities\AssayDev_TablePreparation.jsl"));

//Designed to only work with one input file
dt_input = Open();
//dt_input = currentdatatable();

//-----------Variable Declarations-----------------

	//Define the table variables for use in formulas.
	normTime = 40;
	threshTime = 15;
	threshArea = 1;
	numRegressPoints = 10;
	numRegressFlag5 = 98;

	//Error Flag Limits
	tt4Flags = {
		{dryReadFlag, 0.05, 0.13, "Dry[*77]"},
		{sampConjMinusDry, 0.25, 0.54, "S/C - DR[*78]"},
		{washMinusSampConj, -0.25, -0.03, "Wash - S/C[*79]"},
		{subMinusWash, -0.01, 0.35, "Sub - Wash[*80]"},
		{anomProgCurve10_60, 0.00001, 0.011, "m10-60[*82]"},
		{avgAllFlag, 0.29, 0.41, "avgAll[85]"},
		{anomInitSlopeVSub, 0.06, -0.0157, 0.036, -0.0158, "linBound[*86]"},
		{lateSlope50_60, 0.0, 0.1, "m50-60[*87]"}
	};
	tt430Flags = {
		{dryReadFlag, 0.05, 0.13, "Dry[*77]"},
		{sampConjMinusDry, 0.25, 0.54, "S/C - DR[*78]"},
		{washMinusSampConj, -0.25, -0.03, "Wash - S/C[*79]"},
		{subMinusWash, -0.01, 0.35, "Sub - Wash[*80]"},
		{anomProgCurve10_60, 0.00001, 0.011, "m10-60[*82]"},
		{avgAllFlag, 0.29, 0.41, "avgAll[85]"},
		{anomInitSlopeVSub, 0.06, -0.0157, 0.036, -0.0158, "linBound[*86]"},
		{lateSlope50_60, 0.0, 0.1, "m50-60[*87]"}
	};

	//Sets up MMDDYYYY date for Table Naming
	todayDate=Short Date( Today() );
	newTodayDate = Munger(todayDate,1,"/","");
	nextTodayDate = Munger(newTodayDate,1,"/","");

	//Sets up Variables for new naming nomenclature (rules in revision history)
	tableName = dt_input<<GetName;
	titleName = Word(1,tableName,"-");
	dateName = Substr(tableName,Munger( tableName, 1, "-" )+1,6);

//-----------/Variable Declarations-----------------

////////////////////////////////////////// Table Prep - may vary depending on data source ///////////////////
oldVSnew = "new";
Try(
	Is Scriptable(Column(dt_input,"Assay"))
,
	dt_input << New Column( "Assay", Formula( 28 ) );
	Column( dt_input, "Assay" ) << DeleteFormula;
	oldVSnew = "old";
);
//Evaluates the include listed above for table preparation
Eval(tablePrep);

////////////////////////////////////////// End Table Prep ///////////////////////////////////////////////////////

////////////////////////////////////////// Table Analysis ///////////////////////////////////////////////////////

//Add all algorithm formulas:
dt_algorithm = dt_input;

dt_algorithm << New Column("Ops TT4 AR Calc Version",Character(10),
	Formula(Eval(JMPscriptVersion))
);
Column(dt_algorithm,"Ops TT4 AR Calc Version")<<DeleteFormula;

genericAngleCalc(dt_algorithm,normTime,threshTime,threshArea,numRegressPoints,"False"); //for new endpoint analysis


////////////////////////////////////////// End Table Analysis //////////////////////////////////////////

////////////////////////////////////////// Flagging Analysis ///////////////////////////////////////////

/*function reference
	preDevelopmentMetric(tableName,columnName,metric="sp",direction="Dry",eventOneTime="NULL",eventTwoTime="NULL",singlePoint=1);
	genericInterpMetric(tableName,columnName,startingTime,endingTime,metric);
*/
//Adding several metrics from the curve that are useful in diagnosing errant runs

preDevelopmentMetric(dt_algorithm,"Dry Read","sp","dry",-120,"null","last");

preDevelopmentMetric(dt_algorithm,"Sample Mix","sp","wet",-120);

preDevelopmentMetric(dt_algorithm,"Wash","sp","wet",-43);

genericInterpMetric(dt_algorithm,"Substrate",1,10.136,"EP");

genericInterpMetric(dt_algorithm,"Slope (10-60s)",10,60,"Slope");

genericInterpMetric(dt_algorithm,"Slope (50-60s)",50,60,"Slope");

dt_algorithm << New Column("SampMix - Dry",
	Formula(:Name( "Sample Mix" ) - :Dry Read)
);
dt_algorithm << New Column("Wash - SampMix",
	Formula(:Wash - :Name( "Sample Mix" ))
);
dt_algorithm << New Column("Sub - Wash",
	Formula(:Substrate - :Wash)
);
dt_algorithm << New Column("avgAll",
	Formula((:Dry Read + :Name( "Sample Mix" ) + :Wash + :Substrate)/4)
);
dt_algorithm << New Column("LowerLinBound",
	Formula(Round( tt430Flags[7][4] * :Substrate + tt430Flags[7][5], 10 ))
);
dt_algorithm << New Column("UpperLinBound",
	Formula(Round( tt430Flags[7][2] * :Substrate + tt430Flags[7][3], 10 ))
);
Column(dt_algorithm, "SampMix - Dry")<<deleteformula;
Column(dt_algorithm, "Wash - SampMix")<<deleteformula;
Column(dt_algorithm, "Sub - Wash")<<deleteformula;
Column(dt_algorithm, "avgAll")<<deleteformula;
Column(dt_algorithm, "LowerLinBound")<<deleteformula;
Column(dt_algorithm, "UpperLinBound")<<deleteformula;

If(oldVSnew == "old",
	assayDevFlagging(dt_algorithm,tt4Flags,"TT4");
,
	oldVSnew == "new",
	assayDevFlagging(dt_algorithm,tt430Flags,"TT4");
);

//Adds AR column that is the same as Angle unless flags are present, then AR = -1
//Currently all flags are suppression flags
dt_algorithm << New Column( "AR",
	Formula(
		If(
			:Angle == -999, -2
		,
			:Flag_nums != "85" & :Flag_nums != "None", -1
		,
			:Angle
		)
	)
);
Column(dt_algorithm, "AR")<<deleteformula;

////////////////////////////////////////// End Flagging Analysis ///////////////////////////////////////

////////////////////////////////////////// Finisihing Touches //////////////////////////////////////////
//Finishing touches will be Assay and User (R&D, Ops, etc) specific

//Duplicates table in manner to remove formulas
dt_algorithmFinal = dt_algorithm << Subset(
	Copy formula( 0 ),
	All rows,
	Selected columns only( 0 )
);

dt_algorithmFinal << SetName(
	titleName||"-"||dateName||"_"||"TT4 AR_"||nextTodayDate|| "_progCurves"
);

If( oldVSnew == "old",
	//Moves most important columns to front of table
	//Try() functions move columns not in common beteween table origins
	dt_algorithmFinal << MoveSelectedColumns(
		{
			"Sample ID"
		},
		After ("Dried Conjugate Mfg. ID")
	);
	dt_algorithmFinal << MoveSelectedColumns(
		{
			"Instrument ID",
			"AR",
			"Flag",
			"Flag_nums"
		},
		After ("Sample ID")
	);
	dt_algorithmFinal << MoveSelectedColumns(
		{
			"Instrument"
		},
		After ("catalystDxSoftwareVersion")
	);

	Try(
		dt_algorithmFinal << MoveSelectedColumns(
			{
				"QC Sample ID #"
			},
			To Last
		);
	);
	Try(
		dt_algorithmFinal << MoveSelectedColumns(
			{
				"Barcode"
			},
			After ("Flag_nums")
		);
	);

	//Sheet # may automatically be renamed to Roll # in later version of QC tool
	//The Try() ensures this script will not error if Sheet # doesn't exist
	Try(
		column(dt_algorithmFinal,"Sheet #") << Setname("Roll #");
	);
,
	oldVsNew == "new",
	dt_algorithmFinal << MoveSelectedColumns(
		{
			"Date/Time",
			"Date",
			"Time",
			"Set ID",
			"Operator ID",
			"Run Number",
			"Dried Conjugate Mfg. ID",
			"Sample ID",
			"Instrument ID",
			"AR",
			"Flag",
			"Flag_nums",
			"Barcode"
		},
		To First
	);
);

//Selects one read from each curve to subset into table with only 1 Angle result per run
dt_algorithmFinal << Select Where( (:Name("TimeFromSampleDispense:sec") > 0 & Lag(:Name("TimeFromSampleDispense:sec"),-1)<0) | Row() == NRow());

//Get subset with just the results
dt_justResult = dt_algorithmFinal << Subset(
	output table name( titleName||"-"||dateName||"_"||"TT4 AR_"||nextTodayDate|| "_justResults" )
);
dt_algorithmFinal << SelectAllRows;
dt_algorithmFinal << InvertRowSelection;

////////////////////////////////////////// End Finisihing Touches //////////////////////////////////////

//Close all working tables.
Close( dt_algorithm, nosave );
