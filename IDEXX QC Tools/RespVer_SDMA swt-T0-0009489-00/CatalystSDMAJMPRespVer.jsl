//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092
//nathan-clark@idexx.com

//Tool to help decide correct titer for SDMA Assay

//------------------Revision History -------------------------------
//
//	1.5.0 NClark 091521
//		-> Commentd out 'close window' that breaks JMP 15 (closing table removes variable forcing error, JMP 14 does not react same)
//	1.4.0.0 NClark 091818
//		-> Updated Text for Reponse failure
//	1.3.0.2 NClark 091018
//		-> Updated failcheck to work with two sets of data instead of just one
//	1.3.0.1 NClark 051118
//		-> Added graphic to compare actual resp curve to predicted modeled one
//		-> updated journal to control where graphs went
//		-> Updated graph and table names
//	1.3 NClark 050918
//		-> added opening of titer op table to compare modeld with actual
//		-> updated col name check
//		-> removed clear globals()
//	1.2 NClark 042518
//		-> Changed LCMS to SDMA Conc
//	1.1 NClark 091417
//		-> Update 'acceptable' line to new specs
//	1.0 NClark 072817
//		-> Finalized updates for 1st release
//	Beta 5 NClark xxxxxx
//	Beta 4 NClark xxxxxx
//	Beta 3 NClark 072717
//		-> Fixed last bug to correct Match on titer, not titer column
//	Beta 2 NClark 072217
//		-> Fixed doseSDform
//		-> Fixed current bug with OrdconjugateTiter being wrong decimals
//	Beta 1 NClark 0720
//		-> Rough attempt at tool, math looks right
//------------------------------------------------------------------
Names Default To Here( 1 );	

//named because JMP has a built in Sequence function
nrcSequence = Function({startValue,endValue,increment},{default Local},
	seqList = {};
	For(i=startValue,i<endValue + increment,i+=increment,
		insertInto(seqList,i)
	);
	Return(seqList)
);
missingCols = Function( {tableFail},{tableFail},
	If(tableFail == "Both",
		tableFail = "Both Tables", tableFail = tableFail||" Table"
	);
	New Window( tableFail||"_Incomplete Column Selection",
		<<Modal,
		Text Box( "Naming issue with "||tableFail, <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "One or more columns are missing or incorrect for data type", <<setfontstyle( "bold" ), <<setfontsize( 10 ) ),
		Text Box( "" ), 

		Text Box( "Please be sure the following nomenclature stadards are being adhered to", <<setfontstyle( "bold" ) ),
		Text Box( "\!"Angle\!" = Analyzer response column" ),
		Text Box( "\!"SDMA Conc\!" = Reference dose column" ),
		Text Box( "\!"conjugateTiter\!" = Titer dose column" ),
		Button Box( "OK" ),

	)
);
failedVerificationEvent = Function({},{default local},
	New Window( "Failed Verification Event",
		<<Modal,
		Text Box( "Response verification failed", <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Text Box( "" ), 
		Text Box( "Retest may be needed or contact supervisor or R&D", <<setfontstyle( "bold" )),
		Button Box( "OK" ),
	)
);
successfulVerificationEvent = Function({},{default local},
	New Window( "Successful Titer Event",
		<<Modal,
		Text Box( "Response Verification Passed", <<setfontstyle( "bold" ), <<setfontsize( 12 ) ),
		Button Box( "OK" ),
	)
);

//startDil = 6; // 5:1 = 6x = 6, 7:1 = 8x = 8 and so on
doseStartValues = nrcSequence(0,100,1);
//titerStartValues = nrcSequence(0.05,0.6,0.01);
//dilStartValues = nrcSequence(startDil,startDil,2);
//If(dilStartValues[1] == 0,
//	removeFrom(dilStartValues,1);
//);

//sets up for all columns to be added with formulas
//startFormula = "dt_start<<newcolumn(\!"Predict Angle\!", Formula(Match(";
//startFormula1 = "titerDT<<newcolumn(\!"AR (Dose sub0.05)\!", Formula(Match(";
startFormula2 = "titerDT<<newcolumn(\!"AR(Dose)\!", Formula(Match(:Name(\!"Ord(conjugateTiter)\!"),";
//startFormula3 = "titerDT<<newcolumn(\!"AR (Dose add0.05)\!", Formula(";
startFormula4 = "titerDT<<newcolumn(\!"1stDeriv_AR(Dose)\!", Formula(Match(:Name(\!"Ord(conjugateTiter)\!"),";
startFormula5 = "titerDT<<newcolumn(\!"AR SD(Dose)\!", Formula(";
startFormula6 = "titerDT<<newcolumn(\!"Dose SD(Dose)\!", Formula(";

endForm = ")))";
arSDendForm = "))";

arSDform = "(1.2046957598E-04 + 4.6037745001E-02 * :Name( \!"AR (Dose)\!" ) +
	-5.8460259381E-01 * (:Name( \!"AR (Dose)\!" ) ^ 2))";

dt_start = currentdatatable();
dt_titer = Open();
startName = dt_start << GetName();

Try(IsScriptable(Column(dt_start,"conjugateTiter"));
	IsScriptable(Column(dt_start,"SDMA Conc"));
	IsScriptable(Column(dt_start,"Angle"));
,
	missingCols("Response Verification");
	Close(dt_titer,nosave);
	throw();
);

dt = dt_start << Subset(Output Table( startName ), All Rows,Selected columns only( 0 ),invisible);

For(i=1,i<=nrow(dt),i++,
	If(Column(dt,"SDMA Conc")[i] == 0,
		Column(dt,"SDMA Conc")[i] = 0.01 // Change to 1?
	,
		Empty()
	)
);

Summarize(dt,titerList = by(Column("conjugateTiter")));
For(j=1,j<=nitems(titerList),j++,
	For(i=1, i<=100,i++,
		dt << Add Rows( {:Name("SDMA Conc") = 10000, :Name("Angle") = 0.0001, :Name("conjugateTiter") = Num(titerList[j])})
	)
);
//Column(dt,"Concentration Ratio") << Suppress formula eval(0);

doseCurve = dt << Fit Curve( 
	Y( :Name("Angle") ), 
	X( :Name("SDMA Conc") ), 
	Fit Logistic 4P Rodbard,
	By(:Name("conjugateTiter"))
);
//doseCurve << (Fit[1] << save prediction formula); //May not be needed with all the other stuff.
combCurves = dt_start << Bivariate( 
	Y( :Name("Angle") ),
	X( :Name("SDMA Conc") ),
	SendToReport(
		Dispatch(
			{},
			"Bivariate Fit of Angle By SDMA Conc",
			OutlineBox,
			{Set Title(
				"Actual Response Curve (Black) vs Predicted Response Curve (Blue)"
			)}
		),
		Dispatch(
			{},
			"1",
			ScaleBox,
			{Min( -5 ), Max( 100 ), Inc( 10 ), Minor Ticks( 1 )}
		),
		Dispatch(
			{},
			"Bivar Plot",
			FrameBox,
			{Frame Size( 384, 329 ), Grid Line Order( 6 ), Reference Line Order( 7 )}
		)
	)
);
combCurves << show window(0);

If(nitems(titerList) == 1,
	params = Report(doseCurve)[Tablebox(3)] << make combined datatable;
	params << show window(0);
,
	params = Report(doseCurve[1])[Tablebox(3)] << make combined datatable;
	params << show window(0);
);

For(i=ncol(params),i>=1,i--,
	a = Column(params,i) << getname();
	
	If(a != "Parameter" & a != "Estimate" &a != "conjugateTiter",
		//Print("deleting");
		//For(j=1, j<=nitems(params),j++,
			params << DeleteColumns(a);
		//)
	,
		Empty()
	)
);
/* Rodbard Normal Form (for deriv calculations):([c-L asympt]) + ([d-U asympt] - ([c-L asympt])) / (1 + ([Concentration] / [b-inflection]) ^ [a-Growth])*/
fitformula = {};
fitDerivForm = {};
For( i = 1, i <= N Items( titerList ), i++,
	r = Eval Insert( "\!"^titerList[i]^\!"" );
	fitFormula[i] = r || "," || Char(
		Eval Expr(
			Expr( params[(4 * i - 1), 3] ) + (Expr( params[(4 * i), 3] ) - Expr( params[(4 * i - 1), 3] )) / (1 + (:Name( "Dose" ) /
			Expr( params[(4 * i - 2), 3] )) ^ Expr( params[(4 * i - 3), 3] ))
		)
	);
	fitDerivForm[i] = r || "," || Char(
		Eval(
			Eval Expr(
				Derivative(
					Expr( params[(4 * i - 1), 3] ) + (Expr( params[(4 * i), 3] ) - Expr( params[(4 * i - 1), 3] )) / (1 + (:Name( "Dose" ) / Expr( params[(4 * i - 2), 3] )) ^ Expr( params[(4 * i - 3), 3] ))
				,
					:Name( "Dose" )
				)
			)
		)
	);
);
fitConcatFormula = ConcatItems(fitFormula,",");
fitConcatDerivForm = ConcatItems(fitDerivForm,",");

//adds rodbard lines to original data
For( i = 1, i <= N Items( titerList ), i++,
	Eval(
		Eval Expr(
			Report( combCurves )[FrameBox( 1 )] << Add Graphics Script(
				1,
				Description( "Titer_"||Expr(titerList[i]) ),
				Y Function(
					Expr( params[(4 * i - 1), 3] ) + (Expr( params[(4 * i), 3] ) - Expr( params[(4 * i - 1), 3] )) / (1 + (x /
			Expr( params[(4 * i - 2), 3] )) ^ Expr( params[(4 * i - 3), 3] ))
				,
					x
				)
			);
		)
	)
);
Close(params, nosave);
Close(dt, nosave);
//doseCurve << Close window(); (breaks jmp 15 when dt closes report when it closes)

doseSDform = Concat("-((1 / Match(:Name(\!"Ord(conjugateTiter)\!"),",fitConcatDerivForm,")) *", arSDform, ")");

//fullFitform = Concat(startFormula, fitFormula, endForm);
//fullARdoseSub0_5form = Concat(startFormula1, midForm1, subForm1, endForm);
fullARdoseForm = Concat(startFormula2, fitConcatFormula, endForm);
//fullARdoseAdd0_5form = Concat(startFormula3, midForm3, subForm3, endForm);
fullSlopeForm = Concat(startFormula4,fitConcatDerivForm,endForm);
fullARsdForm = Concat(startFormula5,arSDform,arSDendForm);
//fullDoseSDform = Concat(startFormula6,doseSDForm,arSDendForm);

titerDT1 = New Table("Titers",New Column("conjugateTiter",set values(titerList)),private);
titerDT2 = New Table("Doses",New Column("Dose",set values(doseStartValues)),private);

titerDT = titerDT1 << Join( With( titerDT2 ), Cartesian Join,private);

Close(titerDT1,nosave);
Close(titerDT2,nosave);

titerDT << new column ("Ord(conjugateTiter)", Ordinal, Character(10),
	Formula(Char(Round(:Name("conjugateTiter"),3)))
);
Column(titerDt,"Ord(conjugateTiter)") << deleteformula();

//Eval( Parse( fullFitForm ) ); //puts 'angle predictor' in base table (combine with all evals later)
//Eval( Parse( fullARdoseSub0_5form ));
Eval( Parse( fullARdoseForm ));
//Eval( Parse( fullARdoseAdd0_5form ));

Eval( Parse( fullSlopeForm ));
Eval( Parse( fullARsdForm ));
//Eval( Parse( fullDoseSDForm ));

titerDT << New Column("Dose SD(Dose)",
	Formula(
		-(:Name( "AR SD(Dose)" ) * (1 / :Name( "1stDeriv_AR(Dose)" )))
	)
);
titerDT << New Column("Data Type",
	Formula("Dose Response")
);
Column(titerDT,"Data Type")<<deleteformula();

titerConcat = titerDT << Concatenate(dt_titer);

titerConcat << Set Name("Response Verification Table");

Column(titerConcat,"Ord(conjugateTiter)") << Set Formula(Round(:Name("conjugateTiter"),3));
Column(titerConcat,"Ord(conjugateTiter)") << delete formula();
Column(titerConcat,"Ord(conjugateTiter)") << Data Type("Character");

For(i=1, i<= nrow(titerConcat),i++,
	Row State(i) = combine states(Marker State(0),Color State(0));
);

For(i=1, i<=nitems(titerList),i++,
	rowMtrx = titerConcat << get rows where(:Name("Ord(conjugateTiter)") == titerList[i]);
	For(j=1,j<=nrow(rowMtrx),j++,
		Row State(rowMtrx[j]) = Marker State(i + 3)
	)
);

For Each Row(titerConcat,
	If(:Name("Dose") == 15 | :Name("Dose") == 60,
		RowState() = CombineStates(SelectedState(0),MarkerState(16),ColorState(3));

	)
);
Summarize(titerConcat, a = by(:Name("Dose"),:Name("Data Type")), c = Mean(:Name("Dose SD(Dose)")));
fifteenLocale = Contains(a[1], "15");
sixtyLocale = Contains(a[1], "60");
If(c[fifteenLocale] <= 1.5 & c[sixtyLocale] <=6,
	responseCheck = "Pass"
,
	responseCheck = "Fail"
);
quickTable = titerConcat << Subset( All rows, Selected columns only( 0 ));
quickTable << SelectWhere( Contains(titerList,:Name( "Ord(conjugateTiter)" ))==0 ) << deleterows;
quickTable << SelectWhere( IsMissing(:Name("Growth Rate(conjugateTiter)")) | :Name("Dose") != 0 ) << deleterows;

For Each Row(
	quickTable,
	Eval(
		Eval Expr(
			Report( combCurves )[FrameBox( 1 )] << Add Graphics Script(
				1,
				Description( "ModeledTiter_"||Char(Expr(Column(quickTable,"conjugateTiter")[Row()])) ),
				Pen Color("Blue");
				Y Function(
					Expr( quickTable[Row(),13] ) + (Expr( quickTable[Row(),14] ) - Expr( quickTable[Row(),13] )) / (1 + (x /
			Expr( quickTable[Row(),12] )) ^ Expr( quickTable[Row(),11] ))
				,
					x
				)
			)
		)
	);
);
Close(quickTable,nosave);

biv1 = titerConcat << Bivariate(
	Y( :Name( "Dose SD (Dose)" ) ),
	X( :Name("Dose") ),
	SendToReport(
		Dispatch(
			{},
			"2",
			ScaleBox,
			{Min( 0.1 ), Max( 10 ), Inc( 1 ), Minor Ticks( 1 )}
		),
		Dispatch(
			{},
			"1",
			ScaleBox,
			{Min( 0 ), Max( 100 ), Inc( 10 ), Minor Ticks( 1 )}
		),
		Dispatch(
			{},
			"Bivar Plot",
			FrameBox,
			{Frame Size( 450, 368 ),
			Add Graphics Script(
				4,
				Description( "Precision Req" ),
				Pen Size( 2 ); 
				Pen Color( "blue" ); 
				Line( {0, 1.5}, {5, 1.5}, {9, 1}, {20, 1}, {50, 3}, {100, 5} ); 
				Pen Color( "red" ); 
				Line( {0, 1.5}, {15, 1.5}, {18, 1.7}, {25, 2.25}, {50, 5}, {100, 10} );
			), Row Legend(
				Name("Data Type"),
				Color( 1 ),
				//Color Theme( "Jet" ),
				Marker( 0 ),
				Marker Theme( "" ),
				Continuous Scale( 0 ),
				Reverse Scale( 0 ),
				Excluded Rows( 0 )
			)
			}
		),
		Dispatch(
			{},
			"Bivariate Fit of Dose SD(Dose) By Dose",
			OutlineBox,
			{Set Title( "DoseSD Predicitons: Response Ver (Red), Original Model (Blue)" )}
		)
	)
);

biv1 << Local Data Filter(
	Auto clear( 0 ),
	Add Filter(
		columns( :Name( "Ord(conjugateTiter)" ) ),
		Where( :Name( "Ord(conjugateTiter)" ) == titerList[1] ),
		Display( :Name( "Ord(conjugateTiter)" ), Size( 160, 225 ), List Display ),
		//Order By Count( :Name( "Ord(conjugateTiter)" ) 
	)
);
wait(0);
nw = New Window("Response Verification Data", <<Journal,

	vlb = V List Box(
		
	)
);
vlb << Append(Report(combCurves));
vlb << Append(Report(biv1));
titerSub = titerDT << selectwhere(:Name("Dose") == 0 | :Name("Dose") == 15 | :Name("Dose") == 60 ) << Subset("Subset",SelectedRows(1),private);
titerTab = titerSub << Tabulate(
	Change Item Label( Statistics( Sum, "Data" ) ),
	Show Control Panel( 0 ),
	Add Table(
		Column Table(
			Analysis Columns( :Name( "AR (Dose)" ), :Name( "Dose SD (Dose)" ) )
		),
		Row Table( Grouping Columns( :Name( "Ord(conjugateTiter)" ), :Dose ) )
	),
	SendToReport( Dispatch( {}, "Tabulate", OutlineBox, {Set Title( "AR and DoseSD Metrics" )} ) )
);
vlb << Append(Report(titerTab));
combCurves << close window;
Close(titerSub,nosave);
Close(dt_titer,nosave);
Close(titerDT,nosave);
Match(responseCheck,
	"Pass",
	successfulVerificationEvent();
	titerConcat << New Column("Disposition",
		Formula("Passed")
	);
	Column(titerConcat,"Disposition") << deleteformula
,
	"Fail",
	failedVerificationEvent();
	titerConcat << New Column("Disposition",
		Formula("Failed")
	);
	Column(titerConcat,"Disposition") << deleteformula
);

