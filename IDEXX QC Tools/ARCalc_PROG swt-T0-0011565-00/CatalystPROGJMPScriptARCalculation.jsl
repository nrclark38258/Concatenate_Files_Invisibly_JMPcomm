//Author(s)
//DPelletier, NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

Names Default To Here( 1 );
Clear Globals();

	//Script Version
	JMPscriptVersion = "v1.1.0.1";

//-----------------Revision History for both script and Help File--
//
//	1.1.0.1 NClark 050919
//		-> Updated 'jmpscriptversion' to 1.1.0.1
//		-> Updated 'includes' to find files in utilties folder (linked version of original lib files)
//	1.1 NClark 050919
//		-> Updated 'jmpscriptversion' to 1.1
//		-> Updated sub-wash threshold to -0.02 from -0.01
//		-> Updated sample conjugate/dry time to -120 from -116
//		-> Updated wash time to -43 from -39
//	1.0 NClark 082416
//		-> First Version Released
//		-> Based on sw-T0-0009237 (SDMA QC Tool)
//		-> Updated all SDMA items to PROG items
//
//------------------------------------------------------------------

//useful for troubleshooting if making updates
//include("$ADDIN_HOME(com.idexx.assayDevLibraries)\AssayDev_FunctionLibrary.jsl");
//include("G:\JMP\JMP Scripts\00-AddIns\Library Files\AssayDev_ChemCodes.jsl");
//tablePrep = Expr(include("G:\JMP\JMP Scripts\00-AddIns\Library Files\TablePreparation\AssayDev_TablePreparation v1.8.jsl"));

include("$ADDIN_HOME(com.idexx.IDEXXQCTools_PROG)\Utilities\AssayDev_FunctionLibrary.jsl");
include("$ADDIN_HOME(com.idexx.IDEXXQCTools_PROG)\Utilities\AssayDev_ChemCodes.jsl");
tablePrep = Expr(include("$ADDIN_HOME(com.idexx.IDEXXQCTools_PROG)\Utilities\AssayDev_TablePreparation.jsl"));

//Designed to only work with one input file
dt_input = Open();

//-----------Variable Declarations-----------------

	//Define the table variables for use in formulas.
	normTime = 40;
	threshTime = 15;
	threshArea = 1;
	numRegressPoints = 10;
	numRegressFlag5 = 98;

	//Error Flag Limits
	progFlags = {
		{dryReadFlag, 0.05, 0.13, "Dry[*77]"},
		{sampConjMinusDry, 0.25, 0.54, "S/C - DR[*78]"},
		{washMinusSampConj, -0.25, -0.03, "Wash - S/C[*79]"},
		{subMinusWash, -0.02, 0.35, "Sub - Wash[*80]"},
		{anomProgCurve10_60, 0.00001, 0.011, "m10-60[*82]"},
		{avgAllFlag, 0.29, 0.41, "avgAll[85]"},
		{anomInitSlopeVSub, 0.06, -0.0157, 0.036, -0.0158, "linBound[*86]"},
		{lateSlope50_60, 0.0, 0.1, "m50-60[*87]"}
	};

	//Sets up MMDDYYYY date for Table Naming
	todayDate=Short Date( Today() );
	newTodayDate = Munger(todayDate,1,"/","");
	nextTodayDate = Munger(newTodayDate,1,"/","");

	//Sets up Variables for new naming nomenclature (rules in revision history)
	tableName = dt_input<<GetName;
	titleName = Word(1,tableName,"-");
	dateName = Substr(tableName,Munger( tableName, 1, "-" )+1,6);

//-----------/Variable Declarations-----------------

////////////////////////////////////////// Table Prep - may vary depending on data source ///////////////////

//Evaluates the include listed above for table preparation
Eval(tablePrep);

////////////////////////////////////////// End Table Prep ///////////////////////////////////////////////////////

////////////////////////////////////////// Table Analysis ///////////////////////////////////////////////////////

//Add all algorithm formulas:
dt_algorithm = dt_input;

dt_algorithm << New Column("Ops PROG AR Calc Version",Character(10),
	Formula(Eval(JMPscriptVersion))
);
Column(dt_algorithm,"Ops PROG AR Calc Version")<<DeleteFormula;

genericAngleCalc(dt_algorithm,normTime,threshTime,threshArea,numRegressPoints,"False"); //for new endpoint analysis

////////////////////////////////////////// End Table Analysis //////////////////////////////////////////

////////////////////////////////////////// Flagging Analysis ///////////////////////////////////////////
/*function reference
	preDevelopmentMetric(tableName,columnName,metric="sp",direction="Dry",eventOneTime="NULL",eventTwoTime="NULL",singlePoint=1);
	genericInterpMetric(tableName,columnName,startingTime,endingTime,metric);
*/
//Adding several metrics from the curve that are useful in diagnosing errant runs

preDevelopmentMetric(dt_algorithm,"Dry Read","sp","dry",-120,"null","last");

preDevelopmentMetric(dt_algorithm,"Sample Mix","sp","wet",-120);

preDevelopmentMetric(dt_algorithm,"Wash","sp","wet",-43);

genericInterpMetric(dt_algorithm,"Substrate",1,10.136,"EP");

genericInterpMetric(dt_algorithm,"Slope (10-60s)",10,60,"Slope");

genericInterpMetric(dt_algorithm,"Slope (50-60s)",50,60,"Slope");

genericInterpMetric(dt_algorithm,"Slope (10-20s)",10,20,"Slope");

//Additional metrics based arithmetically on above metrics
dt_algorithm << New Column("SampMix - Dry",
	Formula(:Name( "Sample Mix" ) - :Dry Read)
);
dt_algorithm << New Column("Wash - SampMix",
	Formula(:Wash - :Name( "Sample Mix" ))
);
dt_algorithm << New Column("Sub - Wash",
	Formula(:Substrate - :Wash)
);
dt_algorithm << New Column("avgAll",
	Formula((:Dry Read + :Name( "Sample Mix" ) + :Wash + :Substrate)/4)
);
dt_algorithm << New Column("LowerLinBound",
	Formula(Round( PROGFlags[7][4] * :Substrate + progFlags[7][5], 10 ))
);
dt_algorithm << New Column("UpperLinBound",
	Formula(Round( PROGFlags[7][2] * :Substrate + progFlags[7][3], 10 ))
);
Column(dt_algorithm, "SampMix - Dry")<<deleteformula;
Column(dt_algorithm, "Wash - SampMix")<<deleteformula;
Column(dt_algorithm, "Sub - Wash")<<deleteformula;
Column(dt_algorithm, "avgAll")<<deleteformula;
Column(dt_algorithm, "LowerLinBound")<<deleteformula;
Column(dt_algorithm, "UpperLinBound")<<deleteformula;

assayDevFlagging(dt_algorithm,progFlags,"PROG");

//Adds AR column that is the same as Angle unless flags are present, then AR = -1
//Currently all flags are suppression flags
dt_algorithm << New Column( "AR",
	Formula(
		If(
			:Angle == -999, -2
		,
			:Flag_nums != "85" & :Flag_nums != "None", -1
		,
			:Angle
		)
	)
);
Column(dt_algorithm, "AR")<<deleteformula;

////////////////////////////////////////// End Flagging Analysis ///////////////////////////////////////

////////////////////////////////////////// Finisihing Touches //////////////////////////////////////////
//Finishing touches will be Assay and User (R&D, Ops, etc) specific

//Duplicates table in manner to remove formulas
dt_algorithmFinal = dt_algorithm << Subset(
	Copy formula( 0 ),
	All rows,
	Selected columns only( 0 )
);

dt_algorithmFinal << SetName(
	titleName||"-"||dateName||"_"||"PROG AR_"||nextTodayDate|| "_progCurves"
);

//Moves most important columns to front of table
//Try() functions move columns not in common beteween table origins
dt_algorithmFinal << MoveSelectedColumns(
	{
		"Date/Time",
		"Date",
		"Time",
		"Set ID",
		"Operator ID",
		"Run Number",
		"Dried Conjugate Mfg. ID",
		"Sample ID",
		"Instrument ID",
		"AR",
		"Flag",
		"Flag_nums",
		"Barcode"
	},
	To First
);

//Selects one read from each curve to subset into table with only 1 Angle result per run
dt_algorithmFinal << Select Where( (:Name("TimeFromSampleDispense:sec") > 0 & Lag(:Name("TimeFromSampleDispense:sec"),-1)<0) | Row() == NRow());

//Get subset with just the results
dt_justResult = dt_algorithmFinal << Subset(
	output table name( titleName||"-"||dateName||"_"||"PROG AR_"||nextTodayDate|| "_justResults" )
);
dt_algorithmFinal << SelectAllRows;
dt_algorithmFinal << InvertRowSelection;

////////////////////////////////////////// End Finisihing Touches //////////////////////////////////////

//Close all working tables.
Close( dt_algorithm, nosave );
