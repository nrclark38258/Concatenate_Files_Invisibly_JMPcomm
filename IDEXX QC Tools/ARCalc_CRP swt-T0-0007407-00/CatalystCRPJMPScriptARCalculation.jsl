//Author(s)
//DPelletier, NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

Names Default To Here( 1 );
Clear Globals();

	//Script Version
	JMPscriptVersion = "v3.3";

//-----------------Revision History for both script and Help File--
//
//	3.3 NClark 050919
//		-> Updated 'jmpscriptversion' to 3.3
//		-> Updated 'includes' to find files in utilties folder (linked version of original lib files)
//	3.2 NClark 051017
//		-> Update tool version column to say 'Ops' instead of 'R&D'
//	3.1 NClark 040617
//		-> Updated flagging thresholds
//			-> SampMix - Dry from 1.2 to 5 (effectively removes upper threshold)
//			-> RespRange from 0.008 to 5 (effectively removes threshold)
//			-> Dry Read from 0.05 to 0.04 (proactive adjustment for SW planned to be released later)
//	3.0 NClark 010517
//		-> Updated assay to End Point AR
//		-> Added flagging
//	2.0 NClark 082916
//		-> Switched to new infrastructure of 'include' scripts to make updating easier and transferrable between assays
//		-> Updated flagging parameters to match what will be used.
//		-> Moved include code to earlier in table for easy of use
//		-> Updated finishing touches and column order
//	1.0 NClark 032216
//		-> First Version Released
//		-> Based on swt-T0-0002667 (TT4 QC Tool)
//		-> Added pertinant code from RnD CRP AR Calculator v2.0
//
//		-> Updated variables for CRP (numStart and numEnd)
//		-> Copied column naming variables from CRP for column naming
//		-> Commented out Flag information
//		-> Removed flag section other than adjusted formula for AR
//		-> renamed dt_joinProgCurve to dt_algorithm for ease of variable transfer
//		-> Removed all algorithm stuff for TT4 and replaced it with CRP Avg End Point
//		-> Adjusted finishing touches so CRP reference not, TT4
//		-> commented out lines for moving Flag and Flag_nums columns as they don't exist yet
//
//------------------------------------------------------------------

//useful for troubleshooting if making updates
//include("$ADDIN_HOME(com.idexx.assayDevLibraries)\AssayDev_FunctionLibrary.jsl");
//include("G:\JMP\JMP Scripts\00-AddIns\Library Files\AssayDev_ChemCodes.jsl");
//tablePrep = Expr(include("G:\JMP\JMP Scripts\00-AddIns\Library Files\TablePreparation\AssayDev_TablePreparation v1.8.jsl"));

include("$ADDIN_HOME(com.idexx.IDEXXQCTools_CRP)\Utilities\AssayDev_FunctionLibrary.jsl");
include("$ADDIN_HOME(com.idexx.IDEXXQCTools_CRP)\Utilities\AssayDev_ChemCodes.jsl");
tablePrep = Expr(include("$ADDIN_HOME(com.idexx.IDEXXQCTools_CRP)\Utilities\AssayDev_TablePreparation.jsl"));

//Designed to only work with one input file
dt_input = Open(); 

//-----------Variable Declarations-----------------
	
	//Define the table variables for use in formulas.
	numStartTime = 25;
	numEndTime = 40;
	colName = "EP(" || Char( numEndTime ) || "s)";
	
	//Error Flag Limits
	crpFlags = {
		{dryReadFlag, 0.04, 0.13, "Dry[77]"}, //8095
		{sampMixMinusDry, 0.871, 5, "sMix-Dry[78]"}, //8096
		{sampMixMinusRespAvg, 0.0, 0.95, "sMix-AR[79]"}, //8097 in as wash minus SC	(postWashAll-rename and fix)
		{responseRange, -5, 5, "Resp Range[91]"}//, //8100
	};
	
	//Sets up MMDDYYYY date for Table Naming
	todayDate=Short Date( Today() );
	newTodayDate = Munger(todayDate,1,"/","");
	nextTodayDate = Munger(newTodayDate,1,"/","");
	
	//Sets up Variables for new naming nomenclature (rules in revision history)
	tableName = dt_input<<GetName;
	titleName = Word(1,tableName,"-");
	dateName = Substr(tableName,Munger( tableName, 1, "-" )+1,6);
	
//-----------/Variable Declarations-----------------

////////////////////////////////////////// Table Prep - may vary depending on data source ///////////////////

//Evaluates the include listed above for table preparation
Eval(tablePrep);

////////////////////////////////////////// End Table Prep ///////////////////////////////////////////////////////

////////////////////////////////////////// Table Analysis ///////////////////////////////////////////////////////

//Add all algorithm formulas:
dt_algorithm = dt_input;

dt_algorithm << New Column("Ops CRP AR Calc Version",Character(10),
	Formula(Eval(JMPscriptVersion))
);
Column(dt_algorithm,"Ops CRP AR Calc Version")<<DeleteFormula;

//Function calculates the analyzer response based on 4 parameters: column Name, start time, end time and metric
//Full descritption can be found in the 'function library' include listed above
//Outputs the formula in a column along with a 'column version' of column name (from "test" to :test)

//genericInterpMetric(tableName,columnName,startingTime,endingTime,metric)
genericInterpMetric(dt_algorithm,colName,numStartTime,numEndTime,"EP"); //for new endpoint analysis

////////////////////////////////////////// End Table Analysis //////////////////////////////////////////

////////////////////////////////////////// Flagging Analysis ///////////////////////////////////////////
//Series of functions putting flag metric columns in place

//Match adjusts for correct dry read when many S/G readings exist for ISL runs
//No longer supporting ISL runs for Dry Read, so two null columns created

//preDevelopmentMetric(tableName,columnName,metric="sp",direction="Dry",eventOneTime="NULL",eventTwoTime="NULL",singlePoint=1);
Match(instMethod,
	"InstSW", preDevelopmentMetric(dt_algorithm,"Dry Read","sp","dry",-70,"null","last"); preDevelopmentMetric(dt_algorithm,"Dry Read Range","range","dry",-70,"null");
,
	"ISL", dt_algorithm<<NewColumn("Dry Read",Formula("null"));dt_algorithm<<NewColumn("Dry Read Range",Formula("null"));Column(dt_algorithm,"Dry Read")<<deleteformula;Column(dt_algorithm,"Dry Read Range")<<deleteformula;
);

preDevelopmentMetric(dt_algorithm,"Sample Mix","sp","wet",-70);

genericInterpMetric(dt_algorithm,"Response Slope",11,45,"Slope");

genericInterpMetric(dt_algorithm,"Response Range",11,45,"Range");

genericInterpMetric(dt_algorithm,"Response Avg",11,45,"AvgEP");

//Additional metrics based arithmetically on above metrics
dt_algorithm << New Column( "SampMix - Dry",
	Formula(:Name("Sample Mix") - :Dry Read)
);
dt_algorithm << New Column( "SampMix - AR",
	Formula(:Name("Sample Mix") - parseColName)
);
dt_algorithm << New Column( "SampMix - RespAvg",
	Formula(:Name("Sample Mix") - :Name("Response Avg"))
);
dt_algorithm << New Column( "AR - Dry",
	Formula(parseColName - :Dry Read)
);
Column(dt_algorithm, "SampMix - Dry")<<deleteformula;
Column(dt_algorithm, "SampMix - AR")<<deleteformula;
Column(dt_algorithm, "SampMix - RespAvg")<<deleteformula;
Column(dt_algorithm, "AR - Dry")<<deleteformula;

assayDevFlagging(dt_algorithm,crpFlags,"CRP");

//Adds AR column that is the same as Angle unless flags are present, then AR = -1
//Currently all flags are suppression flags
ARparseColName = Parse( Eval Insert( ":name(\!"^colName^\!" )" ) );
dt_algorithm << New Column( "AR",
	Formula(
		If(
			parseColName == -999, -2
		, 
			:Flag_nums != "None", -1
		,
			ARparseColName
		)
	)
);
Column(dt_algorithm, "AR")<<deleteformula;

////////////////////////////////////////// End Flagging Analysis ///////////////////////////////////////

////////////////////////////////////////// Finisihing Touches //////////////////////////////////////////
//Finishing touches will be Assay and User (R&D, Ops, etc) specific

//Duplicates table in manner to remove formulas
dt_algorithmFinal = dt_algorithm << Subset(
	Copy formula( 0 ),
	All rows,
	Selected columns only( 0 )
);

dt_algorithmFinal << SetName(
	titleName||"-"||dateName||"_"||"CRP AR_"||nextTodayDate|| "_progCurves" 
);

//Moves most important columns to front of table
//Try() functions move columns not in common beteween table origins
dt_algorithmFinal << MoveSelectedColumns(
	{
		"Date/Time",
		"Date",
		"Time",
		"Set ID",
		"Operator ID",
		"Run Number",
		"Dried Conjugate Mfg. ID",
		"Sample ID",
		"Instrument ID",
		"AR",
		"Flag",
		"Flag_nums",
		"Barcode"
	},
	To First
);

//Selects one read from each curve to subset into table with only 1 Angle result per run
dt_algorithmFinal << Select Where( (:Name("TimeFromSampleDispense:sec") > 0 & Lag(:Name("TimeFromSampleDispense:sec"),-1)<0) | Row() == NRow());

//Get subset with just the results
dt_justResult = dt_algorithmFinal << Subset(
	output table name( titleName||"-"||dateName||"_"||"CRP AR_"||nextTodayDate|| "_justResults" )
);
dt_algorithmFinal << SelectAllRows;
dt_algorithmFinal << InvertRowSelection;

////////////////////////////////////////// End Finisihing Touches //////////////////////////////////////

//Close all working tables.
Close( dt_algorithm, nosave );
