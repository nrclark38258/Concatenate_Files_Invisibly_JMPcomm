//Author(s)
//NClark
//IDEXX Laboratories, Inc.
//Westbrook, ME 04092

Names Default To Here( 1 );

//------------------Revision History for script---------------------
//
//	1.7 NClark 051121
//		-> Added flagDecoding namespace to use to ensure default path linked to stored location, not a specific folder
//			which a user may not have
//		-> created var for default directory to ensure one is created AND it doesn't potentially collide with one created in tableprep script
//		-> updated flag_data_collection function to take a path parameter and updated open command to utilize it
//		-> updated decode_flag_cols function to add parameter to flag_collection when called
//	1.6 NClark 010220
//		-> Updated decode_flag_cols to start at the 1st row instead of skipping to 2nd
//	1.5 NClark 081919
//		-> Updated CatOne flagging so 40 and 5/6 presence based on contains of decoded rather than testing each flag column
//	1.4 NClark 050218
//		-> added try around column grouping
//	1.3 NClark 042518
//		-> Updated to fix Return() in flag_data_collection
//			-> JMP 13 can only handle 1 return, while JMP 14 could handle multiple
//		-> Updated decode_flag_cols to appropriately handle the change in Return() from above
//	1.2 NClark 041718
//		-> Adjusted fix to work with C1 and CDx data (moved Try() in decode flag cols)
//	1.1 NClark 041618
//		-> Changed parseColName1-3 to use Column()
//	1.0 NClark 040518
//		-> 1st version released
//		-> function to decode catdx and catone flags wherever possible
//------------------------------------------------------------------

If( !Namespace Exists( "flagDecoding" ),
	New Namespace(
		"flagDecoding"
	)
);
fd = Namespace( "flagDecoding" );

fd:defaultPath = Get Default Directory();

change_col_names = Function({dtname},{default local},
	dt = dtname;
	
	col_list = dt << get column names(string);

	if( contains(col_list,"TYP4_FLAG1")>0,
		:Name("TYP4_FLAG1") << Set Name("Flag1_4");
	);
	if( contains(col_list,"TYP4_FLAG2")>0,
		:Name("TYP4_FLAG2") << Set Name("Flag2_4");
	);
	if( contains(col_list,"TYP4_FLAG3")>0,
		:Name("TYP4_FLAG3") << Set Name("Flag3_4");
	);
	if( contains(col_list,"TYP5_FLAG1")>0,
		:Name("TYP5_FLAG1") << Set Name("Flag1_5");
	);
	if( contains(col_list,"TYP5_FLAG2")>0,
		:Name("TYP5_FLAG2") << Set Name("Flag2_5");
	);
	if( contains(col_list,"TYP5_FLAG3")>0,
		:Name("TYP5_FLAG3") << Set Name("Flag3_5");
	);

	if( contains(col_list,"DATA_4_FLAG1")>0,
		:Name("DATA_4_FLAG1") << Set Name("Flag1_4");
	);
	if( contains(col_list,"DATA_4_FLAG2")>0,
		:Name("DATA_4_FLAG2") << Set Name("Flag2_4");
	);	
	if( contains(col_list,"DATA_4_FLAG3")>0,
		:Name("DATA_4_FLAG3") << Set Name("Flag3_4");
	);
	if( contains(col_list,"DATA_5_FLAG1")>0,
		:Name("DATA_5_FLAG1") << Set Name("Flag1_5");
	);
	if( contains(col_list,"DATA_5_FLAG2")>0,
		:Name("DATA_5_FLAG2") << Set Name("Flag2_5");
	);	
	if( contains(col_list,"DATA_5_FLAG3")>0,
		:Name("DATA_5_FLAG3") << Set Name("Flag3_5");
	);
	
	For(i=1,i<=ncol(dt),i++,
		colName = column(dt,i) << get name;
		If(Contains(lowercase(colName),"result") > 0,
			flagValue = Right(colName,1);
			Column(dt, colName) << Set Name("Results Flag"||flagValue);
		,
			flagValue = Substr(colName,Contains(lowercase(colName),"flag")+4,1);
			If(
				Contains(colName,"4"), flagType = "4"
			,
				Contains(colName,"5"), flagType = "5"
			);
			Column(dt, colName) << Set Name("Flag"||flagValue||"_"||flagType);
		)
	);
	
);

decimal_to_row_nums = Function( {val}, {Default Local},
	str_out = "";
	n = val;
	b = 2;
	curr_bit = 0;
	my_list = {};
	While( n,
		curr_bit = curr_bit + 1;
		//Print( n );
		r = Modulo( n, b );
		//Print( r );
		n = (n - r) / b;
		
		If( r == 1, 
			// this bit is set - add to list
			my_list = Insert( my_list, curr_bit );
		);
		
	);
	//show(my_list);
	my_list;
);

flag_data_collection = Function({tablePath},{default local},
	//flag_table = Open("$ADDIN_HOME(com.idexx.jfaller.decode_cdx_flags)\DataLogFlagsDecoded.jmp",invisible);
	flag_table = Open(tablePath||"/DataLogFlagsDecoded.jmp",private);
	//F_NUMS = [];
	//for each row(F_NUMS |/= Matrix({flag_table:flag}));
	F_NUMS = Column(flag_table,"flag") << getasmatrix;
	F_NAME = column(flag_table,"name") << get values;
	Close(flag_table);

	fNumfName = {};
	fNumfName[1] = AsList(F_NUMS);
	fNumfName[2] = F_NAME;
	
	//Return(Eval(F_NUMS),Eval(F_NAME));
	Return(fNumfName);
);

decode_flag_cols = Function({dtname,errorType},{default local},

	flagDetails = flag_data_collection(fd:defaultPath);
	F_NUMS = Matrix(flagDetails[1]);
	F_NAME = flagDetails[2];


	colName1 = "Flag1_"||char(errorType);
	colName2 = "Flag2_"||char(errorType);
	colName3 = "Flag3_"||char(errorType);

	colName4 = "flags_decoded_"||char(errorType);
	colName5 = "flag_names_"||char(errorType);

	/*parseColName1 = Parse( Eval Insert( ":name(\!"^colName1^\!" )" ) );
	parseColName2 = Parse( Eval Insert( ":name(\!"^colName2^\!" )" ) );
	parseColName3 = Parse( Eval Insert( ":name(\!"^colName3^\!" )" ) );
	parseColName4 = Parse( Eval Insert( ":name(\!"^colName4^\!" )" ) );
	parseColName5 = Parse( Eval Insert( ":name(\!"^colName5^\!" )" ) );*/

	Try(
		parseColName1 = Column(dtname, colName1);
		parseColName2 = Column(dtname, colName2);
		parseColName3 = Column(dtname, colName3);

		//IsScriptable(Column(dtname,colName1));
		//IsScriptable(Column(dtname,colName2));
		//IsScriptable(Column(dtname,colName3));
		
		summarized_table = dtname << Summary(
			Group( parseColName1,parseColName2,parseColName3),
			Freq( "None" ),
			Weight( "None" ),
			Link to original data table( 0 ),
			Invisible
		);
		summarized_table << delete column(column("N Rows"));
				
		//summarized_table << New Column("flags_decoded_"||char(errorType),Character,Nominal);
		//summarized_table << New Column("flag_names_"||char(errorType),Character,Nominal);
		parseColName4 = summarized_table << New Column("flags_decoded_"||char(errorType),Character,Nominal);
		parseColName5 = summarized_table << New Column("flag_names_"||char(errorType),Character,Nominal);
		
		col4_1 = Column( summarized_table, colName1 );
		col4_2 = Column( summarized_table, colName2 );
		col4_3 = Column( summarized_table, colName3 );
		
		for(i=1,i<=nrows(summarized_table),i++,
		
			l1 = decimal_to_row_nums(col4_1[i]);
			l2 = decimal_to_row_nums(col4_2[i]) + 32;
			l3 = decimal_to_row_nums(col4_3[i]) + 64;

			f = concat(l1,l2,l3);
			//show(char(f));
			If(n items(f)>0,
				flags = F_NUMS[f];
				//summarized_table:flags_decoded_5[i] = Substitute(char(flags),"[","","]","");
				Column(summarized_table,"flags_decoded_"||char(errorType))[i] = Substitute(char(flags),"[","","]","");
				
				names = F_NAME[f];
				//summarized_table:flag_names_5[i] = concat items(names,"~");
				Column(summarized_table,"flag_names_"||char(errorType))[i] = concat items(names,"~");
			);
		);
		Eval(
			EvalExpr(
				dt << Update(
					With( summarized_table ),
					Match Columns(  Expr(NameExpr(parseColName1)) =  Expr(NameExpr(parseColName1)), Expr(NameExpr(parseColName2)) = Expr(NameExpr(parseColName2)), Expr(NameExpr(parseColName3)) = Expr(NameExpr(parseColName3)) ),
					Add Columns from Update table( Expr(NameExpr(parseColName4)),Expr(NameExpr(parseColName5)) )
				);
			)
		);
		close( summarized_table,no save);
	);
	
);

add_flag_cols = Function({dtname},{default local},

	dt = dtname;
	
	//will give some information if either column is present
	Try(
		IsScriptable(Column(dt,"flags_decoded_4"));
		Try(
			IsScriptable(Column(dt,"flags_decoded_5"));
			dt << New Column("CDx_Contains flag 40",Numeric,Nominal,
				Formula(Contains( :flags_decoded_4, "40" ) > 0 | Contains( :flags_decoded_5, "40" ) > 0)
			);
			column(dt,"CDx_Contains flag 40") << Delete Formula;
			
			dtsubset  = dt << Summary(Group( :flags_decoded_4, :flags_decoded_5 ),private);
			dtsubset << New Column("CDx_Decoded Flags",
				Formula(
					combinecols = :flags_decoded_4 || ", " || :flags_decoded_5;
					wordscols = words(combinecols,", ");
					uniquevals = Associative Array(wordscols) << get keys;
					uniVal = Concat Items(uniquevals, ", ");
					eval(Parse("mtrx = ["||unival||"]";));
					charlist = Char(AsList(sortascending(mtrx)));
					Substitute(charList,"{","","}","")
				)
			);
			column(dtsubset, "CDx_Decoded Flags") << delete formula;
			dt << Update(
				With(
					dtsubset
				),
				Match Columns(
					:flags_decoded_4 = :flags_decoded_4,
					:flags_decoded_5 = :flags_decoded_5
				),
				Add Columns from Update table( :CDx_Decoded Flags )
			);
			Close(dtsubset,nosave);
		,
			dt << New Column("CDx_Contains flag 40",Numeric,Nominal,
				Formula(Contains( :flags_decoded_4, "40" ) > 0)
			);
			column(dt,"CDx_Contains flag 40") << Delete Formula;
			
			dt << New Column("CDx_Decoded Flags",Character(10),
				Formula(
					:flags_decoded_4
				)
			);
			column(dt, "CDx_Decoded Flags") << delete formula;
		)
	,
		Try(
			IsScriptable(Column(dt,"flags_decoded_5"));
			dt << New Column("CDx_Contains flag 40",Numeric,Nominal,
				Formula(Contains( :flags_decoded_5, "40" ) > 0)
			);
			column(dt,"CDx_Contains flag 40") << Delete Formula;
			
			dt << New Column("CDx_Decoded Flags",Character(10),
				Formula(
					:flags_decoded_5
				)
			);
			column(dt, "CDx_Decoded Flags") << delete formula;
		)
	);
	
	Try(
		IsScriptable(Column(dt,"flag_names_5"));
		dt << New Column("CDx_Contains flags 5 or 6",Numeric,Nominal,
			Formula(Contains( :flag_names_5, "FLAG_LESS_THAN_LOWER_CONC_LIMIT" ) > 0 | Contains( :flag_names_5, "FLAG_GREATER_THAN_UPPER_CONC_LIMIT" ) )
		);
		column(dt,"CDx_Contains flags 5 or 6") << Delete Formula;
	);
	
	//requires all columns to be present
	Try(
		IsScriptable(Column(dt,"Results Flag1"));
		IsScriptable(Column(dt,"Results Flag2"));
		IsScriptable(Column(dt,"Results Flag3"));
		IsScriptable(Column(dt,"Results Flag4"));
		IsScriptable(Column(dt,"Results Flag5"));
		dt << New column("C1_Decoded Flags",Numeric,Nominal,
			Formula(
				Concat Items(
					Words(
						Substitute(
								Char( :Results Flag1 ) || " " || Char( :Results Flag2 )
								 || " " || Char( :Results Flag3 ) || " " ||
								Char( :Results Flag4 ) || " " || Char( :Results Flag5 ),
							".", ""
						)
					),
					", "
				)
			)
		);
		column(dt,"C1_Decoded Flags") << Delete Formula;
		
		dt << new column("C1_Contains flag 40",Numeric,Nominal,
			Formula(
				flagList = Words(:Name("C1_Decoded Flags"),", ");
				If(Contains(flagList,"40") > 0, 1
					,
					Contains(flagList,"40") == 0, 0
				)
			)
		);
		column(dt,"C1_Contains flag 40") << Delete Formula;
		
		dt << new column("C1_Contains flags 5 or 6",Numeric,Nominal,
			Formula(
				flagList = Words(:Name("C1_Decoded Flags"),", ");
				If(Contains(flagList,"5") > 0 | Contains(flagList,"6") > 0, 1
					,
					0
				)
			)
		);
		column(dt,"C1_Contains flags 5 or 6") << Delete Formula;
	);

	//make column for common decoded flags
	Try(
		IsScriptable(Column(dt,"CDx_Decoded Flags"));
		Try(
			IsScriptable(Column(dt,"C1_Decoded Flags"));
			dt << New Column("Decoded Flags", Character(10),
				Formula(
					If(IsMissing(:CDx_Decoded Flags),:C1_Decoded Flags,:CDx_Decoded Flags)
				)
			);
			Column(dt,"Decoded Flags") << delete formula;
		,
			dt << New Column("Decoded Flags", Character(10),
				Formula(
					:CDx_Decoded Flags
				)
			);
			Column(dt,"Decoded Flags") << delete formula;
		)
	,
		Try(
			IsScriptable(Column(dt,"C1_Decoded Flags"));
			dt << New Column("Decoded Flags", Character(10),
				Formula(
					:C1_Decoded Flags
				)
			);
			Column(dt,"Decoded Flags") << delete formula;
		)
	);

	//make column for flag 40 based on both instruments, if available
	Try(
		IsScriptable(Column(dt,"CDx_Contains flag 40"));
		Try(
			IsScriptable(Column(dt,"C1_Contains flag 40"));
			dt << New Column("Contains flag 40",Nominal,
				Formula(
					:CDx_Contains flag 40 == 1 | :C1_Contains flag 40 == 1
				)
			);
			column(dt,"Contains flag 40") << Delete Formula;
		,
			dt << New Column("Contains flag 40",Nominal,
				Formula(
					:CDx_Contains flag 40 == 1
				)
			);
			column(dt,"Contains flag 40") << Delete Formula;
		)
	,
		Try(
			IsScriptable(Column(dt,"C1_Contains flag 40"));
			dt << New Column("Contains flag 40",Nominal,
				Formula(
					:C1_Contains flag 40 == 1
				)
			);
			column(dt,"Contains flag 40") << Delete Formula;
		)
	);

	//make column for flag 5&6 based on both instruments, if available
	Try(
		IsScriptable(Column(dt,"CDx_Contains flags 5 or 6"));
		Try(
			IsScriptable(Column(dt,"C1_Contains flags 5 or 6"));
			dt << New Column("Contains flags 5 or 6", Nominal,
				Formula(
					:CDx_Contains flags 5 or 6 == 1 | :C1_Contains flags 5 or 6 == 1
				)
			);
			column(dt,"Contains flags 5 or 6") << Delete Formula;
		,
			dt << New Column("Contains flags 5 or 6",Nominal,
				Formula(
					:CDx_Contains flags 5 or 6 == 1
				)
			);
			column(dt,"Contains flags 5 or 6") << Delete Formula;
		)
	,
		Try(
			IsScriptable(Column(dt,"C1_Contains flags 5 or 6"));
			dt << New Column("Contains flags 5 or 6",Nominal,
				Formula(
					:C1_Contains flags 5 or 6 == 1
				)
			);
			column(dt,"Contains flags 5 or 6") << Delete Formula;
		)
	);
	
);

group_all_new_columns = Function({dtName},{default local},

	colList = {};
	col1 = "flags_decoded_4";
	col2 = "flag_names_4";
	col3 = "flags_decoded_5";
	col4 = "flag_names_5";
	col5 = "CDx_Contains flag 40";
	col6 = "CDx_Contains flags 5 or 6";
	col7 = "C1_Contains flag 40";
	col8 = "C1_Contains flags 5 or 6";
	col9 = "Contains flag 40";
	col10 = "Contains flags 5 or 6";
	col11 = "CDx_Decoded Flags";
	col12 = "C1_Decoded Flags";
	col13 = "Decoded Flags";
	
	Try(IsScriptable(Column(dtName,col1));InsertInto(colList,col1));
	Try(IsScriptable(Column(dtName,col2));InsertInto(colList,col2));
	Try(IsScriptable(Column(dtName,col3));InsertInto(colList,col3));
	Try(IsScriptable(Column(dtName,col4));InsertInto(colList,col4));
	Try(IsScriptable(Column(dtName,col5));InsertInto(colList,col5));
	Try(IsScriptable(Column(dtName,col6));InsertInto(colList,col6));
	Try(IsScriptable(Column(dtName,col7));InsertInto(colList,col7));
	Try(IsScriptable(Column(dtName,col8));InsertInto(colList,col8));
	Try(IsScriptable(Column(dtName,col9));InsertInto(colList,col9));
	Try(IsScriptable(Column(dtName,col10));InsertInto(colList,col10));
	Try(IsScriptable(Column(dtName,col11));InsertInto(colList,col11));
	Try(IsScriptable(Column(dtName,col12));InsertInto(colList,col12));
	Try(IsScriptable(Column(dtName,col13));InsertInto(colList,col13));
	
	Try(dtName << Group Columns("Flag Decoding",colList));
	
);
